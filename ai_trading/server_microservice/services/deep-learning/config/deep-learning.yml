service:
  name: deep-learning
  description: Deep Learning microservice - Advanced AI models, pattern discovery, and neural networks
  version: 1.0.0
  environment: ${MICROSERVICE_ENVIRONMENT:development}
  port: ${DEEP_LEARNING_PORT:8004}
  debug: ${DEEP_LEARNING_DEBUG:false}
  host: ${DEEP_LEARNING_HOST:0.0.0.0}
  
cors:
  enabled: ${CORS_ENABLED:true}
  origins:
    - ${CORS_ORIGINS:*}
    
rate_limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}
  requests_per_minute: ${RATE_LIMITING_REQUESTS_PER_MINUTE:1000}

deep_learning:
  frameworks: ${DL_FRAMEWORKS:tensorflow,pytorch,transformers}
  gpu_enabled: ${DL_GPU_ENABLED:false}
  model_cache_size_gb: ${DL_MODEL_CACHE_SIZE_GB:10}
  inference_timeout_seconds: ${DL_INFERENCE_TIMEOUT_SECONDS:120}
  
models:
  transformers:
    enabled: ${MODELS_TRANSFORMERS_ENABLED:true}
    max_sequence_length: ${MODELS_TRANSFORMERS_MAX_SEQUENCE_LENGTH:512}
    batch_size: ${MODELS_TRANSFORMERS_BATCH_SIZE:8}
    model_name: ${MODELS_TRANSFORMERS_MODEL_NAME:bert-base-uncased}
    
  neural_networks:
    enabled: ${MODELS_NEURAL_NETWORKS_ENABLED:true}
    layers: ${MODELS_NEURAL_NETWORKS_LAYERS:dense,lstm,cnn}
    
  pattern_discovery:
    enabled: ${MODELS_PATTERN_DISCOVERY_ENABLED:true}
    algorithms: ${MODELS_PATTERN_DISCOVERY_ALGORITHMS:clustering,anomaly_detection,time_series_analysis}

ai_coordination:
  multi_model_ensemble: ${AI_COORDINATION_MULTI_MODEL_ENSEMBLE:true}
  model_selection_strategy: ${AI_COORDINATION_MODEL_SELECTION_STRATEGY:performance}
  fallback_enabled: ${AI_COORDINATION_FALLBACK_ENABLED:true}
  
performance:
  parallel_processing: ${PERFORMANCE_PARALLEL_PROCESSING:true}
  memory_limit_gb: ${PERFORMANCE_MEMORY_LIMIT_GB:16}
  cpu_cores: ${PERFORMANCE_CPU_CORES:8}
  model_warming: ${PERFORMANCE_MODEL_WARMING:true}
  
monitoring:
  model_performance_tracking: ${MONITORING_MODEL_PERFORMANCE_TRACKING:true}
  prediction_logging: ${MONITORING_PREDICTION_LOGGING:true}
  resource_monitoring: ${MONITORING_RESOURCE_MONITORING:true}
  health_check_interval_seconds: ${HEALTH_CHECK_INTERVAL:30}
  metrics_enabled: ${METRICS_ENABLED:true}

database:
  host: ${DATABASE_HOST:localhost}
  port: ${DATABASE_PORT:5432}
  name: ${DATABASE_NAME:deep_learning_db}
  user: ${DATABASE_USER:postgres}
  password: ${DATABASE_PASSWORD:}
  
cache:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  db: ${REDIS_DB:4}
  password: ${REDIS_PASSWORD:}
  
logging:
  level: ${LOG_LEVEL:INFO}
  format: ${LOG_FORMAT:json}
  enable_model_logging: ${ENABLE_MODEL_LOGGING:true}
  enable_prediction_logging: ${ENABLE_PREDICTION_LOGGING:true}

security:
  enable_authentication: ${ENABLE_AUTHENTICATION:false}
  api_key_header: ${API_KEY_HEADER:X-API-Key}
  allowed_ips: ${ALLOWED_IPS:}

# AI Services Integration
ai_services:
  # LiteLLM Configuration
  litellm:
    enabled: ${LITELLM_ENABLED:true}
    api_base: ${LITELLM_API_BASE:}
    api_key: ${LITELLM_API_KEY:}
    model: ${LITELLM_MODEL:gpt-3.5-turbo}
    max_tokens: ${LITELLM_MAX_TOKENS:4000}
    temperature: ${LITELLM_TEMPERATURE:0.7}
    
  # Anthropic Configuration
  anthropic:
    enabled: ${ANTHROPIC_ENABLED:false}
    api_key: ${ANTHROPIC_API_KEY:}
    model: ${ANTHROPIC_MODEL:claude-3-sonnet-20240229}
    max_tokens: ${ANTHROPIC_MAX_TOKENS:4000}
    
  # OpenAI Configuration
  openai:
    enabled: ${OPENAI_ENABLED:false}
    api_key: ${OPENAI_API_KEY:}
    organization: ${OPENAI_ORGANIZATION:}
    model: ${OPENAI_MODEL:gpt-4}
    max_tokens: ${OPENAI_MAX_TOKENS:4000}
    
  # Google AI Configuration
  google_ai:
    enabled: ${GOOGLE_AI_ENABLED:false}
    api_key: ${GOOGLE_AI_API_KEY:}
    model: ${GOOGLE_AI_MODEL:gemini-pro}
    project_id: ${GOOGLE_AI_PROJECT_ID:}

# Memory Enhancement Systems
memory_systems:
  # Letta Integration
  letta:
    enabled: ${LETTA_ENABLED:false}
    api_base: ${LETTA_API_BASE:http://localhost:8283}
    api_key: ${LETTA_API_KEY:}
    user_id: ${LETTA_USER_ID:default_user}
    agent_id: ${LETTA_AGENT_ID:}
    timeout: ${LETTA_TIMEOUT:30}
    
  # Weaviate Vector Database
  weaviate:
    enabled: ${WEAVIATE_ENABLED:false}
    url: ${WEAVIATE_URL:http://localhost:8080}
    api_key: ${WEAVIATE_API_KEY:}
    index_name: ${WEAVIATE_INDEX_NAME:DeepLearningMemory}
    vector_dimensions: ${WEAVIATE_VECTOR_DIMENSIONS:1536}
    
  # Langfuse Observability
  langfuse:
    enabled: ${LANGFUSE_ENABLED:false}
    public_key: ${LANGFUSE_PUBLIC_KEY:}
    secret_key: ${LANGFUSE_SECRET_KEY:}
    host: ${LANGFUSE_HOST:https://cloud.langfuse.com}

# Model Architecture Configurations
model_architectures:
  # LSTM Configuration
  lstm:
    enabled: ${LSTM_ENABLED:true}
    hidden_size: ${LSTM_HIDDEN_SIZE:128}
    num_layers: ${LSTM_NUM_LAYERS:2}
    dropout: ${LSTM_DROPOUT:0.2}
    bidirectional: ${LSTM_BIDIRECTIONAL:true}
    
  # GRU Configuration
  gru:
    enabled: ${GRU_ENABLED:true}
    hidden_size: ${GRU_HIDDEN_SIZE:128}
    num_layers: ${GRU_NUM_LAYERS:2}
    dropout: ${GRU_DROPOUT:0.2}
    bidirectional: ${GRU_BIDIRECTIONAL:false}
    
  # Transformer Configuration
  transformer:
    enabled: ${TRANSFORMER_ENABLED:true}
    d_model: ${TRANSFORMER_D_MODEL:512}
    nhead: ${TRANSFORMER_NHEAD:8}
    num_layers: ${TRANSFORMER_NUM_LAYERS:6}
    dim_feedforward: ${TRANSFORMER_DIM_FEEDFORWARD:2048}
    dropout: ${TRANSFORMER_DROPOUT:0.1}
    
  # CNN Configuration
  cnn:
    enabled: ${CNN_ENABLED:true}
    num_filters: ${CNN_NUM_FILTERS:64}
    filter_sizes: ${CNN_FILTER_SIZES:3,4,5}
    dropout: ${CNN_DROPOUT:0.5}
    pool_size: ${CNN_POOL_SIZE:2}

# Training Configuration
training:
  batch_size: ${TRAINING_BATCH_SIZE:32}
  epochs: ${TRAINING_EPOCHS:100}
  learning_rate: ${TRAINING_LEARNING_RATE:0.001}
  optimizer: ${TRAINING_OPTIMIZER:adam}
  scheduler: ${TRAINING_SCHEDULER:step}
  early_stopping: ${TRAINING_EARLY_STOPPING:true}
  patience: ${TRAINING_PATIENCE:10}
  validation_split: ${TRAINING_VALIDATION_SPLIT:0.2}
  
# Pattern Discovery Settings
pattern_discovery:
  ensemble_size: ${PATTERN_ENSEMBLE_SIZE:5}
  confidence_threshold: ${PATTERN_CONFIDENCE_THRESHOLD:0.7}
  pattern_length: ${PATTERN_LENGTH:10}
  overlap_threshold: ${PATTERN_OVERLAP_THRESHOLD:0.5}
  
# AI Coordination Settings
ai_coordination:
  intelligent_routing: ${AI_INTELLIGENT_ROUTING:true}
  fallback_strategy: ${AI_FALLBACK_STRATEGY:cascade}
  timeout_seconds: ${AI_COORDINATION_TIMEOUT:30}
  retry_attempts: ${AI_COORDINATION_RETRY_ATTEMPTS:3}
  
# Feature Engineering
feature_engineering:
  enabled: ${FEATURE_ENGINEERING_ENABLED:true}
  technical_indicators: ${TECHNICAL_INDICATORS:sma,ema,rsi,macd,bollinger}
  lookback_periods: ${LOOKBACK_PERIODS:5,10,20,50}
  volatility_windows: ${VOLATILITY_WINDOWS:10,20,30}

# Authentication & Service Secrets
authentication:
  enabled: ${AUTH_ENABLED:false}
  jwt_secret: ${JWT_SECRET_KEY:}
  jwt_algorithm: ${JWT_ALGORITHM:HS256}
  token_expire_minutes: ${JWT_TOKEN_EXPIRE_MINUTES:60}

service_secrets:
  api_gateway: ${API_GATEWAY_SERVICE_SECRET:}
  database_service: ${DATABASE_SERVICE_SECRET:}
  trading_engine: ${TRADING_ENGINE_SERVICE_SECRET:}
  ai_orchestration: ${AI_ORCHESTRATION_SERVICE_SECRET:}
  data_bridge: ${DATA_BRIDGE_SERVICE_SECRET:}

# Environment-specific configurations
environments:
  development:
    debug: true
    log_level: debug
    gpu_enabled: false
    model_cache_size_gb: 5
    training:
      epochs: 10
      batch_size: 16
    ai_services:
      litellm:
        enabled: true
      anthropic:
        enabled: false
      openai:
        enabled: false
        
  production:
    debug: false
    log_level: info
    gpu_enabled: true
    model_cache_size_gb: 20
    training:
      epochs: 100
      batch_size: 64
    ai_services:
      litellm:
        enabled: true
      anthropic:
        enabled: true
      openai:
        enabled: true
        
  testing:
    debug: true
    log_level: debug
    gpu_enabled: false
    model_cache_size_gb: 2
    training:
      epochs: 5
      batch_size: 8
    ai_services:
      litellm:
        enabled: false
      anthropic:
        enabled: false
      openai:
        enabled: false