service:
  name: api-gateway
  description: API Gateway microservice - Central routing and authentication
  version: 1.0.0
  environment: ${MICROSERVICE_ENVIRONMENT:development}
  port: ${API_GATEWAY_PORT:8000}
  debug: ${API_GATEWAY_DEBUG:false}
  host: ${API_GATEWAY_HOST:0.0.0.0}

cors:
  enabled: ${CORS_ENABLED:true}
  origins:
    - ${CORS_ORIGINS:*}
  allow_credentials: ${CORS_ALLOW_CREDENTIALS:true}
  allow_methods:
    - "*"
  allow_headers:
    - "*"

rate_limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}
  requests_per_minute: ${RATE_LIMITING_REQUESTS_PER_MINUTE:1000}
  window_seconds: ${RATE_LIMITING_WINDOW_SECONDS:60}
  max_requests: ${RATE_LIMITING_MAX_REQUESTS:100}

authentication:
  enabled: ${AUTH_ENABLED:true}
  jwt_secret: ${JWT_SECRET_KEY:}
  jwt_algorithm: ${JWT_ALGORITHM:HS256}
  token_expire_minutes: ${JWT_TOKEN_EXPIRE_MINUTES:30}
  refresh_token_expire_days: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:7}
  
  # Service-to-service authentication secrets
  service_secrets:
    ai-orchestration: ${AI_ORCHESTRATION_SERVICE_SECRET:}
    data-bridge: ${DATA_BRIDGE_SERVICE_SECRET:}
    ml-processing: ${ML_PROCESSING_SERVICE_SECRET:}
    trading-engine: ${TRADING_ENGINE_SERVICE_SECRET:}
    database-service: ${DATABASE_SERVICE_SECRET:}

services:
  mt5_bridge:
    url: ${MT5_BRIDGE_URL:http://mt5-bridge:8001}
    timeout: ${MT5_BRIDGE_TIMEOUT:30}
    enabled: ${MT5_BRIDGE_ENABLED:true}
    
  trading_engine:
    url: ${TRADING_ENGINE_URL:http://trading-engine:8007}
    timeout: ${TRADING_ENGINE_TIMEOUT:30}
    enabled: ${TRADING_ENGINE_ENABLED:true}
    
  database_service:
    url: ${DATABASE_SERVICE_URL:http://database-service:8008}
    timeout: ${DATABASE_SERVICE_TIMEOUT:30}
    enabled: ${DATABASE_SERVICE_ENABLED:true}
    
  ai_orchestration:
    url: ${AI_ORCHESTRATION_URL:http://ai-orchestration:8003}
    timeout: ${AI_ORCHESTRATION_TIMEOUT:30}
    enabled: ${AI_ORCHESTRATION_ENABLED:true}
    
  ai_provider:
    url: ${AI_PROVIDER_URL:http://ai-provider:8005}
    timeout: ${AI_PROVIDER_TIMEOUT:30}
    enabled: ${AI_PROVIDER_ENABLED:true}
    
  ml_processing:
    url: ${ML_PROCESSING_URL:http://ml-processing:8006}
    timeout: ${ML_PROCESSING_TIMEOUT:30}
    enabled: ${ML_PROCESSING_ENABLED:true}
    
  deep_learning:
    url: ${DEEP_LEARNING_URL:http://deep-learning:8004}
    timeout: ${DEEP_LEARNING_TIMEOUT:30}
    enabled: ${DEEP_LEARNING_ENABLED:true}

monitoring:
  health_check_interval_seconds: ${HEALTH_CHECK_INTERVAL:30}
  metrics_enabled: ${METRICS_ENABLED:true}
  performance_tracking: ${PERFORMANCE_TRACKING_ENABLED:true}
  log_requests: ${LOG_REQUESTS_ENABLED:true}
  
security:
  trusted_hosts: ${TRUSTED_HOSTS:*}
  enable_security_headers: ${ENABLE_SECURITY_HEADERS:true}
  max_request_size: ${MAX_REQUEST_SIZE:10485760}
  
database:
  host: ${DATABASE_HOST:localhost}
  port: ${DATABASE_PORT:5432}
  name: ${DATABASE_NAME:api_gateway_db}
  user: ${DATABASE_USER:postgres}
  password: ${DATABASE_PASSWORD:}
  
cache:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  db: ${REDIS_DB:0}
  password: ${REDIS_PASSWORD:}
  dragonflydb_url: ${DRAGONFLYDB_URL:redis://dragonflydb:6379}
  
logging:
  level: ${LOG_LEVEL:INFO}
  format: ${LOG_FORMAT:json}
  enable_request_logging: ${ENABLE_REQUEST_LOGGING:true}
  enable_performance_logging: ${ENABLE_PERFORMANCE_LOGGING:true}

# Environment-specific configurations
environments:
  development:
    debug: true
    log_level: debug
    cors_origins: "*"
  production:
    debug: false
    log_level: info
    cors_origins: "https://yourdomain.com"
  testing:
    debug: true
    log_level: debug
    cors_origins: "http://localhost:3000"
