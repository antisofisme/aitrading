service:
  name: ai-orchestration
  description: AI Orchestration microservice - Unified coordination with Handit AI, Letta, LangGraph, and Langfuse integration
  version: 2.0.0
  environment: ${MICROSERVICE_ENVIRONMENT:development}
  port: ${AI_ORCHESTRATION_PORT:8003}
  debug: ${AI_ORCHESTRATION_DEBUG:false}
  host: ${AI_ORCHESTRATION_HOST:0.0.0.0}
  
cors:
  enabled: ${CORS_ENABLED:true}
  origins:
    - "${CORS_ORIGINS:*}"
    
rate_limiting:
  enabled: ${RATE_LIMITING_ENABLED:true}
  requests_per_minute: ${RATE_LIMITING_REQUESTS_PER_MINUTE:1000}

# AI SERVICES CONFIGURATION - Core orchestration components
ai_services:
  handit:
    enabled: ${HANDIT_AI_ENABLED:true}
    api_key: ${HANDIT_AI_API_KEY:}
    base_url: ${HANDIT_AI_BASE_URL:https://api.handit.ai}
    timeout_seconds: ${HANDIT_AI_TIMEOUT:30}
    max_concurrent_requests: ${HANDIT_AI_MAX_CONCURRENT:10}
    model_specialty: ${HANDIT_AI_MODEL_SPECIALTY:trading}
    task_types:
      - analysis
      - comprehensive_analysis
      - trading_signal_generation
      - risk_assessment
    
  letta:
    enabled: ${LETTA_MEMORY_ENABLED:true}
    base_url: ${LETTA_BASE_URL:http://localhost:8283}
    api_key: ${LETTA_API_KEY:}
    max_memories: ${LETTA_MAX_MEMORIES:1000}
    retention_days: ${LETTA_RETENTION_DAYS:30}
    memory_types:
      - semantic
      - episodic
      - procedural
    debug: ${LETTA_DEBUG:false}
    
  langgraph:
    enabled: ${LANGGRAPH_ENABLED:true}
    max_concurrent_workflows: ${LANGGRAPH_MAX_CONCURRENT:10}
    timeout_seconds: ${LANGGRAPH_TIMEOUT:300}
    retry_attempts: ${LANGGRAPH_RETRIES:3}
    debug: ${LANGGRAPH_DEBUG:false}
    workflow_templates:
      - trading_analysis_microservice
      - risk_management_workflow
      - market_sentiment_analysis
      - comprehensive_trading_strategy
    
  langfuse:
    enabled: ${LANGFUSE_ENABLED:true}
    public_key: ${LANGFUSE_PUBLIC_KEY:}
    secret_key: ${LANGFUSE_SECRET_KEY:}
    host: ${LANGFUSE_HOST:https://cloud.langfuse.com}
    flush_at: ${LANGFUSE_FLUSH_AT:15}
    flush_interval: ${LANGFUSE_FLUSH_INTERVAL:0.5}
    debug: ${LANGFUSE_DEBUG:false}
    session_tracking: ${LANGFUSE_SESSION_TRACKING:true}
    user_tracking: ${LANGFUSE_USER_TRACKING:true}

# TASK SCHEDULING CONFIGURATION
task_scheduling:
  enabled: ${TASK_SCHEDULING_ENABLED:true}
  max_concurrent_tasks: ${TASK_SCHEDULING_MAX_CONCURRENT:50}
  queue_size: ${TASK_SCHEDULING_QUEUE_SIZE:1000}
  retry_attempts: ${TASK_SCHEDULING_RETRY_ATTEMPTS:3}
  retry_delay_seconds: ${TASK_SCHEDULING_RETRY_DELAY:5}
  task_timeout_seconds: ${TASK_SCHEDULING_TIMEOUT:3600}

# AGENT COORDINATOR CONFIGURATION
agent_coordinator:
  enabled: ${AGENT_COORDINATOR_ENABLED:true}
  max_active_agents: ${AGENT_COORDINATOR_MAX_AGENTS:100}
  max_queue_size: ${AGENT_COORDINATOR_MAX_QUEUE:1000}
  agent_timeout_seconds: ${AGENT_COORDINATOR_TIMEOUT:300}
  message_timeout_seconds: ${AGENT_MESSAGE_TIMEOUT:30}
  coordination_strategies:
    - sequential
    - parallel
    - conditional

# WORKFLOW ORCHESTRATION
workflow_orchestration:
  enabled: ${WORKFLOW_ORCHESTRATION_ENABLED:true}
  max_concurrent_workflows: ${WORKFLOW_ORCHESTRATION_MAX_CONCURRENT:20}
  workflow_timeout_seconds: ${WORKFLOW_ORCHESTRATION_TIMEOUT:1800}
  checkpoint_enabled: ${WORKFLOW_ORCHESTRATION_CHECKPOINT_ENABLED:true}
  recovery_enabled: ${WORKFLOW_ORCHESTRATION_RECOVERY_ENABLED:true}

# OBSERVABILITY CONFIGURATION
observability:
  level: ${OBSERVABILITY_LEVEL:detailed}
  trace_all_operations: ${OBSERVABILITY_TRACE_ALL:true}
  log_ai_interactions: ${OBSERVABILITY_LOG_AI_INTERACTIONS:true}
  performance_monitoring: ${OBSERVABILITY_PERFORMANCE_MONITORING:true}
  error_tracking: ${OBSERVABILITY_ERROR_TRACKING:true}

# PERFORMANCE CONFIGURATION
performance:
  enable_caching: ${PERFORMANCE_ENABLE_CACHING:true}
  cache_ttl_seconds: ${PERFORMANCE_CACHE_TTL_SECONDS:300}
  enable_compression: ${PERFORMANCE_ENABLE_COMPRESSION:true}
  batch_processing: ${PERFORMANCE_BATCH_PROCESSING:true}
  parallel_execution: ${PERFORMANCE_PARALLEL_EXECUTION:true}
  memory_limit_mb: ${PERFORMANCE_MEMORY_LIMIT_MB:2048}

# MONITORING CONFIGURATION
monitoring:
  health_check_interval_seconds: ${HEALTH_CHECK_INTERVAL:30}
  metrics_enabled: ${METRICS_ENABLED:true}
  performance_tracking: ${PERFORMANCE_TRACKING_ENABLED:true}
  component_health_monitoring: ${MONITORING_COMPONENT_HEALTH:true}
  workflow_monitoring: ${MONITORING_WORKFLOW_MONITORING:true}
  resource_monitoring: ${MONITORING_RESOURCE_MONITORING:true}

# SECURITY CONFIGURATION
security:
  enable_authentication: ${ENABLE_AUTHENTICATION:false}
  jwt_secret: ${JWT_SECRET:}
  jwt_expiry_hours: ${JWT_EXPIRY_HOURS:24}
  api_key_header: ${API_KEY_HEADER:X-API-Key}
  allowed_ips: ${ALLOWED_IPS:}
  session_timeout_seconds: ${SESSION_TIMEOUT:3600}
  rate_limit_by_user: ${SECURITY_RATE_LIMIT_BY_USER:true}

# DATABASE CONFIGURATION
database:
  host: ${DATABASE_HOST:localhost}
  port: ${DATABASE_PORT:5432}
  name: ${DATABASE_NAME:ai_orchestration_db}
  user: ${DATABASE_USER:postgres}
  password: ${DATABASE_PASSWORD:}
  
# CACHE CONFIGURATION
cache:
  host: ${REDIS_HOST:localhost}
  port: ${REDIS_PORT:6379}
  db: ${REDIS_DB:7}
  password: ${REDIS_PASSWORD:}

# MESSAGE BROKERS CONFIGURATION (AI Event Processing)
message_brokers:
  # NATS for AI system events (primary for AI orchestration)
  nats:
    enabled: ${NATS_ENABLED:true}
    servers: ${NATS_SERVERS:nats://localhost:4222}
    subjects:
      ai_events: ${NATS_AI_EVENTS:ai.orchestration.*}
      workflow_events: ${NATS_WORKFLOW_EVENTS:ai.workflows.*}
      agent_events: ${NATS_AGENT_EVENTS:ai.agents.*}
      model_events: ${NATS_MODEL_EVENTS:ai.models.*}
    jetstream:
      enabled: ${NATS_JETSTREAM_ENABLED:true}
      stream_name: ${NATS_AI_STREAM:AI_ORCHESTRATION}
      storage: ${NATS_STORAGE:file}
      max_age: ${NATS_MAX_AGE:24h}
      
  # Redpanda for high-frequency AI results (trading decisions)
  redpanda:
    enabled: ${REDPANDA_ENABLED:true}
    bootstrap_servers: ${REDPANDA_BOOTSTRAP_SERVERS:localhost:19092}
    topics:
      ai_decisions: ${REDPANDA_AI_DECISIONS:ai-trading-decisions}
      model_predictions: ${REDPANDA_MODEL_PREDICTIONS:ai-model-predictions}
      risk_assessments: ${REDPANDA_RISK_ASSESSMENTS:ai-risk-assessments}
    producer_config:
      batch_size: ${REDPANDA_BATCH_SIZE:50}
      compression_type: ${REDPANDA_COMPRESSION:snappy}
      retries: ${REDPANDA_RETRIES:5}
    consumer_config:
      group_id: ${REDPANDA_GROUP_ID:ai-orchestration-consumer}
      auto_offset_reset: ${REDPANDA_AUTO_OFFSET:latest}
  
# LOGGING CONFIGURATION
logging:
  level: ${LOG_LEVEL:INFO}
  format: ${LOG_FORMAT:json}
  enable_ai_logging: ${ENABLE_AI_LOGGING:true}
  enable_workflow_logging: ${ENABLE_WORKFLOW_LOGGING:true}
  enable_orchestration_logging: ${ENABLE_ORCHESTRATION_LOGGING:true}
  enable_component_logging: ${ENABLE_COMPONENT_LOGGING:true}

# EXTERNAL SERVICES CONFIGURATION
external_services:
  api_gateway: ${API_GATEWAY_URL:http://api-gateway:8000}
  trading_engine: ${TRADING_ENGINE_URL:http://trading-engine:8007}
  ml_processing: ${ML_PROCESSING_URL:http://ml-processing:8006}
  deep_learning: ${DEEP_LEARNING_URL:http://deep-learning:8004}
  data_bridge: ${DATA_BRIDGE_URL:http://data-bridge:8001}

# ENVIRONMENT-SPECIFIC CONFIGURATIONS
environments:
  development:
    debug: true
    log_level: debug
    handit_timeout: 60
    max_concurrent_workflows: 5
    observability_level: detailed
    enable_all_tracing: true
  production:
    debug: false
    log_level: info
    handit_timeout: 30
    max_concurrent_workflows: 20
    observability_level: production
    enable_all_tracing: false
  testing:
    debug: true
    log_level: debug
    handit_timeout: 10
    max_concurrent_workflows: 2
    observability_level: minimal
    enable_all_tracing: false