/**
 * HTML Coverage Reporter
 * Generates comprehensive HTML reports with interactive visualizations
 */

import { promises as fs } from 'fs';
import * as path from 'path';
import { CoverageAnalysis, CoverageData, FileCoverage, ModuleAnalysis } from '../core/coverage-analyzer';
import { CoverageConfig } from '../config/coverage-config';

export interface HTMLReportOptions {
  outputDir: string;
  includeSourceCode: boolean;
  includeCharts: boolean;
  theme: 'light' | 'dark' | 'auto';
  customCSS?: string;
  customJS?: string;
}

export class HTMLReporter {
  private options: HTMLReportOptions;

  constructor(options: Partial<HTMLReportOptions> = {}) {
    this.options = {
      outputDir: 'coverage/html',
      includeSourceCode: true,
      includeCharts: true,
      theme: 'light',
      ...options
    };
  }

  async generateReport(
    coverageData: CoverageData,
    analysis: CoverageAnalysis,
    config: CoverageConfig
  ): Promise<string> {
    const outputDir = this.options.outputDir;
    await this.ensureDirectory(outputDir);

    // Generate main index page
    const indexPath = path.join(outputDir, 'index.html');
    await this.generateIndexPage(indexPath, coverageData, analysis, config);

    // Generate module pages
    for (const moduleAnalysis of analysis.moduleAnalysis) {
      const moduleDir = path.join(outputDir, 'modules');
      await this.ensureDirectory(moduleDir);
      const modulePath = path.join(moduleDir, `${moduleAnalysis.module.name.replace(/\s+/g, '-').toLowerCase()}.html`);
      await this.generateModulePage(modulePath, moduleAnalysis, config);
    }

    // Generate file pages
    const filesDir = path.join(outputDir, 'files');
    await this.ensureDirectory(filesDir);
    for (const [filePath, fileCoverage] of coverageData.files.entries()) {
      const sanitizedPath = filePath.replace(/[^a-zA-Z0-9]/g, '-');
      const filePagePath = path.join(filesDir, `${sanitizedPath}.html`);
      await this.generateFilePage(filePagePath, fileCoverage, config);
    }

    // Copy static assets
    await this.copyStaticAssets(outputDir);

    return indexPath;
  }

  private async generateIndexPage(
    outputPath: string,
    coverageData: CoverageData,
    analysis: CoverageAnalysis,
    config: CoverageConfig
  ): Promise<void> {
    const html = `
<!DOCTYPE html>
<html lang="en" data-theme="${this.options.theme}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coverage Report - AI Trading Platform</title>
    <link rel="stylesheet" href="assets/styles.css">
    <link rel="stylesheet" href="assets/charts.css">
    ${this.options.customCSS ? `<link rel="stylesheet" href="${this.options.customCSS}">` : ''}
    <script src="assets/chart.min.js"></script>
    <script src="assets/coverage.js"></script>
    ${this.options.customJS ? `<script src="${this.options.customJS}"></script>` : ''}
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1>Coverage Report</h1>
            <div class="report-meta">
                <span class="timestamp">Generated: ${coverageData.timestamp.toLocaleString()}</span>
                <span class="version">Version: ${coverageData.metadata.version || 'Unknown'}</span>
                <span class="branch">Branch: ${coverageData.metadata.branch || 'Unknown'}</span>
            </div>
        </header>

        <nav class="report-nav">
            <ul>
                <li><a href="#summary" class="active">Summary</a></li>
                <li><a href="#modules">Modules</a></li>
                <li><a href="#quality-gates">Quality Gates</a></li>
                <li><a href="#trends">Trends</a></li>
                <li><a href="#recommendations">Recommendations</a></li>
                <li><a href="#hotspots">Hotspots</a></li>
            </ul>
        </nav>

        <main class="report-content">
            ${this.generateSummarySection(analysis.summary)}
            ${this.generateModulesSection(analysis.moduleAnalysis)}
            ${this.generateQualityGatesSection(analysis.qualityGateResults)}
            ${this.generateTrendsSection(analysis.trends)}
            ${this.generateRecommendationsSection(analysis.recommendations)}
            ${this.generateHotspotsSection(analysis.hotspots)}
        </main>

        <footer class="report-footer">
            <p>Generated by AI Trading Platform Coverage System</p>
            <p>Report generated on ${new Date().toLocaleString()}</p>
        </footer>
    </div>

    <script>
        // Initialize interactive elements
        document.addEventListener('DOMContentLoaded', function() {
            initializeCharts();
            initializeNavigation();
            initializeTooltips();
        });
    </script>
</body>
</html>`;

    await fs.writeFile(outputPath, html, 'utf-8');
  }

  private generateSummarySection(summary: any): string {
    return `
<section id="summary" class="report-section">
    <h2>Coverage Summary</h2>

    <div class="metrics-grid">
        <div class="metric-card">
            <h3>Lines</h3>
            <div class="metric-value ${this.getCoverageClass(summary.lines.lines)}">${summary.lines.lines}%</div>
            <div class="metric-progress">
                <div class="progress-bar" style="width: ${summary.lines.lines}%"></div>
            </div>
        </div>

        <div class="metric-card">
            <h3>Functions</h3>
            <div class="metric-value ${this.getCoverageClass(summary.functions.functions)}">${summary.functions.functions}%</div>
            <div class="metric-progress">
                <div class="progress-bar" style="width: ${summary.functions.functions}%"></div>
            </div>
        </div>

        <div class="metric-card">
            <h3>Branches</h3>
            <div class="metric-value ${this.getCoverageClass(summary.branches.branches)}">${summary.branches.branches}%</div>
            <div class="metric-progress">
                <div class="progress-bar" style="width: ${summary.branches.branches}%"></div>
            </div>
        </div>

        <div class="metric-card">
            <h3>Statements</h3>
            <div class="metric-value ${this.getCoverageClass(summary.statements.statements)}">${summary.statements.statements}%</div>
            <div class="metric-progress">
                <div class="progress-bar" style="width: ${summary.statements.statements}%"></div>
            </div>
        </div>
    </div>

    ${this.options.includeCharts ? this.generateSummaryChart(summary) : ''}

    <div class="summary-stats">
        <div class="stat-item">
            <label>Total Files:</label>
            <span>${summary.files}</span>
        </div>
        <div class="stat-item">
            <label>Total Size:</label>
            <span>${this.formatBytes(summary.totalSize)}</span>
        </div>
        <div class="stat-item">
            <label>Average Complexity:</label>
            <span>${summary.averageComplexity.toFixed(2)}</span>
        </div>
    </div>
</section>`;
  }

  private generateModulesSection(moduleAnalysis: ModuleAnalysis[]): string {
    const moduleRows = moduleAnalysis.map(module => `
        <tr class="module-row ${module.passed ? 'passed' : 'failed'}" data-module="${module.module.name}">
            <td class="module-name">
                <a href="modules/${module.module.name.replace(/\s+/g, '-').toLowerCase()}.html">
                    ${module.module.name}
                </a>
                <div class="module-tags">
                    ${module.module.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
            </td>
            <td class="coverage-cell ${this.getCoverageClass(module.coverage.lines.lines)}">
                ${module.coverage.lines.lines}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(module.coverage.functions.functions)}">
                ${module.coverage.functions.functions}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(module.coverage.branches.branches)}">
                ${module.coverage.branches.branches}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(module.coverage.statements.statements)}">
                ${module.coverage.statements.statements}%
            </td>
            <td class="score-cell">
                <div class="score-badge ${this.getScoreClass(module.score)}">${module.score}</div>
            </td>
            <td class="status-cell">
                <div class="status-badge ${module.passed ? 'passed' : 'failed'}">
                    ${module.passed ? 'PASS' : 'FAIL'}
                </div>
                ${module.violations.length > 0 ? `<div class="violations">${module.violations.length} violations</div>` : ''}
            </td>
        </tr>
    `).join('');

    return `
<section id="modules" class="report-section">
    <h2>Module Analysis</h2>

    <div class="section-controls">
        <div class="filter-controls">
            <label for="module-filter">Filter:</label>
            <select id="module-filter">
                <option value="all">All Modules</option>
                <option value="passed">Passing Only</option>
                <option value="failed">Failing Only</option>
                <option value="critical">Critical Only</option>
            </select>
        </div>
        <div class="sort-controls">
            <label for="module-sort">Sort by:</label>
            <select id="module-sort">
                <option value="name">Name</option>
                <option value="coverage">Coverage</option>
                <option value="score">Score</option>
                <option value="violations">Violations</option>
            </select>
        </div>
    </div>

    <div class="table-container">
        <table class="modules-table">
            <thead>
                <tr>
                    <th>Module</th>
                    <th>Lines</th>
                    <th>Functions</th>
                    <th>Branches</th>
                    <th>Statements</th>
                    <th>Score</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="modules-tbody">
                ${moduleRows}
            </tbody>
        </table>
    </div>
</section>`;
  }

  private generateQualityGatesSection(qualityGateResults: any[]): string {
    const gateRows = qualityGateResults.map(result => `
        <div class="quality-gate ${result.passed ? 'passed' : 'failed'}">
            <div class="gate-header">
                <h4>${result.gate.name}</h4>
                <div class="gate-status ${result.passed ? 'passed' : 'failed'}">
                    ${result.passed ? 'PASS' : 'FAIL'}
                </div>
            </div>
            <div class="gate-description">${result.gate.description}</div>
            <div class="gate-conditions">
                ${result.conditions.map((condition: any) => `
                    <div class="condition ${condition.passed ? 'passed' : 'failed'}">
                        <div class="condition-metric">${condition.condition.metric}</div>
                        <div class="condition-value">
                            ${condition.actualValue} ${condition.condition.operator} ${condition.expectedValue}
                        </div>
                        <div class="condition-status">${condition.passed ? '✓' : '✗'}</div>
                    </div>
                `).join('')}
            </div>
            <div class="gate-score">Score: ${result.score}/100</div>
        </div>
    `).join('');

    return `
<section id="quality-gates" class="report-section">
    <h2>Quality Gates</h2>
    <div class="quality-gates-container">
        ${gateRows}
    </div>
</section>`;
  }

  private generateTrendsSection(trends: any): string {
    const trendIcon = trends.trend === 'improving' ? '📈' : trends.trend === 'declining' ? '📉' : '📊';
    const trendClass = trends.trend === 'improving' ? 'improving' : trends.trend === 'declining' ? 'declining' : 'stable';

    return `
<section id="trends" class="report-section">
    <h2>Trend Analysis</h2>

    <div class="trend-summary">
        <div class="trend-indicator ${trendClass}">
            ${trendIcon} ${trends.trend.toUpperCase()}
        </div>
        <div class="trend-details">
            <div class="trend-item">
                <label>Change:</label>
                <span class="${trends.changePercent >= 0 ? 'positive' : 'negative'}">
                    ${trends.changePercent >= 0 ? '+' : ''}${trends.changePercent.toFixed(2)}%
                </span>
            </div>
            <div class="trend-item">
                <label>Prediction:</label>
                <span>${trends.prediction.toFixed(2)}%</span>
            </div>
        </div>
    </div>

    ${this.options.includeCharts ? this.generateTrendChart(trends) : ''}
</section>`;
  }

  private generateRecommendationsSection(recommendations: any[]): string {
    const recommendationItems = recommendations.map(rec => `
        <div class="recommendation ${rec.type}">
            <div class="recommendation-header">
                <h4>${rec.title}</h4>
                <div class="recommendation-badges">
                    <span class="badge type-${rec.type}">${rec.type}</span>
                    <span class="badge impact-${rec.impact}">${rec.impact} impact</span>
                    <span class="badge effort-${rec.effort}">${rec.effort} effort</span>
                </div>
            </div>
            <div class="recommendation-description">${rec.description}</div>
            <div class="recommendation-files">
                <strong>Affected files (${rec.files.length}):</strong>
                <ul>
                    ${rec.files.slice(0, 5).map((file: string) => `<li>${file}</li>`).join('')}
                    ${rec.files.length > 5 ? `<li>... and ${rec.files.length - 5} more</li>` : ''}
                </ul>
            </div>
            <div class="action-items">
                <strong>Action Items:</strong>
                <ul>
                    ${rec.actionItems.map((item: any) => `
                        <li>
                            ${item.description}
                            ${item.file ? `<code>${item.file}</code>` : ''}
                        </li>
                    `).join('')}
                </ul>
            </div>
        </div>
    `).join('');

    return `
<section id="recommendations" class="report-section">
    <h2>Recommendations</h2>
    <div class="recommendations-container">
        ${recommendationItems}
    </div>
</section>`;
  }

  private generateHotspotsSection(hotspots: any[]): string {
    const hotspotItems = hotspots.slice(0, 20).map(hotspot => `
        <div class="hotspot ${hotspot.severity}">
            <div class="hotspot-header">
                <h4>${hotspot.file}</h4>
                <div class="hotspot-badges">
                    <span class="badge severity-${hotspot.severity}">${hotspot.severity}</span>
                    <span class="badge type-${hotspot.type}">${hotspot.type}</span>
                </div>
            </div>
            <div class="hotspot-metrics">
                <div class="metric">
                    <label>Coverage:</label>
                    <span class="${this.getCoverageClass(hotspot.coverage)}">${hotspot.coverage}%</span>
                </div>
                <div class="metric">
                    <label>Complexity:</label>
                    <span>${hotspot.complexity}</span>
                </div>
                <div class="metric">
                    <label>Size:</label>
                    <span>${this.formatBytes(hotspot.size)}</span>
                </div>
                <div class="metric">
                    <label>Priority:</label>
                    <span>${hotspot.priority}</span>
                </div>
            </div>
            <div class="hotspot-description">${hotspot.description}</div>
        </div>
    `).join('');

    return `
<section id="hotspots" class="report-section">
    <h2>Coverage Hotspots</h2>
    <div class="hotspots-container">
        ${hotspotItems}
    </div>
</section>`;
  }

  private generateSummaryChart(summary: any): string {
    return `
<div class="chart-container">
    <canvas id="summaryChart" width="400" height="200"></canvas>
    <script>
        function initializeSummaryChart() {
            const ctx = document.getElementById('summaryChart').getContext('2d');
            new Chart(ctx, {
                type: 'doughnut',
                data: {
                    labels: ['Lines', 'Functions', 'Branches', 'Statements'],
                    datasets: [{
                        data: [${summary.lines.lines}, ${summary.functions.functions}, ${summary.branches.branches}, ${summary.statements.statements}],
                        backgroundColor: ['#4CAF50', '#2196F3', '#FF9800', '#9C27B0'],
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        if (typeof Chart !== 'undefined') {
            initializeSummaryChart();
        }
    </script>
</div>`;
  }

  private generateTrendChart(trends: any): string {
    const labels = trends.historical.map((point: any) =>
      new Date(point.timestamp).toLocaleDateString()
    ).slice(-10);

    const data = trends.historical.map((point: any) =>
      point.coverage.lines.lines
    ).slice(-10);

    return `
<div class="chart-container">
    <canvas id="trendChart" width="400" height="200"></canvas>
    <script>
        function initializeTrendChart() {
            const ctx = document.getElementById('trendChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: ${JSON.stringify(labels)},
                    datasets: [{
                        label: 'Coverage Trend',
                        data: ${JSON.stringify(data)},
                        borderColor: '#2196F3',
                        backgroundColor: 'rgba(33, 150, 243, 0.1)',
                        fill: true,
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            max: 100,
                            ticks: {
                                callback: function(value) {
                                    return value + '%';
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false
                        }
                    }
                }
            });
        }

        if (typeof Chart !== 'undefined') {
            initializeTrendChart();
        }
    </script>
</div>`;
  }

  private async generateModulePage(
    outputPath: string,
    moduleAnalysis: ModuleAnalysis,
    config: CoverageConfig
  ): Promise<void> {
    const fileRows = moduleAnalysis.files.map(file => `
        <tr class="file-row" data-file="${file.path}">
            <td class="file-name">
                <a href="../files/${file.path.replace(/[^a-zA-Z0-9]/g, '-')}.html">
                    ${path.basename(file.path)}
                </a>
                <div class="file-path">${file.path}</div>
            </td>
            <td class="coverage-cell ${this.getCoverageClass(file.lines.percentage)}">
                ${file.lines.percentage}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(file.functions.percentage)}">
                ${file.functions.percentage}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(file.branches.percentage)}">
                ${file.branches.percentage}%
            </td>
            <td class="coverage-cell ${this.getCoverageClass(file.statements.percentage)}">
                ${file.statements.percentage}%
            </td>
            <td class="complexity-cell">${file.complexity}</td>
            <td class="size-cell">${this.formatBytes(file.size)}</td>
        </tr>
    `).join('');

    const html = `
<!DOCTYPE html>
<html lang="en" data-theme="${this.options.theme}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Module: ${moduleAnalysis.module.name} - Coverage Report</title>
    <link rel="stylesheet" href="../assets/styles.css">
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1><a href="../index.html">Coverage Report</a> / ${moduleAnalysis.module.name}</h1>
            <div class="module-status ${moduleAnalysis.passed ? 'passed' : 'failed'}">
                ${moduleAnalysis.passed ? 'PASSING' : 'FAILING'}
            </div>
        </header>

        <div class="module-summary">
            <div class="module-info">
                <h2>${moduleAnalysis.module.name}</h2>
                <div class="module-meta">
                    <span class="module-path">${moduleAnalysis.module.path}</span>
                    <span class="module-priority priority-${moduleAnalysis.module.priority}">${moduleAnalysis.module.priority} priority</span>
                    ${moduleAnalysis.module.critical ? '<span class="module-critical">CRITICAL</span>' : ''}
                </div>
                <div class="module-tags">
                    ${moduleAnalysis.module.tags.map(tag => `<span class="tag">${tag}</span>`).join('')}
                </div>
            </div>

            <div class="module-metrics">
                <div class="metric-card">
                    <h3>Lines</h3>
                    <div class="metric-value ${this.getCoverageClass(moduleAnalysis.coverage.lines.lines)}">${moduleAnalysis.coverage.lines.lines}%</div>
                    <div class="threshold">Threshold: ${moduleAnalysis.module.thresholds.lines}%</div>
                </div>
                <div class="metric-card">
                    <h3>Functions</h3>
                    <div class="metric-value ${this.getCoverageClass(moduleAnalysis.coverage.functions.functions)}">${moduleAnalysis.coverage.functions.functions}%</div>
                    <div class="threshold">Threshold: ${moduleAnalysis.module.thresholds.functions}%</div>
                </div>
                <div class="metric-card">
                    <h3>Branches</h3>
                    <div class="metric-value ${this.getCoverageClass(moduleAnalysis.coverage.branches.branches)}">${moduleAnalysis.coverage.branches.branches}%</div>
                    <div class="threshold">Threshold: ${moduleAnalysis.module.thresholds.branches}%</div>
                </div>
                <div class="metric-card">
                    <h3>Statements</h3>
                    <div class="metric-value ${this.getCoverageClass(moduleAnalysis.coverage.statements.statements)}">${moduleAnalysis.coverage.statements.statements}%</div>
                    <div class="threshold">Threshold: ${moduleAnalysis.module.thresholds.statements}%</div>
                </div>
            </div>
        </div>

        ${moduleAnalysis.violations.length > 0 ? `
        <div class="violations-section">
            <h3>Threshold Violations</h3>
            <div class="violations-list">
                ${moduleAnalysis.violations.map(violation => `
                    <div class="violation ${violation.severity}">
                        <strong>${violation.metric}:</strong> ${violation.actual}% (expected: ${violation.expected}%)
                    </div>
                `).join('')}
            </div>
        </div>
        ` : ''}

        <div class="files-section">
            <h3>Files (${moduleAnalysis.files.length})</h3>
            <div class="table-container">
                <table class="files-table">
                    <thead>
                        <tr>
                            <th>File</th>
                            <th>Lines</th>
                            <th>Functions</th>
                            <th>Branches</th>
                            <th>Statements</th>
                            <th>Complexity</th>
                            <th>Size</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${fileRows}
                    </tbody>
                </table>
            </div>
        </div>

        <footer class="report-footer">
            <a href="../index.html">← Back to Summary</a>
        </footer>
    </div>
</body>
</html>`;

    await fs.writeFile(outputPath, html, 'utf-8');
  }

  private async generateFilePage(
    outputPath: string,
    fileCoverage: FileCoverage,
    config: CoverageConfig
  ): Promise<void> {
    let sourceCode = '';
    if (this.options.includeSourceCode) {
      try {
        sourceCode = await fs.readFile(fileCoverage.path, 'utf-8');
      } catch {
        sourceCode = '// Source code not available';
      }
    }

    const html = `
<!DOCTYPE html>
<html lang="en" data-theme="${this.options.theme}">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File: ${path.basename(fileCoverage.path)} - Coverage Report</title>
    <link rel="stylesheet" href="../assets/styles.css">
    <link rel="stylesheet" href="../assets/syntax-highlight.css">
</head>
<body>
    <div class="container">
        <header class="report-header">
            <h1><a href="../index.html">Coverage Report</a> / ${path.basename(fileCoverage.path)}</h1>
        </header>

        <div class="file-summary">
            <div class="file-info">
                <h2>${path.basename(fileCoverage.path)}</h2>
                <div class="file-path">${fileCoverage.path}</div>
                <div class="file-meta">
                    <span>Size: ${this.formatBytes(fileCoverage.size)}</span>
                    <span>Complexity: ${fileCoverage.complexity}</span>
                    <span>Modified: ${fileCoverage.lastModified.toLocaleDateString()}</span>
                </div>
            </div>

            <div class="file-metrics">
                <div class="metric-card">
                    <h3>Lines</h3>
                    <div class="metric-value ${this.getCoverageClass(fileCoverage.lines.percentage)}">${fileCoverage.lines.percentage}%</div>
                    <div class="metric-detail">${fileCoverage.lines.covered}/${fileCoverage.lines.total}</div>
                </div>
                <div class="metric-card">
                    <h3>Functions</h3>
                    <div class="metric-value ${this.getCoverageClass(fileCoverage.functions.percentage)}">${fileCoverage.functions.percentage}%</div>
                    <div class="metric-detail">${fileCoverage.functions.covered}/${fileCoverage.functions.total}</div>
                </div>
                <div class="metric-card">
                    <h3>Branches</h3>
                    <div class="metric-value ${this.getCoverageClass(fileCoverage.branches.percentage)}">${fileCoverage.branches.percentage}%</div>
                    <div class="metric-detail">${fileCoverage.branches.covered}/${fileCoverage.branches.total}</div>
                </div>
                <div class="metric-card">
                    <h3>Statements</h3>
                    <div class="metric-value ${this.getCoverageClass(fileCoverage.statements.percentage)}">${fileCoverage.statements.percentage}%</div>
                    <div class="metric-detail">${fileCoverage.statements.covered}/${fileCoverage.statements.total}</div>
                </div>
            </div>
        </div>

        ${this.options.includeSourceCode ? `
        <div class="source-section">
            <h3>Source Code</h3>
            <div class="source-container">
                <div class="source-code">
                    ${this.highlightSourceCode(sourceCode, fileCoverage)}
                </div>
            </div>
        </div>
        ` : ''}

        <footer class="report-footer">
            <a href="../index.html">← Back to Summary</a>
        </footer>
    </div>
</body>
</html>`;

    await fs.writeFile(outputPath, html, 'utf-8');
  }

  private highlightSourceCode(sourceCode: string, fileCoverage: FileCoverage): string {
    const lines = sourceCode.split('\n');
    const uncoveredLines = new Set(fileCoverage.lines.uncoveredLines);
    const partialLines = new Set(fileCoverage.lines.partiallyCovaeredLines);

    return lines.map((line, index) => {
      const lineNumber = index + 1;
      let className = 'covered';

      if (uncoveredLines.has(lineNumber)) {
        className = 'uncovered';
      } else if (partialLines.has(lineNumber)) {
        className = 'partial';
      }

      const escapedLine = line
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#39;');

      return `<div class="source-line ${className}"><span class="line-number">${lineNumber}</span><span class="line-content">${escapedLine}</span></div>`;
    }).join('');
  }

  private async copyStaticAssets(outputDir: string): Promise<void> {
    const assetsDir = path.join(outputDir, 'assets');
    await this.ensureDirectory(assetsDir);

    // Generate CSS
    const css = this.generateCSS();
    await fs.writeFile(path.join(assetsDir, 'styles.css'), css, 'utf-8');

    // Generate JavaScript
    const js = this.generateJavaScript();
    await fs.writeFile(path.join(assetsDir, 'coverage.js'), js, 'utf-8');

    // Copy Chart.js (in real implementation, you'd copy the actual file)
    const chartJs = '/* Chart.js would be included here */';
    await fs.writeFile(path.join(assetsDir, 'chart.min.js'), chartJs, 'utf-8');
  }

  private generateCSS(): string {
    return `
/* Coverage Report Styles */
:root {
  --primary-color: #2196F3;
  --success-color: #4CAF50;
  --warning-color: #FF9800;
  --error-color: #F44336;
  --info-color: #9C27B0;
  --bg-color: #ffffff;
  --text-color: #333333;
  --border-color: #e0e0e0;
  --shadow: 0 2px 4px rgba(0,0,0,0.1);
}

[data-theme="dark"] {
  --bg-color: #1a1a1a;
  --text-color: #ffffff;
  --border-color: #444444;
  --shadow: 0 2px 4px rgba(0,0,0,0.3);
}

* {
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  margin: 0;
  padding: 0;
  background-color: var(--bg-color);
  color: var(--text-color);
  line-height: 1.6;
}

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.report-header {
  padding: 20px 0;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 30px;
}

.report-header h1 {
  margin: 0;
  color: var(--primary-color);
}

.report-meta {
  margin-top: 10px;
  display: flex;
  gap: 20px;
  flex-wrap: wrap;
}

.report-meta span {
  padding: 4px 8px;
  background-color: #f5f5f5;
  border-radius: 4px;
  font-size: 0.9em;
}

.report-nav ul {
  list-style: none;
  padding: 0;
  margin: 0;
  display: flex;
  gap: 20px;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 30px;
}

.report-nav a {
  display: block;
  padding: 10px 0;
  text-decoration: none;
  color: var(--text-color);
  border-bottom: 2px solid transparent;
  transition: border-color 0.3s;
}

.report-nav a:hover,
.report-nav a.active {
  border-color: var(--primary-color);
}

.report-section {
  margin-bottom: 40px;
}

.report-section h2 {
  color: var(--primary-color);
  border-bottom: 2px solid var(--primary-color);
  padding-bottom: 10px;
}

.metrics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 20px;
  margin-bottom: 30px;
}

.metric-card {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: var(--shadow);
  text-align: center;
}

.metric-card h3 {
  margin: 0 0 10px 0;
  color: var(--text-color);
}

.metric-value {
  font-size: 2em;
  font-weight: bold;
  margin-bottom: 10px;
}

.metric-value.excellent { color: var(--success-color); }
.metric-value.good { color: #66BB6A; }
.metric-value.fair { color: var(--warning-color); }
.metric-value.poor { color: var(--error-color); }

.metric-progress {
  height: 8px;
  background-color: #f0f0f0;
  border-radius: 4px;
  overflow: hidden;
}

.progress-bar {
  height: 100%;
  background-color: var(--success-color);
  transition: width 0.3s ease;
}

.table-container {
  overflow-x: auto;
  margin: 20px 0;
}

table {
  width: 100%;
  border-collapse: collapse;
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: var(--shadow);
}

th, td {
  padding: 12px;
  text-align: left;
  border-bottom: 1px solid var(--border-color);
}

th {
  background-color: #f8f9fa;
  font-weight: 600;
}

.coverage-cell.excellent { background-color: #e8f5e8; }
.coverage-cell.good { background-color: #f0f8e8; }
.coverage-cell.fair { background-color: #fff3e0; }
.coverage-cell.poor { background-color: #ffebee; }

.status-badge {
  padding: 4px 12px;
  border-radius: 12px;
  font-size: 0.8em;
  font-weight: bold;
  text-transform: uppercase;
}

.status-badge.passed {
  background-color: var(--success-color);
  color: white;
}

.status-badge.failed {
  background-color: var(--error-color);
  color: white;
}

.quality-gates-container {
  display: grid;
  gap: 20px;
}

.quality-gate {
  background: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: var(--shadow);
}

.quality-gate.passed {
  border-left: 4px solid var(--success-color);
}

.quality-gate.failed {
  border-left: 4px solid var(--error-color);
}

.gate-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.gate-conditions {
  display: grid;
  gap: 10px;
  margin: 15px 0;
}

.condition {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px;
  background-color: #f8f9fa;
  border-radius: 4px;
}

.condition.passed {
  background-color: #e8f5e8;
}

.condition.failed {
  background-color: #ffebee;
}

.recommendations-container {
  display: grid;
  gap: 20px;
}

.recommendation {
  background: white;
  border-radius: 8px;
  padding: 20px;
  box-shadow: var(--shadow);
}

.recommendation.critical {
  border-left: 4px solid var(--error-color);
}

.recommendation.warning {
  border-left: 4px solid var(--warning-color);
}

.recommendation.improvement {
  border-left: 4px solid var(--info-color);
}

.recommendation-badges {
  display: flex;
  gap: 8px;
  margin-top: 10px;
}

.badge {
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.75em;
  font-weight: bold;
  text-transform: uppercase;
}

.badge.type-critical { background-color: var(--error-color); color: white; }
.badge.type-warning { background-color: var(--warning-color); color: white; }
.badge.type-improvement { background-color: var(--info-color); color: white; }

.hotspots-container {
  display: grid;
  gap: 15px;
}

.hotspot {
  background: white;
  border-radius: 8px;
  padding: 15px;
  box-shadow: var(--shadow);
}

.hotspot.high {
  border-left: 4px solid var(--error-color);
}

.hotspot.medium {
  border-left: 4px solid var(--warning-color);
}

.hotspot.low {
  border-left: 4px solid var(--info-color);
}

.hotspot-metrics {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 10px;
  margin: 10px 0;
}

.hotspot-metrics .metric {
  display: flex;
  justify-content: space-between;
}

.chart-container {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: var(--shadow);
  margin: 20px 0;
}

.source-section {
  margin-top: 30px;
}

.source-container {
  background: white;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: var(--shadow);
}

.source-code {
  font-family: 'Monaco', 'Consolas', monospace;
  font-size: 14px;
  line-height: 1.4;
}

.source-line {
  display: flex;
  border-bottom: 1px solid #f0f0f0;
}

.source-line.covered {
  background-color: #e8f5e8;
}

.source-line.uncovered {
  background-color: #ffebee;
}

.source-line.partial {
  background-color: #fff3e0;
}

.line-number {
  background-color: #f8f9fa;
  padding: 8px 12px;
  color: #666;
  min-width: 60px;
  text-align: right;
  user-select: none;
}

.line-content {
  padding: 8px 12px;
  white-space: pre;
  flex: 1;
}

.report-footer {
  text-align: center;
  padding: 40px 0;
  border-top: 1px solid var(--border-color);
  margin-top: 50px;
  color: #666;
}

@media (max-width: 768px) {
  .metrics-grid {
    grid-template-columns: 1fr;
  }

  .report-nav ul {
    flex-direction: column;
    gap: 0;
  }

  .gate-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 10px;
  }
}
`;
  }

  private generateJavaScript(): string {
    return `
// Coverage Report JavaScript
function initializeCharts() {
  if (typeof Chart === 'undefined') return;

  // Charts would be initialized here
}

function initializeNavigation() {
  const navLinks = document.querySelectorAll('.report-nav a');
  const sections = document.querySelectorAll('.report-section');

  navLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const targetId = link.getAttribute('href').substring(1);
      const targetSection = document.getElementById(targetId);

      if (targetSection) {
        targetSection.scrollIntoView({ behavior: 'smooth' });

        navLinks.forEach(l => l.classList.remove('active'));
        link.classList.add('active');
      }
    });
  });

  // Update active nav based on scroll position
  window.addEventListener('scroll', () => {
    let current = '';
    sections.forEach(section => {
      const sectionTop = section.offsetTop;
      const sectionHeight = section.clientHeight;
      if (pageYOffset >= sectionTop - 200) {
        current = section.getAttribute('id');
      }
    });

    navLinks.forEach(link => {
      link.classList.remove('active');
      if (link.getAttribute('href') === \`#\${current}\`) {
        link.classList.add('active');
      }
    });
  });
}

function initializeTooltips() {
  // Tooltip initialization would go here
}

function initializeModuleFilters() {
  const filterSelect = document.getElementById('module-filter');
  const sortSelect = document.getElementById('module-sort');
  const tbody = document.getElementById('modules-tbody');

  if (!filterSelect || !sortSelect || !tbody) return;

  const rows = Array.from(tbody.querySelectorAll('.module-row'));

  function filterAndSort() {
    const filterValue = filterSelect.value;
    const sortValue = sortSelect.value;

    // Filter rows
    let filteredRows = rows.filter(row => {
      if (filterValue === 'all') return true;
      if (filterValue === 'passed') return row.classList.contains('passed');
      if (filterValue === 'failed') return row.classList.contains('failed');
      if (filterValue === 'critical') return row.dataset.critical === 'true';
      return true;
    });

    // Sort rows
    filteredRows.sort((a, b) => {
      switch (sortValue) {
        case 'name':
          return a.querySelector('.module-name').textContent.localeCompare(
            b.querySelector('.module-name').textContent
          );
        case 'coverage':
          const aCoverage = parseFloat(a.querySelector('.coverage-cell').textContent);
          const bCoverage = parseFloat(b.querySelector('.coverage-cell').textContent);
          return bCoverage - aCoverage;
        case 'score':
          const aScore = parseInt(a.querySelector('.score-badge').textContent);
          const bScore = parseInt(b.querySelector('.score-badge').textContent);
          return bScore - aScore;
        case 'violations':
          const aViolations = (a.querySelector('.violations') || {}).textContent || '0';
          const bViolations = (b.querySelector('.violations') || {}).textContent || '0';
          return parseInt(bViolations) - parseInt(aViolations);
        default:
          return 0;
      }
    });

    // Clear and repopulate tbody
    tbody.innerHTML = '';
    filteredRows.forEach(row => tbody.appendChild(row));
  }

  filterSelect.addEventListener('change', filterAndSort);
  sortSelect.addEventListener('change', filterAndSort);
}

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  initializeNavigation();
  initializeTooltips();
  initializeModuleFilters();

  // Initialize charts after a short delay to ensure elements are rendered
  setTimeout(initializeCharts, 100);
});
`;
  }

  private getCoverageClass(percentage: number): string {
    if (percentage >= 90) return 'excellent';
    if (percentage >= 80) return 'good';
    if (percentage >= 70) return 'fair';
    return 'poor';
  }

  private getScoreClass(score: number): string {
    if (score >= 90) return 'excellent';
    if (score >= 80) return 'good';
    if (score >= 70) return 'fair';
    return 'poor';
  }

  private formatBytes(bytes: number): string {
    if (bytes === 0) return '0 B';
    const k = 1024;
    const sizes = ['B', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  private async ensureDirectory(dir: string): Promise<void> {
    try {
      await fs.access(dir);
    } catch {
      await fs.mkdir(dir, { recursive: true });
    }
  }
}