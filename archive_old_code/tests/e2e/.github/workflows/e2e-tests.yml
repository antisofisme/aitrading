name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - smoke
          - regression
          - integration
          - performance
      browser:
        description: 'Browser to test'
        required: false
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
          - all

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      test-matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set test matrix
        id: set-matrix
        run: |
          if [ "${{ github.event.inputs.test_suite }}" = "smoke" ]; then
            echo "matrix={\"suite\":[\"smoke\"],\"browser\":[\"chromium\"]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.test_suite }}" = "regression" ]; then
            echo "matrix={\"suite\":[\"regression\"],\"browser\":[\"chromium\",\"firefox\"]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.test_suite }}" = "integration" ]; then
            echo "matrix={\"suite\":[\"integration\"],\"browser\":[\"chromium\"]}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.test_suite }}" = "performance" ]; then
            echo "matrix={\"suite\":[\"performance\"],\"browser\":[\"chromium\"]}" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"suite\":[\"smoke\",\"regression\",\"integration\"],\"browser\":[\"chromium\",\"firefox\"]}" >> $GITHUB_OUTPUT
          fi

  smoke-tests:
    runs-on: ubuntu-latest
    if: contains(fromJSON(needs.setup.outputs.test-matrix).suite, 'smoke')
    needs: setup
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: aitrading_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install --with-deps

      - name: Setup test environment
        run: |
          cd tests/e2e
          node scripts/setup-test-environment.js
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/aitrading_test
          REDIS_URL: redis://localhost:6379

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432 -U test; do sleep 1; done'
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'

      - name: Run smoke tests
        run: |
          cd tests/e2e
          npm run test:e2e:smoke
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/reports/
          retention-days: 7

  regression-tests:
    runs-on: ubuntu-latest
    if: contains(fromJSON(needs.setup.outputs.test-matrix).suite, 'regression')
    needs: setup
    timeout-minutes: 90
    strategy:
      matrix:
        browser: ${{ fromJSON(needs.setup.outputs.test-matrix).browser }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install --with-deps

      - name: Setup Docker environment
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          cd tests/e2e
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:8002/health; do sleep 5; done'

      - name: Seed test data
        run: |
          cd tests/e2e
          node scripts/seed-test-data.js

      - name: Run regression tests
        run: |
          cd tests/e2e
          npm run test:e2e:regression -- --project=${{ matrix.browser }}
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1

      - name: Generate test report
        if: always()
        run: |
          cd tests/e2e
          npm run report:generate

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: regression-test-results-${{ matrix.browser }}
          path: |
            tests/e2e/test-results/
            tests/e2e/reports/
          retention-days: 7

      - name: Cleanup Docker environment
        if: always()
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml down -v

  integration-tests:
    runs-on: ubuntu-latest
    if: contains(fromJSON(needs.setup.outputs.test-matrix).suite, 'integration')
    needs: setup
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install --with-deps

      - name: Setup Docker environment
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          cd tests/e2e
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'
          timeout 300 bash -c 'until curl -f http://localhost:8001/health; do sleep 5; done'

      - name: Run integration tests
        run: |
          cd tests/e2e
          npm run test:e2e:integration
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/reports/
          retention-days: 7

      - name: Cleanup Docker environment
        if: always()
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml down -v

  performance-tests:
    runs-on: ubuntu-latest
    if: contains(fromJSON(needs.setup.outputs.test-matrix).suite, 'performance')
    needs: setup
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install chromium

      - name: Setup Docker environment
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml up -d
          sleep 30

      - name: Wait for services to be ready
        run: |
          cd tests/e2e
          timeout 300 bash -c 'until curl -f http://localhost:3000/health; do sleep 5; done'

      - name: Run performance tests
        run: |
          cd tests/e2e
          npm run test:e2e:performance
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/reports/
          retention-days: 14

      - name: Cleanup Docker environment
        if: always()
        run: |
          cd tests/e2e
          docker-compose -f docker-compose.test.yml down -v

  accessibility-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install chromium

      - name: Setup test environment
        run: |
          cd tests/e2e
          node scripts/setup-test-environment.js

      - name: Run accessibility tests
        run: |
          cd tests/e2e
          npm run test:e2e:accessibility
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-test-results
          path: |
            tests/e2e/reports/accessibility/
          retention-days: 7

  security-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install chromium

      - name: Setup test environment
        run: |
          cd tests/e2e
          node scripts/setup-test-environment.js

      - name: Run security tests
        run: |
          cd tests/e2e
          npm run test:e2e:security
        env:
          CI: true
          BASE_URL: http://localhost:3000
          API_BASE_URL: http://localhost:8000/api/v1

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            tests/e2e/reports/security/
          retention-days: 7

  mobile-tests:
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd tests/e2e && npm ci

      - name: Install Playwright browsers
        run: |
          cd tests/e2e
          npx playwright install chromium webkit

      - name: Setup test environment
        run: |
          cd tests/e2e
          node scripts/setup-test-environment.js

      - name: Run mobile tests
        run: |
          cd tests/e2e
          npm run test:e2e:mobile
        env:
          CI: true
          BASE_URL: http://localhost:3000

      - name: Upload mobile results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-test-results
          path: |
            tests/e2e/test-results/
            tests/e2e/reports/
          retention-days: 7

  report-generation:
    runs-on: ubuntu-latest
    needs: [smoke-tests, regression-tests, integration-tests, performance-tests, accessibility-tests, security-tests, mobile-tests]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results

      - name: Install report dependencies
        run: |
          npm install -g allure-commandline

      - name: Generate consolidated report
        run: |
          mkdir -p consolidated-report
          find test-results -name "*.json" -exec cp {} consolidated-report/ \;

          # Generate HTML report
          if [ -d "test-results/*/reports/allure-results" ]; then
            allure generate test-results/*/reports/allure-results -o consolidated-report/allure-report
          fi

      - name: Upload consolidated report
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: consolidated-report/
          retention-days: 14

      - name: Comment PR with test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Find test result summary
            let summary = '## E2E Test Results\n\n';

            const artifacts = [
              'smoke-test-results',
              'regression-test-results-chromium',
              'integration-test-results',
              'performance-test-results',
              'accessibility-test-results',
              'security-test-results',
              'mobile-test-results'
            ];

            artifacts.forEach(artifact => {
              summary += `- ${artifact}: `;
              try {
                const resultPath = path.join('test-results', artifact);
                if (fs.existsSync(resultPath)) {
                  summary += '✅ Passed\n';
                } else {
                  summary += '❌ Failed or Skipped\n';
                }
              } catch (error) {
                summary += '❓ Unknown\n';
              }
            });

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  cleanup:
    runs-on: ubuntu-latest
    needs: [report-generation]
    if: always()

    steps:
      - name: Cleanup test artifacts
        run: |
          echo "Test run completed. Artifacts will be automatically cleaned up based on retention settings."