syntax = "proto3";

package suho.common.v1;

option go_package = "github.com/suho/trading/proto/common/v1";
option java_package = "com.suho.common.v1";
option java_outer_classname = "BaseProto";

// Common timestamp (aligned with Client-MT5)
message Timestamp {
  int64 seconds = 1;         // Unix timestamp seconds
  int32 nanos = 2;           // Nanoseconds for precision
}

// Money representation (aligned with MT5 account data)
message Money {
  string currency_code = 1;  // "USD", "EUR", etc.
  int64 units = 2;           // Integer part (multiplied by 100 for cents)
  int32 nanos = 3;           // Fractional part in nanoseconds
}

// Universal message envelope for all services
message MessageEnvelope {
  string message_type = 1;      // "price_stream", "trading_command", etc.
  string user_id = 2;           // User identifier (for Kafka partitioning)
  bytes payload = 3;            // Actual protobuf message
  int64 timestamp = 4;          // Unix timestamp in milliseconds
  string service_source = 5;    // Originating service
  string correlation_id = 6;    // Request tracing

  // Transfer metadata
  string transport_method = 7;  // "nats-kafka", "grpc", "http"
  string destination_service = 8; // Target service
  bool is_binary_passthrough = 9; // True if contains Suho binary data
}

// Service discovery and health
message ServiceInfo {
  string name = 1;
  string host = 2;
  int32 port = 3;
  string protocol = 4;          // "http", "grpc", "websocket"
  string health_endpoint = 5;
  bool tenant_capable = 6;
  repeated string subscription_requirements = 7;
  string resource_tier = 8;
}

// Standard response format
message StandardResponse {
  bool success = 1;
  string message = 2;
  int32 code = 3;               // Error code if applicable
  Timestamp timestamp = 4;
  string correlation_id = 5;
  map<string, string> metadata = 6;
}