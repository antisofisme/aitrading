syntax = "proto3";

package central_hub.discovery;

import "google/protobuf/timestamp.proto";

// Service Registration Request
message ServiceRegistrationRequest {
  string name = 1;
  string host = 2;
  int32 port = 3;
  string protocol = 4;  // http, grpc, ws
  string health_endpoint = 5;
  string version = 6;
  map<string, string> metadata = 7;
  repeated string capabilities = 8;
  string tenant_id = 9;
}

// Service Registration Response
message ServiceRegistrationResponse {
  bool success = 1;
  string message = 2;
  string service_id = 3;
  google.protobuf.Timestamp registered_at = 4;
  string registration_url = 5;
}

// Service Info
message ServiceInfo {
  string service_id = 1;
  string name = 2;
  string host = 3;
  int32 port = 4;
  string protocol = 5;
  string health_endpoint = 6;
  string version = 7;
  map<string, string> metadata = 8;
  ServiceStatus status = 9;
  google.protobuf.Timestamp registered_at = 10;
  google.protobuf.Timestamp last_seen = 11;
  repeated string capabilities = 12;
  string tenant_id = 13;
  HealthInfo health = 14;
}

// Service Status
enum ServiceStatus {
  UNKNOWN = 0;
  HEALTHY = 1;
  UNHEALTHY = 2;
  DEGRADED = 3;
  STARTING = 4;
  STOPPING = 5;
}

// Health Information
message HealthInfo {
  ServiceStatus status = 1;
  int64 response_time_ms = 2;
  google.protobuf.Timestamp last_check = 3;
  repeated string issues = 4;
  map<string, string> metrics = 5;
}

// Service Discovery Request
message ServiceDiscoveryRequest {
  string service_name = 1;
  string tenant_id = 2;
  string region = 3;
  repeated string required_capabilities = 4;
  LoadBalanceStrategy strategy = 5;
}

// Load Balance Strategy
enum LoadBalanceStrategy {
  ROUND_ROBIN = 0;
  LEAST_CONNECTIONS = 1;
  WEIGHTED_RESPONSE_TIME = 2;
  HEALTH_BASED = 3;
  RANDOM = 4;
}

// Service Discovery Response
message ServiceDiscoveryResponse {
  bool success = 1;
  string message = 2;
  ServiceInfo recommended_service = 3;
  repeated ServiceInfo all_healthy_services = 4;
  float confidence = 5;
  string selection_reason = 6;
}

// Service List Request
message ServiceListRequest {
  string filter_by_name = 1;
  ServiceStatus filter_by_status = 2;
  string filter_by_tenant = 3;
  bool include_health = 4;
}

// Service List Response
message ServiceListResponse {
  bool success = 1;
  repeated ServiceInfo services = 2;
  int32 total_count = 3;
  google.protobuf.Timestamp snapshot_time = 4;
}

// Health Check Request
message HealthCheckRequest {
  string service_id = 1;
  bool deep_check = 2;
}

// Health Check Response
message HealthCheckResponse {
  bool success = 1;
  HealthInfo health = 2;
  string message = 3;
}

// Service Discovery gRPC Service
service ServiceDiscoveryService {
  // Register a new service
  rpc RegisterService(ServiceRegistrationRequest) returns (ServiceRegistrationResponse);

  // Discover services
  rpc DiscoverService(ServiceDiscoveryRequest) returns (ServiceDiscoveryResponse);

  // List all services
  rpc ListServices(ServiceListRequest) returns (ServiceListResponse);

  // Get specific service info
  rpc GetService(ServiceDiscoveryRequest) returns (ServiceInfo);

  // Update service metadata
  rpc UpdateService(ServiceInfo) returns (ServiceRegistrationResponse);

  // Unregister service
  rpc UnregisterService(ServiceDiscoveryRequest) returns (ServiceRegistrationResponse);

  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}