syntax = "proto3";

package central_hub.config;

import "google/protobuf/timestamp.proto";

// Configuration Request
message ConfigurationRequest {
  string service_name = 1;
  string environment = 2;  // development, staging, production
  string tenant_id = 3;
  repeated string config_keys = 4;  // specific keys to retrieve
}

// Configuration Response
message ConfigurationResponse {
  bool success = 1;
  map<string, ConfigValue> configurations = 2;
  google.protobuf.Timestamp last_updated = 3;
  string version = 4;
}

// Configuration Value
message ConfigValue {
  string key = 1;
  oneof value {
    string string_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    bool bool_value = 5;
    ConfigObject object_value = 6;
    ConfigArray array_value = 7;
  }
  string type = 8;
  bool sensitive = 9;  // indicates if value is encrypted/sensitive
  google.protobuf.Timestamp last_updated = 10;
}

// Configuration Object
message ConfigObject {
  map<string, ConfigValue> fields = 1;
}

// Configuration Array
message ConfigArray {
  repeated ConfigValue items = 1;
}

// Database Configuration
message DatabaseConfig {
  string postgresql_url = 1;
  string clickhouse_url = 2;
  string dragonflydb_url = 3;
  string arangodb_url = 4;
  ConnectionPoolConfig connection_pool = 5;
}

// Connection Pool Configuration
message ConnectionPoolConfig {
  int32 max_connections = 1;
  int32 min_connections = 2;
  int64 connection_timeout_ms = 3;
  int64 idle_timeout_ms = 4;
  int64 max_lifetime_ms = 5;
}

// Messaging Configuration
message MessagingConfig {
  string nats_url = 1;
  string kafka_brokers = 2;
  JetStreamConfig jetstream = 3;
  KafkaConfig kafka = 4;
}

// JetStream Configuration
message JetStreamConfig {
  string domain = 1;
  int64 max_memory = 2;
  int64 max_storage = 3;
  repeated StreamConfig streams = 4;
}

// Stream Configuration
message StreamConfig {
  string name = 1;
  repeated string subjects = 2;
  RetentionPolicy retention = 3;
  int64 max_msgs = 4;
  int64 max_bytes = 5;
  int64 max_age_seconds = 6;
}

// Retention Policy
enum RetentionPolicy {
  LIMITS = 0;
  INTEREST = 1;
  WORK_QUEUE = 2;
}

// Kafka Configuration
message KafkaConfig {
  repeated string brokers = 1;
  string security_protocol = 2;
  string sasl_mechanism = 3;
  map<string, string> producer_config = 4;
  map<string, string> consumer_config = 5;
}

// AI Services Configuration
message AIConfig {
  string weaviate_url = 1;
  string openai_api_key = 2;
  string anthropic_api_key = 3;
  VectorDBConfig vector_db = 4;
  MLModelConfig ml_models = 5;
}

// Vector Database Configuration
message VectorDBConfig {
  string provider = 1;  // weaviate, pinecone, etc.
  string endpoint = 2;
  string api_key = 3;
  map<string, IndexConfig> indexes = 4;
}

// Index Configuration
message IndexConfig {
  string name = 1;
  int32 dimensions = 2;
  string metric = 3;  // cosine, euclidean, etc.
  map<string, string> metadata = 4;
}

// ML Model Configuration
message MLModelConfig {
  map<string, ModelEndpoint> models = 1;
}

// Model Endpoint
message ModelEndpoint {
  string name = 1;
  string endpoint = 2;
  string api_key = 3;
  string version = 4;
  map<string, string> parameters = 5;
}

// Security Configuration
message SecurityConfig {
  JWTConfig jwt = 1;
  EncryptionConfig encryption = 2;
  RateLimitConfig rate_limiting = 3;
  CORSConfig cors = 4;
}

// JWT Configuration
message JWTConfig {
  string secret = 1;
  string issuer = 2;
  string audience = 3;
  int64 expires_in_seconds = 4;
  string algorithm = 5;
}

// Encryption Configuration
message EncryptionConfig {
  string algorithm = 1;
  string key_size = 2;
  string key_derivation = 3;
  map<string, string> key_rotation = 4;
}

// Rate Limiting Configuration
message RateLimitConfig {
  map<string, RateLimit> limits = 1;
}

// Rate Limit
message RateLimit {
  int32 requests = 1;
  int64 window_seconds = 2;
  string burst_size = 3;
}

// CORS Configuration
message CORSConfig {
  repeated string allowed_origins = 1;
  repeated string allowed_methods = 2;
  repeated string allowed_headers = 3;
  bool allow_credentials = 4;
  int64 max_age_seconds = 5;
}

// Configuration Service
service ConfigurationService {
  // Get configuration for a service
  rpc GetConfiguration(ConfigurationRequest) returns (ConfigurationResponse);

  // Get database configuration
  rpc GetDatabaseConfig(ConfigurationRequest) returns (DatabaseConfig);

  // Get messaging configuration
  rpc GetMessagingConfig(ConfigurationRequest) returns (MessagingConfig);

  // Get AI services configuration
  rpc GetAIConfig(ConfigurationRequest) returns (AIConfig);

  // Get security configuration
  rpc GetSecurityConfig(ConfigurationRequest) returns (SecurityConfig);
}