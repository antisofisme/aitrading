syntax = "proto3";

package services.v1;

import "common/base.proto";
import "business/notifications.proto";

option go_package = "github.com/aitrading/proto/services/v1";
option java_package = "com.aitrading.proto.services.v1";
option csharp_namespace = "AiTrading.Proto.Services.V1";

// Notification Service - Category B: Medium Volume + Important
// Transport: gRPC with Protocol Buffers
// Performance target: <50ms response time
// Connection pooling + circuit breaker
service NotificationService {
  // Core notification operations
  rpc SendNotification(business.v1.SendNotificationRequest) returns (business.v1.SendNotificationResponse);
  rpc GetNotifications(business.v1.GetNotificationsRequest) returns (business.v1.GetNotificationsResponse);
  rpc MarkNotificationRead(business.v1.MarkNotificationReadRequest) returns (business.v1.MarkNotificationReadResponse);
  rpc MarkAllRead(business.v1.MarkAllReadRequest) returns (business.v1.MarkAllReadResponse);
  rpc DeleteNotification(business.v1.DeleteNotificationRequest) returns (business.v1.DeleteNotificationResponse);

  // Bulk notification operations
  rpc SendBulkNotification(business.v1.BulkNotificationRequest) returns (business.v1.BulkNotificationResponse);
  rpc DeleteBulkNotifications(DeleteBulkNotificationsRequest) returns (DeleteBulkNotificationsResponse);
  rpc MarkBulkRead(MarkBulkReadRequest) returns (MarkBulkReadResponse);

  // Alert management
  rpc CreatePriceAlert(business.v1.CreatePriceAlertRequest) returns (business.v1.CreatePriceAlertResponse);
  rpc CreateAISignalAlert(CreateAISignalAlertRequest) returns (CreateAISignalAlertResponse);
  rpc CreateRiskAlert(CreateRiskAlertRequest) returns (CreateRiskAlertResponse);
  rpc ListAlerts(business.v1.ListAlertsRequest) returns (business.v1.ListAlertsResponse);
  rpc UpdateAlert(business.v1.UpdateAlertRequest) returns (business.v1.UpdateAlertResponse);
  rpc DeleteAlert(business.v1.DeleteAlertRequest) returns (business.v1.DeleteAlertResponse);
  rpc ToggleAlert(ToggleAlertRequest) returns (ToggleAlertResponse);

  // Notification preferences
  rpc GetNotificationPreferences(business.v1.GetNotificationPreferencesRequest) returns (business.v1.GetNotificationPreferencesResponse);
  rpc UpdateNotificationPreferences(business.v1.UpdateNotificationPreferencesRequest) returns (business.v1.UpdateNotificationPreferencesResponse);
  rpc TestNotification(business.v1.TestNotificationRequest) returns (business.v1.TestNotificationResponse);

  // Real-time notification streaming
  rpc StreamNotifications(StreamNotificationsRequest) returns (stream business.v1.NotificationStream);
  rpc StreamAlerts(StreamAlertsRequest) returns (stream AlertStream);

  // Notification templates and campaigns
  rpc CreateNotificationTemplate(CreateNotificationTemplateRequest) returns (CreateNotificationTemplateResponse);
  rpc UpdateNotificationTemplate(UpdateNotificationTemplateRequest) returns (UpdateNotificationTemplateResponse);
  rpc ListNotificationTemplates(ListNotificationTemplatesRequest) returns (ListNotificationTemplatesResponse);
  rpc DeleteNotificationTemplate(DeleteNotificationTemplateRequest) returns (DeleteNotificationTemplateResponse);

  // Notification campaigns (for system-wide announcements)
  rpc CreateCampaign(CreateCampaignRequest) returns (CreateCampaignResponse);
  rpc LaunchCampaign(LaunchCampaignRequest) returns (LaunchCampaignResponse);
  rpc GetCampaignStatus(GetCampaignStatusRequest) returns (GetCampaignStatusResponse);
  rpc PauseCampaign(PauseCampaignRequest) returns (PauseCampaignResponse);

  // Analytics and reporting
  rpc GetNotificationAnalytics(GetNotificationAnalyticsRequest) returns (GetNotificationAnalyticsResponse);
  rpc GetDeliveryReport(GetDeliveryReportRequest) returns (GetDeliveryReportResponse);
  rpc GetEngagementMetrics(GetEngagementMetricsRequest) returns (GetEngagementMetricsResponse);

  // Admin and maintenance
  rpc PurgeOldNotifications(PurgeOldNotificationsRequest) returns (PurgeOldNotificationsResponse);
  rpc GetSystemNotificationStats(GetSystemNotificationStatsRequest) returns (GetSystemNotificationStatsResponse);
  rpc UpdateDeliveryStatus(UpdateDeliveryStatusRequest) returns (UpdateDeliveryStatusResponse);

  // Channel management
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse);
  rpc UnregisterDevice(UnregisterDeviceRequest) returns (UnregisterDeviceResponse);
  rpc UpdateDeviceToken(UpdateDeviceTokenRequest) returns (UpdateDeviceTokenResponse);
  rpc VerifyChannel(VerifyChannelRequest) returns (VerifyChannelResponse);
}

// AI Signal Alert operations
message CreateAISignalAlertRequest {
  common.v1.BaseMessage base = 1;
  business.v1.AISignalAlert alert = 2;
}

message CreateAISignalAlertResponse {
  common.v1.Response response = 1;
  business.v1.AISignalAlert alert = 2;
}

// Risk Alert operations
message CreateRiskAlertRequest {
  common.v1.BaseMessage base = 1;
  business.v1.RiskAlert alert = 2;
}

message CreateRiskAlertResponse {
  common.v1.Response response = 1;
  business.v1.RiskAlert alert = 2;
}

// Alert toggle (enable/disable)
message ToggleAlertRequest {
  common.v1.BaseMessage base = 1;
  string alert_id = 2;
  string alert_type = 3;              // "price", "ai_signal", "risk"
  bool is_active = 4;
}

message ToggleAlertResponse {
  common.v1.Response response = 1;
  bool updated = 2;
  bool new_status = 3;
}

// Bulk notification operations
message DeleteBulkNotificationsRequest {
  common.v1.BaseMessage base = 1;
  repeated string notification_ids = 2;
  string user_id = 3;                 // Optional: delete all for user
  business.v1.NotificationType type = 4; // Optional: delete all of type
  common.v1.Timestamp older_than = 5; // Optional: delete older than date
}

message DeleteBulkNotificationsResponse {
  common.v1.Response response = 1;
  int32 deleted_count = 2;
  repeated string failed_ids = 3;
}

message MarkBulkReadRequest {
  common.v1.BaseMessage base = 1;
  repeated string notification_ids = 2;
  string user_id = 3;                 // Optional: mark all for user
  business.v1.NotificationType type = 4; // Optional: mark all of type
}

message MarkBulkReadResponse {
  common.v1.Response response = 1;
  int32 marked_count = 2;
  repeated string failed_ids = 3;
}

// Streaming requests
message StreamNotificationsRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;
  repeated business.v1.NotificationType types = 3; // Optional filter
  bool include_read = 4;
}

message StreamAlertsRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;
  repeated string alert_types = 3;    // "price", "ai_signal", "risk"
  bool active_only = 4;
}

message AlertStream {
  repeated AlertTriggered triggered_alerts = 1;
  repeated AlertStatusUpdate status_updates = 2;
  common.v1.Timestamp stream_timestamp = 3;
}

message AlertTriggered {
  string alert_id = 1;
  string alert_type = 2;
  string trigger_reason = 3;
  map<string, string> trigger_data = 4; // Alert-specific trigger data
  common.v1.Timestamp triggered_at = 5;
  business.v1.Notification notification = 6; // Generated notification
}

message AlertStatusUpdate {
  string alert_id = 1;
  string alert_type = 2;
  string old_status = 3;
  string new_status = 4;
  common.v1.Timestamp updated_at = 5;
}

// Notification templates
message CreateNotificationTemplateRequest {
  common.v1.BaseMessage base = 1;
  NotificationTemplate template = 2;
}

message CreateNotificationTemplateResponse {
  common.v1.Response response = 1;
  NotificationTemplate template = 2;
}

message UpdateNotificationTemplateRequest {
  common.v1.BaseMessage base = 1;
  string template_id = 2;
  NotificationTemplate template = 3;
  repeated string update_mask = 4;
}

message UpdateNotificationTemplateResponse {
  common.v1.Response response = 1;
  NotificationTemplate updated_template = 2;
}

message ListNotificationTemplatesRequest {
  common.v1.BaseMessage base = 1;
  business.v1.NotificationType type = 2; // Optional filter
  bool active_only = 3;
  common.v1.Pagination pagination = 4;
}

message ListNotificationTemplatesResponse {
  common.v1.Response response = 1;
  repeated NotificationTemplate templates = 2;
  common.v1.Pagination pagination = 3;
}

message DeleteNotificationTemplateRequest {
  common.v1.BaseMessage base = 1;
  string template_id = 2;
}

message DeleteNotificationTemplateResponse {
  common.v1.Response response = 1;
  bool deleted = 2;
}

message NotificationTemplate {
  string template_id = 1;
  string name = 2;
  string description = 3;
  business.v1.NotificationType type = 4;
  string title_template = 5;           // Template with variables like {{symbol}}
  string message_template = 6;
  string detailed_message_template = 7;
  repeated business.v1.DeliveryChannel default_channels = 8;
  business.v1.NotificationPriority default_priority = 9;
  repeated string required_variables = 10; // Variables that must be provided
  map<string, string> default_variables = 11; // Default variable values
  bool is_system_template = 12;        // System-managed template
  bool is_active = 13;
  common.v1.Timestamp created_at = 14;
  common.v1.Timestamp updated_at = 15;
  string created_by = 16;
}

// Notification campaigns
message CreateCampaignRequest {
  common.v1.BaseMessage base = 1;
  NotificationCampaign campaign = 2;
}

message CreateCampaignResponse {
  common.v1.Response response = 1;
  NotificationCampaign campaign = 2;
}

message LaunchCampaignRequest {
  common.v1.BaseMessage base = 1;
  string campaign_id = 2;
  common.v1.Timestamp scheduled_time = 3; // Optional: schedule for later
}

message LaunchCampaignResponse {
  common.v1.Response response = 1;
  string launch_id = 2;
  int32 target_recipients = 3;
  common.v1.Timestamp launched_at = 4;
}

message GetCampaignStatusRequest {
  common.v1.BaseMessage base = 1;
  string campaign_id = 2;
}

message GetCampaignStatusResponse {
  common.v1.Response response = 1;
  NotificationCampaign campaign = 2;
  CampaignStats stats = 3;
}

message PauseCampaignRequest {
  common.v1.BaseMessage base = 1;
  string campaign_id = 2;
  string pause_reason = 3;
}

message PauseCampaignResponse {
  common.v1.Response response = 1;
  bool paused = 2;
}

message NotificationCampaign {
  string campaign_id = 1;
  string name = 2;
  string description = 3;
  string template_id = 4;              // Notification template to use
  CampaignTargeting targeting = 5;
  CampaignScheduling scheduling = 6;
  string status = 7;                   // "draft", "scheduled", "running", "completed", "paused"
  map<string, string> variables = 8;   // Template variable values
  common.v1.Timestamp created_at = 9;
  common.v1.Timestamp updated_at = 10;
  string created_by = 11;
}

message CampaignTargeting {
  repeated string tenant_ids = 1;      // Target specific tenants
  repeated string user_ids = 2;        // Target specific users
  repeated business.v1.UserRole roles = 3; // Target users with specific roles
  repeated business.v1.SubscriptionTier tiers = 4; // Target subscription tiers
  string user_filter = 5;              // Advanced user filter (JSON query)
  bool all_users = 6;                  // Target all users (system-wide)
}

message CampaignScheduling {
  common.v1.Timestamp start_time = 1;
  common.v1.Timestamp end_time = 2;    // Optional
  string frequency = 3;                // "once", "daily", "weekly"
  repeated string send_days = 4;       // Days of week for recurring
  string send_time = 5;                // Time of day (HH:MM)
  string timezone = 6;                 // Timezone for scheduling
}

message CampaignStats {
  int32 total_recipients = 1;
  int32 sent_count = 2;
  int32 delivered_count = 3;
  int32 read_count = 4;
  int32 failed_count = 5;
  double delivery_rate = 6;            // delivered / sent
  double read_rate = 7;                // read / delivered
  common.v1.Timestamp last_sent = 8;
  map<string, int32> channel_breakdown = 9; // channel -> count
}

// Analytics and reporting
message GetNotificationAnalyticsRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;                  // Optional: for specific user
  string tenant_id = 3;                // Optional: for specific tenant
  common.v1.Timestamp from = 4;
  common.v1.Timestamp to = 5;
  repeated business.v1.NotificationType types = 6; // Optional filter
}

message GetNotificationAnalyticsResponse {
  common.v1.Response response = 1;
  NotificationAnalytics analytics = 2;
}

message NotificationAnalytics {
  int32 total_notifications = 1;
  int32 total_sent = 2;
  int32 total_delivered = 3;
  int32 total_read = 4;
  int32 total_failed = 5;
  double delivery_rate = 6;
  double read_rate = 7;
  double failure_rate = 8;
  map<string, int32> notifications_by_type = 9;   // type -> count
  map<string, int32> notifications_by_channel = 10; // channel -> count
  map<string, double> delivery_rate_by_channel = 11; // channel -> rate
  repeated NotificationTrend trends = 12;
}

message NotificationTrend {
  string date = 1;                     // YYYY-MM-DD
  int32 sent_count = 2;
  int32 delivered_count = 3;
  int32 read_count = 4;
  double delivery_rate = 5;
  double read_rate = 6;
}

message GetDeliveryReportRequest {
  common.v1.BaseMessage base = 1;
  string notification_id = 2;          // For specific notification
  string campaign_id = 3;              // For campaign
  common.v1.Timestamp from = 4;       // For time range
  common.v1.Timestamp to = 5;
}

message GetDeliveryReportResponse {
  common.v1.Response response = 1;
  repeated DeliveryResult delivery_results = 2;
  DeliverySummary summary = 3;
}

message DeliveryResult {
  string notification_id = 1;
  string user_id = 2;
  business.v1.DeliveryChannel channel = 3;
  string status = 4;                   // "pending", "sent", "delivered", "failed"
  string error_message = 5;            // If failed
  common.v1.Timestamp sent_at = 6;
  common.v1.Timestamp delivered_at = 7;
  common.v1.Timestamp read_at = 8;
  string external_id = 9;              // External service message ID
}

message DeliverySummary {
  int32 total_attempts = 1;
  int32 successful_deliveries = 2;
  int32 failed_deliveries = 3;
  int32 pending_deliveries = 4;
  map<string, int32> failures_by_reason = 5; // reason -> count
  double success_rate = 6;
}

message GetEngagementMetricsRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;                  // Optional filter
  common.v1.Timestamp from = 3;
  common.v1.Timestamp to = 4;
  repeated business.v1.NotificationType types = 5;
}

message GetEngagementMetricsResponse {
  common.v1.Response response = 1;
  EngagementMetrics metrics = 2;
}

message EngagementMetrics {
  double overall_read_rate = 1;
  double click_through_rate = 2;       // For actionable notifications
  map<string, double> read_rate_by_type = 3;    // type -> rate
  map<string, double> read_rate_by_channel = 4; // channel -> rate
  UserEngagementProfile user_profile = 5;
  repeated EngagementTrend trends = 6;
}

message UserEngagementProfile {
  string preferred_channel = 1;
  string preferred_time = 2;           // Hour of day (0-23)
  repeated string engaged_types = 3;   // Notification types user engages with
  double engagement_score = 4;         // 0-1, overall engagement
}

message EngagementTrend {
  string period = 1;                   // "2024-01-01" or "2024-01"
  double read_rate = 2;
  double click_rate = 3;
  int32 total_notifications = 4;
}

// Admin and maintenance
message PurgeOldNotificationsRequest {
  common.v1.BaseMessage base = 1;
  common.v1.Timestamp older_than = 2;
  repeated business.v1.NotificationType types = 3; // Optional: purge specific types
  bool dry_run = 4;                    // Just count, don't delete
}

message PurgeOldNotificationsResponse {
  common.v1.Response response = 1;
  int32 purged_count = 2;
  int64 space_freed_bytes = 3;
}

message GetSystemNotificationStatsRequest {
  common.v1.BaseMessage base = 1;
  common.v1.Timestamp from = 2;
  common.v1.Timestamp to = 3;
}

message GetSystemNotificationStatsResponse {
  common.v1.Response response = 1;
  SystemNotificationStats stats = 2;
}

message SystemNotificationStats {
  int64 total_notifications = 1;
  int64 total_users = 2;
  int64 active_alerts = 3;
  double average_delivery_time_ms = 4;
  map<string, int64> notifications_by_service = 5; // service -> count
  map<string, double> delivery_rates_by_channel = 6; // channel -> rate
  SystemHealth health = 7;
}

message SystemHealth {
  string status = 1;                   // "healthy", "degraded", "critical"
  double delivery_success_rate = 2;
  double average_processing_time_ms = 3;
  int32 queue_depth = 4;              // Pending notifications
  repeated string alerts = 5;         // System alerts
}

message UpdateDeliveryStatusRequest {
  common.v1.BaseMessage base = 1;
  string notification_id = 2;
  business.v1.DeliveryChannel channel = 3;
  string new_status = 4;               // "delivered", "failed", "read"
  string external_id = 5;              // External service ID
  string error_message = 6;            // If failed
  common.v1.Timestamp timestamp = 7;  // When status changed
}

message UpdateDeliveryStatusResponse {
  common.v1.Response response = 1;
  bool updated = 2;
}

// Device and channel management
message RegisterDeviceRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;
  string device_token = 3;             // Push notification token
  string device_type = 4;              // "ios", "android", "web"
  string device_id = 5;                // Unique device identifier
  map<string, string> device_metadata = 6;
}

message RegisterDeviceResponse {
  common.v1.Response response = 1;
  string registration_id = 2;
  bool registered = 3;
}

message UnregisterDeviceRequest {
  common.v1.BaseMessage base = 1;
  string registration_id = 2;
  string device_token = 3;             // Alternative identifier
}

message UnregisterDeviceResponse {
  common.v1.Response response = 1;
  bool unregistered = 2;
}

message UpdateDeviceTokenRequest {
  common.v1.BaseMessage base = 1;
  string registration_id = 2;
  string new_device_token = 3;
}

message UpdateDeviceTokenResponse {
  common.v1.Response response = 1;
  bool updated = 2;
}

message VerifyChannelRequest {
  common.v1.BaseMessage base = 1;
  string user_id = 2;
  business.v1.DeliveryChannel channel = 3;
  string channel_address = 4;          // Email, phone, etc.
  string verification_code = 5;        // If verifying
}

message VerifyChannelResponse {
  common.v1.Response response = 1;
  bool verified = 2;
  string verification_token = 3;       // If verification needed
}