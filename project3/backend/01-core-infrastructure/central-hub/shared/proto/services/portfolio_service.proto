syntax = "proto3";

package services.v1;

import "common/base.proto";
import "business/portfolio.proto";
import "trading/orders.proto";

option go_package = "github.com/aitrading/proto/services/v1";
option java_package = "com.aitrading.proto.services.v1";
option csharp_namespace = "AiTrading.Proto.Services.V1";

// Portfolio Management Service - Category B: Medium Volume + Important
// Transport: gRPC with Protocol Buffers
// Performance target: <50ms response time
// Connection pooling + circuit breaker
service PortfolioService {
  // Portfolio operations
  rpc GetPortfolio(business.v1.GetPortfolioRequest) returns (business.v1.GetPortfolioResponse);
  rpc ListPortfolios(business.v1.ListPortfoliosRequest) returns (business.v1.ListPortfoliosResponse);
  rpc CreatePortfolio(CreatePortfolioRequest) returns (CreatePortfolioResponse);
  rpc UpdatePortfolio(UpdatePortfolioRequest) returns (UpdatePortfolioResponse);
  rpc DeletePortfolio(DeletePortfolioRequest) returns (DeletePortfolioResponse);

  // Position management
  rpc GetPosition(business.v1.GetPositionRequest) returns (business.v1.GetPositionResponse);
  rpc ListPositions(business.v1.ListPositionsRequest) returns (business.v1.ListPositionsResponse);
  rpc ClosePosition(business.v1.ClosePositionRequest) returns (business.v1.ClosePositionResponse);
  rpc UpdatePosition(business.v1.UpdatePositionRequest) returns (business.v1.UpdatePositionResponse);
  rpc GetPositionHistory(GetPositionHistoryRequest) returns (GetPositionHistoryResponse);

  // Portfolio analytics and performance
  rpc GetBalanceHistory(business.v1.GetBalanceHistoryRequest) returns (business.v1.GetBalanceHistoryResponse);
  rpc AnalyzePerformance(business.v1.AnalyzePerformanceRequest) returns (business.v1.AnalyzePerformanceResponse);
  rpc CalculateMetrics(CalculateMetricsRequest) returns (CalculateMetricsResponse);
  rpc GetPerformanceSummary(GetPerformanceSummaryRequest) returns (GetPerformanceSummaryResponse);

  // Risk management
  rpc AssessRisk(business.v1.AssessRiskRequest) returns (business.v1.AssessRiskResponse);
  rpc CalculateVaR(CalculateVaRRequest) returns (CalculateVaRResponse);
  rpc GetRiskMetrics(GetRiskMetricsRequest) returns (GetRiskMetricsResponse);
  rpc UpdateRiskLimits(UpdateRiskLimitsRequest) returns (UpdateRiskLimitsResponse);
  rpc CheckRiskLimits(CheckRiskLimitsRequest) returns (CheckRiskLimitsResponse);

  // Portfolio comparison and benchmarking
  rpc ComparePortfolios(ComparePortfoliosRequest) returns (ComparePortfoliosResponse);
  rpc BenchmarkPortfolio(BenchmarkPortfolioRequest) returns (BenchmarkPortfolioResponse);

  // Real-time portfolio updates (streaming)
  rpc StreamPortfolioUpdates(StreamPortfolioRequest) returns (stream business.v1.PortfolioUpdateStream);
  rpc StreamPositionUpdates(StreamPositionRequest) returns (stream PositionUpdateStream);

  // Portfolio rebalancing
  rpc SuggestRebalance(SuggestRebalanceRequest) returns (SuggestRebalanceResponse);
  rpc ExecuteRebalance(ExecuteRebalanceRequest) returns (ExecuteRebalanceResponse);

  // Portfolio simulation and optimization
  rpc SimulatePortfolio(SimulatePortfolioRequest) returns (SimulatePortfolioResponse);
  rpc OptimizeAllocation(OptimizeAllocationRequest) returns (OptimizeAllocationResponse);

  // Export and reporting
  rpc ExportPortfolio(ExportPortfolioRequest) returns (ExportPortfolioResponse);
  rpc GenerateReport(GenerateReportRequest) returns (GenerateReportResponse);

  // Portfolio copying/cloning
  rpc ClonePortfolio(ClonePortfolioRequest) returns (ClonePortfolioResponse);
  rpc CopyPortfolio(CopyPortfolioRequest) returns (CopyPortfolioResponse);
}

// Additional message types for portfolio service

// Create portfolio
message CreatePortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_name = 2;
  business.v1.PortfolioType portfolio_type = 3;
  string base_currency = 4;
  common.v1.Money initial_balance = 5;
  string description = 6;
  map<string, string> metadata = 7;
}

message CreatePortfolioResponse {
  common.v1.Response response = 1;
  business.v1.Portfolio portfolio = 2;
}

// Update portfolio
message UpdatePortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  string portfolio_name = 3;
  string description = 4;
  repeated string update_mask = 5;
  map<string, string> metadata = 6;
}

message UpdatePortfolioResponse {
  common.v1.Response response = 1;
  business.v1.Portfolio updated_portfolio = 2;
}

// Delete portfolio
message DeletePortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  bool force_close_positions = 3;       // Close all positions before deletion
  string deletion_reason = 4;
}

message DeletePortfolioResponse {
  common.v1.Response response = 1;
  bool deleted = 2;
  repeated string closed_position_ids = 3;
}

// Position history
message GetPositionHistoryRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  string symbol = 3;                    // Optional filter
  common.v1.Timestamp from = 4;
  common.v1.Timestamp to = 5;
  business.v1.PositionStatus status = 6; // Optional filter
  common.v1.Pagination pagination = 7;
}

message GetPositionHistoryResponse {
  common.v1.Response response = 1;
  repeated business.v1.Position positions = 2;
  common.v1.Pagination pagination = 3;
}

// Portfolio metrics calculation
message CalculateMetricsRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  common.v1.Timestamp period_start = 3;
  common.v1.Timestamp period_end = 4;
  string benchmark_symbol = 5;          // Optional benchmark
}

message CalculateMetricsResponse {
  common.v1.Response response = 1;
  business.v1.PortfolioMetrics metrics = 2;
  business.v1.BenchmarkComparison benchmark = 3;
}

// Performance summary
message GetPerformanceSummaryRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated string timeframes = 3;       // "1d", "1w", "1m", "3m", "1y"
}

message GetPerformanceSummaryResponse {
  common.v1.Response response = 1;
  map<string, PerformancePeriod> performance_by_period = 2;
}

message PerformancePeriod {
  string timeframe = 1;
  double return_percentage = 2;
  common.v1.Money pnl = 3;
  double volatility = 4;
  double sharpe_ratio = 5;
  double max_drawdown = 6;
}

// VaR calculation
message CalculateVaRRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  double confidence_level = 3;          // 0.95 for 95% VaR
  int32 holding_period_days = 4;        // Usually 1 day
  int32 lookback_days = 5;              // Historical period
  string method = 6;                    // "historical", "parametric", "monte_carlo"
}

message CalculateVaRResponse {
  common.v1.Response response = 1;
  double var_value = 2;                 // VaR in base currency
  double var_percentage = 3;            // VaR as % of portfolio
  double expected_shortfall = 4;        // Conditional VaR
  string calculation_method = 5;
  common.v1.Timestamp calculated_at = 6;
}

// Risk metrics
message GetRiskMetricsRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  bool include_stress_tests = 3;
  bool include_correlations = 4;
}

message GetRiskMetricsResponse {
  common.v1.Response response = 1;
  business.v1.RiskMetrics risk_metrics = 2;
}

// Risk limits management
message UpdateRiskLimitsRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  RiskLimits risk_limits = 3;
}

message UpdateRiskLimitsResponse {
  common.v1.Response response = 1;
  RiskLimits updated_limits = 2;
}

message RiskLimits {
  double max_portfolio_var = 1;         // Maximum VaR as % of portfolio
  double max_position_size = 2;         // Maximum position size as % of portfolio
  double max_leverage = 3;              // Maximum leverage ratio
  double max_correlation = 4;           // Maximum correlation between positions
  double max_drawdown = 5;              // Maximum allowed drawdown %
  map<string, double> symbol_limits = 6; // Per-symbol position limits
  map<string, double> sector_limits = 7; // Per-sector exposure limits
}

message CheckRiskLimitsRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  trading.v1.Order proposed_order = 3;   // Check if order would breach limits
}

message CheckRiskLimitsResponse {
  common.v1.Response response = 1;
  bool within_limits = 2;
  repeated string violations = 3;
  repeated string warnings = 4;
  business.v1.RiskMetrics projected_metrics = 5; // Metrics after order
}

// Portfolio comparison
message ComparePortfoliosRequest {
  common.v1.BaseMessage base = 1;
  repeated string portfolio_ids = 2;
  common.v1.Timestamp period_start = 3;
  common.v1.Timestamp period_end = 4;
}

message ComparePortfoliosResponse {
  common.v1.Response response = 1;
  repeated PortfolioComparison comparisons = 2;
}

message PortfolioComparison {
  string portfolio_id = 1;
  string portfolio_name = 2;
  business.v1.PortfolioMetrics metrics = 3;
  double correlation_with_others = 4;
  int32 ranking = 5;                    // 1 = best performer
}

// Benchmarking
message BenchmarkPortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated string benchmark_symbols = 3; // Multiple benchmarks
  common.v1.Timestamp period_start = 4;
  common.v1.Timestamp period_end = 5;
}

message BenchmarkPortfolioResponse {
  common.v1.Response response = 1;
  business.v1.PortfolioMetrics portfolio_metrics = 2;
  repeated BenchmarkResult benchmarks = 3;
}

message BenchmarkResult {
  string benchmark_symbol = 1;
  string benchmark_name = 2;
  business.v1.BenchmarkComparison comparison = 3;
  bool outperformed = 4;
}

// Streaming requests
message StreamPortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated string update_types = 3;      // "balance", "positions", "metrics"
}

message StreamPositionRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated string symbols = 3;          // Optional symbol filter
}

message PositionUpdateStream {
  string portfolio_id = 1;
  repeated business.v1.Position position_updates = 2;
  common.v1.Timestamp stream_timestamp = 3;
  string update_type = 4;               // "price_change", "quantity_change", etc
}

// Rebalancing
message SuggestRebalanceRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  string strategy = 3;                  // "equal_weight", "risk_parity", "momentum"
  map<string, double> target_weights = 4; // Optional target allocation
  double max_trade_size = 5;            // Maximum trade as % of portfolio
}

message SuggestRebalanceResponse {
  common.v1.Response response = 1;
  repeated RebalanceTrade suggested_trades = 2;
  double total_turnover = 3;            // Total turnover as % of portfolio
  common.v1.Money estimated_costs = 4;  // Trading costs
  business.v1.PortfolioMetrics projected_metrics = 5;
}

message RebalanceTrade {
  string symbol = 1;
  double current_weight = 2;
  double target_weight = 3;
  double quantity_change = 4;
  common.v1.Money value_change = 5;
  trading.v1.OrderSide side = 6;
  string reason = 7;
}

message ExecuteRebalanceRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated RebalanceTrade trades = 3;
  bool dry_run = 4;
}

message ExecuteRebalanceResponse {
  common.v1.Response response = 1;
  repeated trading.v1.Order executed_orders = 2;
  int32 successful_trades = 3;
  int32 failed_trades = 4;
  repeated string error_messages = 5;
}

// Portfolio simulation
message SimulatePortfolioRequest {
  common.v1.BaseMessage base = 1;
  repeated PortfolioWeight weights = 2;
  common.v1.Timestamp backtest_start = 3;
  common.v1.Timestamp backtest_end = 4;
  common.v1.Money initial_capital = 5;
  string rebalance_frequency = 6;       // "daily", "weekly", "monthly"
}

message PortfolioWeight {
  string symbol = 1;
  double weight = 2;                    // 0.0 to 1.0
}

message SimulatePortfolioResponse {
  common.v1.Response response = 1;
  business.v1.PortfolioMetrics simulated_metrics = 2;
  repeated business.v1.BalanceHistory balance_history = 3;
  repeated business.v1.TradeAnalysis trade_analysis = 4;
}

// Allocation optimization
message OptimizeAllocationRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  repeated string symbols = 3;
  string objective = 4;                 // "max_return", "min_risk", "max_sharpe"
  repeated OptimizationConstraint constraints = 5;
  int32 lookback_days = 6;
}

message OptimizationConstraint {
  string type = 1;                      // "max_weight", "min_weight", "max_turnover"
  string symbol = 2;                    // Optional, for symbol-specific constraints
  double value = 3;
}

message OptimizeAllocationResponse {
  common.v1.Response response = 1;
  repeated PortfolioWeight optimal_weights = 2;
  business.v1.PortfolioMetrics projected_metrics = 3;
  repeated RebalanceTrade required_trades = 4;
}

// Export and reporting
message ExportPortfolioRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  string format = 3;                    // "csv", "xlsx", "pdf"
  common.v1.Timestamp from = 4;
  common.v1.Timestamp to = 5;
  repeated string include_sections = 6;  // "positions", "trades", "performance"
}

message ExportPortfolioResponse {
  common.v1.Response response = 1;
  string download_url = 2;
  string file_format = 3;
  int64 file_size_bytes = 4;
  common.v1.Timestamp expires_at = 5;
}

message GenerateReportRequest {
  common.v1.BaseMessage base = 1;
  string portfolio_id = 2;
  string report_type = 3;               // "performance", "risk", "attribution"
  common.v1.Timestamp period_start = 4;
  common.v1.Timestamp period_end = 5;
  map<string, string> parameters = 6;
}

message GenerateReportResponse {
  common.v1.Response response = 1;
  string report_id = 2;
  string download_url = 3;
  common.v1.Timestamp generated_at = 4;
}

// Portfolio cloning
message ClonePortfolioRequest {
  common.v1.BaseMessage base = 1;
  string source_portfolio_id = 2;
  string new_portfolio_name = 3;
  bool copy_positions = 4;
  bool copy_settings = 5;
  common.v1.Money new_initial_balance = 6;
}

message ClonePortfolioResponse {
  common.v1.Response response = 1;
  business.v1.Portfolio cloned_portfolio = 2;
}

message CopyPortfolioRequest {
  common.v1.BaseMessage base = 1;
  string source_portfolio_id = 2;
  string target_portfolio_id = 3;
  bool copy_positions = 4;
  bool replace_existing = 5;
}

message CopyPortfolioResponse {
  common.v1.Response response = 1;
  business.v1.Portfolio updated_portfolio = 2;
  int32 positions_copied = 3;
}