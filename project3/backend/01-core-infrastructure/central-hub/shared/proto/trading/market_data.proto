syntax = "proto3";

package trading.v1;

import "common/base.proto";

option go_package = "github.com/aitrading/proto/trading/v1";
option java_package = "com.aitrading.proto.trading.v1";
option csharp_namespace = "AiTrading.Proto.Trading.V1";

// Market tick data - Category A: High Volume + Mission Critical
// Transport: NATS primary, Kafka backup
// Performance target: <1ms serialization, 50+ ticks/second
// OFFICIAL MT5 API COMPATIBLE STRUCTURE
message TickData {
  string symbol = 1;                    // Trading symbol (EURUSD, GBPJPY, etc)

  // Official MT5 API fields
  double bid = 2;                       // Bid price
  double ask = 3;                       // Ask price
  double last = 4;                      // Last trade price (MT5 'last' field)
  int64 volume = 5;                     // Tick volume (MT5 'volume' field - integer)
  int64 time = 6;                       // Unix timestamp (MT5 'time' field)
  int64 time_msc = 7;                   // Unix timestamp with milliseconds (MT5 'time_msc' field)
  int32 flags = 8;                      // MT5 tick flags (bid/ask/last/volume flags)
  double volume_real = 9;               // Real volume (MT5 'volume_real' field)

  // Additional fields for our system
  string tenant_id = 10;                // Multi-tenant isolation
  int64 sequence_number = 11;           // For gap detection
  string source = 12;                   // Data source (MT5, etc)
  double spread = 13;                   // Calculated bid-ask spread
}

// OHLCV bar data for different timeframes
// OFFICIAL MT5 API COMPATIBLE STRUCTURE
message OHLCVBar {
  string symbol = 1;

  // Official MT5 API fields
  int64 time = 2;                       // Unix timestamp (MT5 'time' field)
  double open = 3;                      // Open price (MT5 'open' field)
  double high = 4;                      // High price (MT5 'high' field)
  double low = 5;                       // Low price (MT5 'low' field)
  double close = 6;                     // Close price (MT5 'close' field)
  int64 tick_volume = 7;                // Tick volume (MT5 'tick_volume' field)
  int32 spread = 8;                     // Spread (MT5 'spread' field)
  int64 real_volume = 9;                // Real volume (MT5 'real_volume' field)

  // Additional fields for our system
  string timeframe = 10;                // "1m", "5m", "1h", "1d", etc
  string tenant_id = 11;                // Multi-tenant isolation
  int64 tick_count = 12;                // Number of ticks in this bar (for our analytics)
}

// Market depth/order book data
message MarketDepth {
  string symbol = 1;
  int64 time = 2;                       // Unix timestamp (consistent with MT5)
  int64 time_msc = 3;                   // Unix timestamp with milliseconds
  repeated PriceLevel bids = 4;
  repeated PriceLevel asks = 5;
  string tenant_id = 6;
  int64 sequence_number = 7;
}

message PriceLevel {
  double price = 1;
  double volume = 2;
  int32 order_count = 3;
}

// Streaming market data for high-frequency updates
// Used for Category A transport (NATS + Kafka)
message MarketDataStream {
  repeated TickData ticks = 1;
  repeated OHLCVBar bars = 2;
  MarketDepth depth = 3;
  string source = 4;
  int64 batch_sequence = 5;
  int64 batch_time = 6;                 // Unix timestamp (consistent with MT5)
  int64 batch_time_msc = 7;             // Unix timestamp with milliseconds
  string tenant_id = 8;
}

// Market session information
message MarketSession {
  string market = 1;                    // "forex", "stock", "crypto"
  string session_name = 2;              // "london", "new_york", "tokyo"
  common.v1.Timestamp session_start = 3;
  common.v1.Timestamp session_end = 4;
  bool is_active = 5;
  string timezone = 6;
}

// Symbol information and specifications
// OFFICIAL MT5 API COMPATIBLE STRUCTURE
message SymbolInfo {
  string name = 1;                      // Symbol name (MT5 'name' field)

  // Official MT5 API core fields
  bool custom = 2;                      // Custom symbol flag
  int32 chart_mode = 3;                 // Chart mode
  bool select = 4;                      // Symbol selected in Market Watch
  bool visible = 5;                     // Symbol visible
  int32 digits = 6;                     // Decimal places
  int32 spread = 7;                     // Spread in points
  int32 trade_mode = 8;                 // Trade execution mode

  // Price fields
  double bid = 9;                       // Current bid
  double ask = 10;                      // Current ask
  double last = 11;                     // Last deal price
  double point = 12;                    // Point size

  // Volume fields
  int64 volume = 13;                    // Current volume
  double volume_min = 14;               // Minimum volume for deal
  double volume_max = 15;               // Maximum volume for deal
  double volume_step = 16;              // Volume step

  // Trading fields
  double trade_tick_value = 17;         // Tick value
  double trade_contract_size = 18;      // Contract size
  int32 trade_stops_level = 19;         // Stop level
  int32 trade_freeze_level = 20;        // Freeze level

  // Swap fields
  double swap_long = 21;                // Long swap
  double swap_short = 22;               // Short swap

  // Currency fields
  string currency_base = 23;            // Base currency
  string currency_profit = 24;          // Profit currency
  string currency_margin = 25;          // Margin currency
  string description = 26;              // Symbol description

  // Additional system fields
  string tenant_id = 27;                // Multi-tenant isolation
  MarketSession session = 28;           // Market session info (our addition)
  common.v1.Timestamp last_updated = 29; // Last update time
}

// Market data subscription management
message MarketDataSubscription {
  string subscription_id = 1;
  string tenant_id = 2;
  repeated string symbols = 3;
  repeated string data_types = 4;      // "tick", "ohlcv", "depth"
  string timeframe = 5;                // For OHLCV subscriptions
  bool is_active = 6;
  common.v1.Timestamp created_at = 7;
  common.v1.Timestamp last_update = 8;
}

// Market data quality metrics
message DataQualityMetrics {
  string symbol = 1;
  string tenant_id = 2;
  common.v1.Timestamp period_start = 3;
  common.v1.Timestamp period_end = 4;
  int64 total_ticks = 5;
  int64 missing_ticks = 6;
  int64 duplicate_ticks = 7;
  int64 out_of_sequence_ticks = 8;
  double data_completeness = 9;        // Percentage 0-100
  double average_latency_ms = 10;
  double max_latency_ms = 11;
}