openapi: 3.0.3
info:
  title: System Management API
  description: |
    Category C: Low Volume + Standard
    Transport: HTTP REST + JSON via Kong Gateway
    Performance target: <500ms response time

    System management API for health monitoring, logging, audit trails,
    and administrative operations. Includes service discovery, metrics,
    and maintenance endpoints.
  version: 1.0.0
  contact:
    name: AI Trading Platform
    url: https://github.com/aitrading/platform

servers:
  - url: https://api.aitrading.platform/system/v1
    description: Production API Gateway
  - url: https://staging-api.aitrading.platform/system/v1
    description: Staging API Gateway
  - url: http://localhost:8000/system/v1
    description: Local Development

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  /health:
    get:
      summary: System health check
      description: Overall system health status
      tags: [Health]
      security: []
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'
        '503':
          description: System has issues
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemHealthResponse'

  /health/services:
    get:
      summary: Service health status
      description: Health status of all services
      tags: [Health]
      responses:
        '200':
          description: Service health status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceHealth'

  /health/services/{serviceName}:
    get:
      summary: Specific service health
      description: Detailed health check for specific service
      tags: [Health]
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Service name
          schema:
            type: string
      responses:
        '200':
          description: Service health details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealth'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /logs:
    get:
      summary: Query system logs
      description: Search and filter system logs
      tags: [Logging]
      parameters:
        - name: level
          in: query
          description: Log level filter
          schema:
            type: string
            enum: [debug, info, warn, error, fatal]
        - name: service
          in: query
          description: Service name filter
          schema:
            type: string
        - name: from
          in: query
          description: Start time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: search
          in: query
          description: Search query
          schema:
            type: string
        - name: tenant_id
          in: query
          description: Tenant filter
          schema:
            type: string
        - name: user_id
          in: query
          description: User filter
          schema:
            type: string
        - name: correlation_id
          in: query
          description: Request correlation ID
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
            maximum: 1000
      responses:
        '200':
          description: Log entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogResponse'

    post:
      summary: Create log entry
      description: Add new log entry (for external services)
      tags: [Logging]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEntry'
      responses:
        '201':
          description: Log entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /logs/export:
    post:
      summary: Export logs
      description: Export logs to file
      tags: [Logging]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogExportRequest'
      responses:
        '202':
          description: Export job started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobResponse'

  /logs/export/{jobId}:
    get:
      summary: Get export job status
      description: Check export job status and download link
      tags: [Logging]
      parameters:
        - name: jobId
          in: path
          required: true
          description: Export job ID
          schema:
            type: string
      responses:
        '200':
          description: Export job status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportJobStatus'

  /audit:
    get:
      summary: Query audit logs
      description: Search audit trail entries
      tags: [Audit]
      parameters:
        - name: action
          in: query
          description: Action type filter
          schema:
            type: string
            enum: [create, read, update, delete, login, logout, trade, config_change]
        - name: resource
          in: query
          description: Resource type filter
          schema:
            type: string
        - name: user_id
          in: query
          description: User filter
          schema:
            type: string
        - name: tenant_id
          in: query
          description: Tenant filter
          schema:
            type: string
        - name: from
          in: query
          description: Start time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: severity
          in: query
          description: Audit severity level
          schema:
            type: string
            enum: [low, medium, high, critical]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 500
      responses:
        '200':
          description: Audit entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditResponse'

    post:
      summary: Create audit entry
      description: Add new audit trail entry
      tags: [Audit]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditEntry'
      responses:
        '201':
          description: Audit entry created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /metrics:
    get:
      summary: System metrics
      description: Get system performance metrics
      tags: [Metrics]
      parameters:
        - name: metric_type
          in: query
          description: Type of metrics
          schema:
            type: string
            enum: [performance, usage, business, technical]
        - name: service
          in: query
          description: Service filter
          schema:
            type: string
        - name: from
          in: query
          description: Start time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: End time (ISO 8601)
          schema:
            type: string
            format: date-time
        - name: granularity
          in: query
          description: Data granularity
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 1d]
            default: 5m
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsResponse'

  /metrics/prometheus:
    get:
      summary: Prometheus metrics
      description: Metrics in Prometheus format
      tags: [Metrics]
      security: []
      produces:
        - text/plain
      responses:
        '200':
          description: Prometheus metrics
          content:
            text/plain:
              schema:
                type: string

  /services:
    get:
      summary: List services
      description: Service discovery endpoint
      tags: [Service Discovery]
      parameters:
        - name: status
          in: query
          description: Service status filter
          schema:
            type: string
            enum: [active, inactive, error]
        - name: type
          in: query
          description: Service type filter
          schema:
            type: string
            enum: [core, business, integration, ui]
      responses:
        '200':
          description: List of services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ServiceInfo'

  /services/{serviceName}:
    get:
      summary: Service details
      description: Detailed information about specific service
      tags: [Service Discovery]
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Service name
          schema:
            type: string
      responses:
        '200':
          description: Service details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInfo'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Register service
      description: Register new service instance
      tags: [Service Discovery]
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Service name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceRegistration'
      responses:
        '201':
          description: Service registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

    put:
      summary: Update service
      description: Update service registration
      tags: [Service Discovery]
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Service name
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdate'
      responses:
        '200':
          description: Service updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

    delete:
      summary: Deregister service
      description: Remove service from registry
      tags: [Service Discovery]
      parameters:
        - name: serviceName
          in: path
          required: true
          description: Service name
          schema:
            type: string
      responses:
        '200':
          description: Service deregistered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /maintenance:
    get:
      summary: Maintenance status
      description: Current maintenance windows and schedules
      tags: [Maintenance]
      responses:
        '200':
          description: Maintenance information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceStatus'

    post:
      summary: Schedule maintenance
      description: Schedule system maintenance window
      tags: [Maintenance]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceRequest'
      responses:
        '201':
          description: Maintenance scheduled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceResponse'

  /maintenance/{maintenanceId}:
    get:
      summary: Maintenance details
      description: Get specific maintenance window details
      tags: [Maintenance]
      parameters:
        - name: maintenanceId
          in: path
          required: true
          description: Maintenance ID
          schema:
            type: string
      responses:
        '200':
          description: Maintenance details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MaintenanceWindow'

    put:
      summary: Update maintenance
      description: Update maintenance window
      tags: [Maintenance]
      parameters:
        - name: maintenanceId
          in: path
          required: true
          description: Maintenance ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MaintenanceUpdate'
      responses:
        '200':
          description: Maintenance updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

    delete:
      summary: Cancel maintenance
      description: Cancel scheduled maintenance
      tags: [Maintenance]
      parameters:
        - name: maintenanceId
          in: path
          required: true
          description: Maintenance ID
          schema:
            type: string
      responses:
        '200':
          description: Maintenance cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /admin/cache:
    delete:
      summary: Clear system cache
      description: Clear system-wide cache
      tags: [Administration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cache_type:
                  type: string
                  enum: [all, config, user, session, data]
                  default: all
                tenant_id:
                  type: string
                  description: Clear cache for specific tenant
      responses:
        '200':
          description: Cache cleared
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheResponse'

  /admin/database/cleanup:
    post:
      summary: Database cleanup
      description: Clean up old data and optimize database
      tags: [Administration]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cleanup_type:
                  type: string
                  enum: [logs, audit, sessions, temp_data]
                older_than_days:
                  type: integer
                  minimum: 7
                  default: 30
                dry_run:
                  type: boolean
                  default: true
      responses:
        '200':
          description: Cleanup completed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanupResponse'

  /admin/system/restart:
    post:
      summary: Restart system components
      description: Graceful restart of system components
      tags: [Administration]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                components:
                  type: array
                  items:
                    type: string
                  description: Components to restart
                force:
                  type: boolean
                  default: false
                  description: Force restart without graceful shutdown
              required:
                - components
      responses:
        '202':
          description: Restart initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    SystemHealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        timestamp:
          type: string
          format: date-time
        uptime_seconds:
          type: integer
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceHealth'
        dependencies:
          type: object
          properties:
            database:
              type: string
              enum: [healthy, unhealthy]
            cache:
              type: string
              enum: [healthy, unhealthy]
            message_queue:
              type: string
              enum: [healthy, unhealthy]
        metrics:
          type: object
          properties:
            cpu_usage:
              type: number
              format: float
            memory_usage:
              type: number
              format: float
            disk_usage:
              type: number
              format: float
            active_connections:
              type: integer

    ServiceHealth:
      type: object
      properties:
        service_name:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        last_check:
          type: string
          format: date-time
        response_time_ms:
          type: number
        error_rate:
          type: number
          format: float
        details:
          type: object
          additionalProperties: true

    LogEntry:
      type: object
      properties:
        level:
          type: string
          enum: [debug, info, warn, error, fatal]
        message:
          type: string
        service:
          type: string
        timestamp:
          type: string
          format: date-time
        tenant_id:
          type: string
          nullable: true
        user_id:
          type: string
          nullable: true
        correlation_id:
          type: string
          nullable: true
        metadata:
          type: object
          additionalProperties: true
        stack_trace:
          type: string
          nullable: true
      required:
        - level
        - message
        - service

    LogResponse:
      type: object
      properties:
        success:
          type: boolean
        logs:
          type: array
          items:
            $ref: '#/components/schemas/LogEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        total_count:
          type: integer

    AuditEntry:
      type: object
      properties:
        action:
          type: string
          enum: [create, read, update, delete, login, logout, trade, config_change]
        resource:
          type: string
        resource_id:
          type: string
          nullable: true
        user_id:
          type: string
        tenant_id:
          type: string
        timestamp:
          type: string
          format: date-time
        ip_address:
          type: string
        user_agent:
          type: string
          nullable: true
        severity:
          type: string
          enum: [low, medium, high, critical]
        details:
          type: object
          additionalProperties: true
        outcome:
          type: string
          enum: [success, failure, partial]
      required:
        - action
        - resource
        - user_id
        - tenant_id

    AuditResponse:
      type: object
      properties:
        success:
          type: boolean
        audit_entries:
          type: array
          items:
            $ref: '#/components/schemas/AuditEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        total_count:
          type: integer

    MetricsResponse:
      type: object
      properties:
        success:
          type: boolean
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/MetricDataPoint'
        summary:
          type: object
          properties:
            total_requests:
              type: integer
            average_response_time:
              type: number
            error_rate:
              type: number
            peak_usage:
              type: number

    MetricDataPoint:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        metric_name:
          type: string
        metric_type:
          type: string
          enum: [counter, gauge, histogram, summary]
        value:
          type: number
        labels:
          type: object
          additionalProperties:
            type: string
        unit:
          type: string

    ServiceInfo:
      type: object
      properties:
        service_name:
          type: string
        service_type:
          type: string
          enum: [core, business, integration, ui]
        version:
          type: string
        status:
          type: string
          enum: [active, inactive, error]
        host:
          type: string
        port:
          type: integer
        endpoints:
          type: array
          items:
            type: string
        health_check_url:
          type: string
        registered_at:
          type: string
          format: date-time
        last_heartbeat:
          type: string
          format: date-time
        metadata:
          type: object
          additionalProperties:
            type: string

    ServiceRegistration:
      type: object
      properties:
        service_type:
          type: string
          enum: [core, business, integration, ui]
        version:
          type: string
        host:
          type: string
        port:
          type: integer
        endpoints:
          type: array
          items:
            type: string
        health_check_url:
          type: string
        metadata:
          type: object
          additionalProperties:
            type: string
      required:
        - service_type
        - version
        - host
        - port

    ServiceUpdate:
      type: object
      properties:
        status:
          type: string
          enum: [active, inactive, error]
        metadata:
          type: object
          additionalProperties:
            type: string

    MaintenanceStatus:
      type: object
      properties:
        is_maintenance_mode:
          type: boolean
        current_maintenance:
          $ref: '#/components/schemas/MaintenanceWindow'
          nullable: true
        scheduled_maintenance:
          type: array
          items:
            $ref: '#/components/schemas/MaintenanceWindow'
        next_maintenance:
          $ref: '#/components/schemas/MaintenanceWindow'
          nullable: true

    MaintenanceWindow:
      type: object
      properties:
        maintenance_id:
          type: string
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        affected_services:
          type: array
          items:
            type: string
        maintenance_type:
          type: string
          enum: [planned, emergency, rolling]
        status:
          type: string
          enum: [scheduled, in_progress, completed, cancelled]
        created_by:
          type: string
        created_at:
          type: string
          format: date-time
        notifications_sent:
          type: boolean

    MaintenanceRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        affected_services:
          type: array
          items:
            type: string
        maintenance_type:
          type: string
          enum: [planned, emergency, rolling]
        send_notifications:
          type: boolean
          default: true
      required:
        - title
        - start_time
        - end_time
        - affected_services

    MaintenanceUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        affected_services:
          type: array
          items:
            type: string
        status:
          type: string
          enum: [scheduled, in_progress, completed, cancelled]

    MaintenanceResponse:
      type: object
      properties:
        success:
          type: boolean
        maintenance_id:
          type: string
        maintenance:
          $ref: '#/components/schemas/MaintenanceWindow'
        message:
          type: string

    LogExportRequest:
      type: object
      properties:
        level:
          type: string
          enum: [debug, info, warn, error, fatal]
        service:
          type: string
        from:
          type: string
          format: date-time
        to:
          type: string
          format: date-time
        format:
          type: string
          enum: [json, csv, txt]
          default: json
        tenant_id:
          type: string
        include_metadata:
          type: boolean
          default: true
      required:
        - from
        - to

    ExportJobResponse:
      type: object
      properties:
        success:
          type: boolean
        job_id:
          type: string
        estimated_completion:
          type: string
          format: date-time
        message:
          type: string

    ExportJobStatus:
      type: object
      properties:
        job_id:
          type: string
        status:
          type: string
          enum: [pending, processing, completed, failed]
        progress_percentage:
          type: number
          format: float
        download_url:
          type: string
          nullable: true
        expires_at:
          type: string
          format: date-time
          nullable: true
        error_message:
          type: string
          nullable: true
        file_size_bytes:
          type: integer
          nullable: true

    CacheResponse:
      type: object
      properties:
        success:
          type: boolean
        cache_type:
          type: string
        entries_cleared:
          type: integer
        memory_freed_mb:
          type: number
        message:
          type: string

    CleanupResponse:
      type: object
      properties:
        success:
          type: boolean
        cleanup_type:
          type: string
        records_deleted:
          type: integer
        space_freed_mb:
          type: number
        dry_run:
          type: boolean
        message:
          type: string

    RestartResponse:
      type: object
      properties:
        success:
          type: boolean
        restart_id:
          type: string
        components:
          type: array
          items:
            type: string
        estimated_completion:
          type: string
          format: date-time
        message:
          type: string

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        timestamp:
          type: string
          format: date-time

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
        message:
          type: string
        details:
          type: object
        timestamp:
          type: string
          format: date-time
        request_id:
          type: string

    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        has_next:
          type: boolean
        has_previous:
          type: boolean

tags:
  - name: Health
    description: System health monitoring
  - name: Logging
    description: System logging and log management
  - name: Audit
    description: Audit trail and compliance
  - name: Metrics
    description: System performance metrics
  - name: Service Discovery
    description: Service registration and discovery
  - name: Maintenance
    description: Maintenance window management
  - name: Administration
    description: System administration operations