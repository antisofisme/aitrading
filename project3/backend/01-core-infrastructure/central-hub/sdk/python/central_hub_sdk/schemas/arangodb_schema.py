"""
ArangoDB Schema Definitions
Multi-model database (graph + document) for relationship data
"""
from typing import Dict, List, Any


def get_arangodb_schemas() -> List[Dict[str, Any]]:
    """Get all ArangoDB collection and graph schemas"""
    return {
        "collections": get_collections(),
        "graphs": get_graphs(),
    }


def get_collections() -> List[Dict[str, Any]]:
    """Get document collection definitions"""
    return [
        TRADING_SIGNALS_COLLECTION,
        MARKET_PATTERNS_COLLECTION,
        STRATEGY_PERFORMANCE_COLLECTION,
    ]


def get_graphs() -> List[Dict[str, Any]]:
    """Get graph definitions"""
    return [
        TRADING_RELATIONSHIPS_GRAPH,
    ]


# ============================================================================
# DOCUMENT COLLECTIONS
# ============================================================================

TRADING_SIGNALS_COLLECTION = {
    "name": "trading_signals",
    "type": "document",
    "description": "Trading signals generated by strategies",
    "schema": {
        "signal_id": "string",
        "symbol": "string",
        "signal_type": "string",  # buy, sell, hold
        "strength": "number",  # 0-100
        "strategy_name": "string",
        "timestamp": "number",
        "price": "number",
        "metadata": "object",
        "created_at": "number",
    },
    "indexes": [
        {
            "type": "persistent",
            "fields": ["symbol", "timestamp"],
            "name": "idx_symbol_timestamp"
        },
        {
            "type": "persistent",
            "fields": ["strategy_name"],
            "name": "idx_strategy"
        },
    ]
}


MARKET_PATTERNS_COLLECTION = {
    "name": "market_patterns",
    "type": "document",
    "description": "Detected market patterns (candlestick, chart patterns)",
    "schema": {
        "pattern_id": "string",
        "pattern_type": "string",  # doji, hammer, head_shoulders, etc.
        "symbol": "string",
        "timeframe": "string",
        "timestamp": "number",
        "confidence": "number",  # 0-1
        "metadata": "object",
        "detected_at": "number",
    },
    "indexes": [
        {
            "type": "persistent",
            "fields": ["pattern_type", "confidence"],
            "name": "idx_pattern_confidence"
        },
    ]
}


STRATEGY_PERFORMANCE_COLLECTION = {
    "name": "strategy_performance",
    "type": "document",
    "description": "Strategy performance metrics and backtesting results",
    "schema": {
        "strategy_id": "string",
        "strategy_name": "string",
        "period_start": "number",
        "period_end": "number",
        "total_trades": "number",
        "win_rate": "number",
        "profit_loss": "number",
        "sharpe_ratio": "number",
        "max_drawdown": "number",
        "metadata": "object",
    },
    "indexes": [
        {
            "type": "persistent",
            "fields": ["strategy_name", "period_start"],
            "name": "idx_strategy_period"
        },
    ]
}


# ============================================================================
# GRAPH DEFINITIONS
# ============================================================================

TRADING_RELATIONSHIPS_GRAPH = {
    "name": "trading_relationships",
    "description": "Relationships between symbols, strategies, and signals",
    "edge_definitions": [
        {
            "edge_collection": "correlates_with",
            "from_vertex_collections": ["trading_signals"],
            "to_vertex_collections": ["trading_signals"],
            "description": "Signal correlations"
        },
        {
            "edge_collection": "generated_by",
            "from_vertex_collections": ["trading_signals"],
            "to_vertex_collections": ["strategy_performance"],
            "description": "Signals generated by strategies"
        },
        {
            "edge_collection": "influenced_by",
            "from_vertex_collections": ["market_patterns"],
            "to_vertex_collections": ["trading_signals"],
            "description": "Patterns influencing signals"
        },
    ]
}


# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

def generate_collection_json(collection: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate ArangoDB collection creation JSON

    Args:
        collection: Collection schema dict

    Returns:
        JSON for collection creation
    """
    return {
        "name": collection["name"],
        "type": 2 if collection["type"] == "document" else 3,  # 2=document, 3=edge
        "schema": {
            "rule": {
                "type": "object",
                "properties": collection.get("schema", {}),
                "additionalProperties": True
            },
            "level": "moderate",
            "message": f"Schema validation for {collection['name']}"
        }
    }


def generate_graph_json(graph: Dict[str, Any]) -> Dict[str, Any]:
    """
    Generate ArangoDB graph creation JSON

    Args:
        graph: Graph schema dict

    Returns:
        JSON for graph creation
    """
    return {
        "name": graph["name"],
        "edgeDefinitions": [
            {
                "collection": edge["edge_collection"],
                "from": edge["from_vertex_collections"],
                "to": edge["to_vertex_collections"]
            }
            for edge in graph["edge_definitions"]
        ]
    }


def get_all_arangodb_json() -> Dict[str, Any]:
    """
    Generate complete ArangoDB schema as JSON

    Returns:
        Complete schema definition
    """
    schemas = get_arangodb_schemas()

    return {
        "collections": [
            generate_collection_json(coll)
            for coll in schemas["collections"]
        ],
        "graphs": [
            generate_graph_json(graph)
            for graph in schemas["graphs"]
        ]
    }
