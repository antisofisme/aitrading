syntax = "proto3";

package central_hub.coordination;

import "google/protobuf/timestamp.proto";
import "service_discovery.proto";

// Circuit Breaker Request
message CircuitBreakerRequest {
  string service_name = 1;
  string tenant_id = 2;
  string subscription_tier = 3;  // free, pro, enterprise
  string operation_name = 4;
  map<string, string> context = 5;
}

// Circuit Breaker Response
message CircuitBreakerResponse {
  bool should_circuit_break = 1;
  float current_failure_rate = 2;
  float threshold = 3;
  int64 timeout_seconds = 4;
  string recommendation = 5;
  CircuitBreakerState state = 6;
}

// Circuit Breaker State
enum CircuitBreakerState {
  CLOSED = 0;
  OPEN = 1;
  HALF_OPEN = 2;
}

// Scaling Prediction Request
message ScalingPredictionRequest {
  string service_name = 1;
  string tenant_id = 2;
  string subscription_tier = 3;
  map<string, float> current_metrics = 4;
  int32 current_instances = 5;
}

// Scaling Prediction Response
message ScalingPredictionResponse {
  int32 recommended_instances = 1;
  int32 max_allowed_instances = 2;
  float confidence = 3;
  string scaling_reason = 4;
  google.protobuf.Timestamp next_evaluation = 5;
  repeated ScalingMetric contributing_metrics = 6;
}

// Scaling Metric
message ScalingMetric {
  string metric_name = 1;
  float current_value = 2;
  float threshold = 3;
  float weight = 4;
  string trend = 5;  // increasing, decreasing, stable
}

// Workflow Coordination Request
message WorkflowCoordinationRequest {
  string workflow_id = 1;
  string tenant_id = 2;
  repeated string required_services = 3;
  map<string, string> workflow_context = 4;
  WorkflowPriority priority = 5;
}

// Workflow Priority
enum WorkflowPriority {
  LOW = 0;
  NORMAL = 1;
  HIGH = 2;
  CRITICAL = 3;
}

// Workflow Coordination Response
message WorkflowCoordinationResponse {
  string coordination_id = 1;
  repeated ServiceAssignment service_assignments = 2;
  WorkflowExecutionPlan execution_plan = 3;
  google.protobuf.Timestamp coordination_timestamp = 4;
}

// Service Assignment
message ServiceAssignment {
  string service_name = 1;
  discovery.ServiceInfo assigned_service = 2;
  int32 priority_order = 3;
  bool tenant_context_applied = 4;
  map<string, string> assignment_metadata = 5;
}

// Workflow Execution Plan
message WorkflowExecutionPlan {
  string plan_id = 1;
  repeated ExecutionStep steps = 2;
  ExecutionStrategy strategy = 3;
  int64 estimated_duration_ms = 4;
  map<string, string> plan_metadata = 5;
}

// Execution Step
message ExecutionStep {
  int32 step_order = 1;
  string service_name = 2;
  string operation = 3;
  repeated string dependencies = 4;
  int64 timeout_ms = 5;
  bool parallel_execution = 6;
}

// Execution Strategy
enum ExecutionStrategy {
  SEQUENTIAL = 0;
  PARALLEL = 1;
  MIXED = 2;
  ADAPTIVE = 3;
}

// Performance Monitoring Request
message PerformanceMonitoringRequest {
  string tenant_id = 1;
  string service_name = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  repeated string metric_types = 5;
}

// Performance Monitoring Response
message PerformanceMonitoringResponse {
  string tenant_id = 1;
  PerformanceData performance_data = 2;
  repeated string optimization_suggestions = 3;
  google.protobuf.Timestamp report_timestamp = 4;
}

// Performance Data
message PerformanceData {
  ResponseTimeMetrics response_times = 1;
  ThroughputMetrics throughput = 2;
  ErrorRateMetrics error_rates = 3;
  ResourceUsageMetrics resource_usage = 4;
}

// Response Time Metrics
message ResponseTimeMetrics {
  float avg_ms = 1;
  float p50_ms = 2;
  float p95_ms = 3;
  float p99_ms = 4;
  float max_ms = 5;
}

// Throughput Metrics
message ThroughputMetrics {
  float requests_per_second = 1;
  float peak_rps = 2;
  int64 total_requests = 3;
}

// Error Rate Metrics
message ErrorRateMetrics {
  float rate = 1;
  int64 total_errors = 2;
  map<string, int64> errors_by_type = 3;
}

// Resource Usage Metrics
message ResourceUsageMetrics {
  float cpu_usage = 1;
  float memory_usage = 2;
  float disk_usage = 3;
  float network_io = 4;
}

// Coordination Service
service CoordinationService {
  // Circuit breaker management
  rpc EvaluateCircuitBreaker(CircuitBreakerRequest) returns (CircuitBreakerResponse);

  // Predictive scaling
  rpc PredictScaling(ScalingPredictionRequest) returns (ScalingPredictionResponse);

  // Workflow coordination
  rpc CoordinateWorkflow(WorkflowCoordinationRequest) returns (WorkflowCoordinationResponse);

  // Performance monitoring
  rpc MonitorPerformance(PerformanceMonitoringRequest) returns (PerformanceMonitoringResponse);
}