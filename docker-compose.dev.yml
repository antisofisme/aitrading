# Phase 1 Development Environment - AI Trading Platform
# Zero-Trust Architecture with Optimized Log Retention

version: '3.8'

services:
  # Central Hub - Core Infrastructure
  central-hub:
    build:
      context: .
      dockerfile: docker/services/central-hub.Dockerfile
      target: development
    container_name: aitrading-central-hub-dev
    ports:
      - "8010:8010"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=DEBUG
      - LOG_RETENTION_POLICY=development
      - SECURITY_MODE=zero-trust-dev
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - hub-logs:/app/logs
      - hub-memory:/app/memory
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - database-service
      - dragonfly-cache
    restart: unless-stopped

  # API Gateway - Zero-Trust Entry Point
  api-gateway:
    build:
      context: .
      dockerfile: docker/services/api-gateway.Dockerfile
      target: development
    container_name: aitrading-api-gateway-dev
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - JWT_SECRET=${JWT_SECRET_DEV}
      - RATE_LIMIT_WINDOW=15
      - RATE_LIMIT_MAX=100
      - SECURITY_AUDIT_ENABLED=true
      - SUBSCRIPTION_VALIDATION_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - gateway-logs:/app/logs
      - ./docker/security/certs:/app/certs:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
      - dragonfly-cache
    restart: unless-stopped

  # Database Service - Multi-DB with Encryption
  database-service:
    build:
      context: .
      dockerfile: docker/services/database-service.Dockerfile
      target: development
    container_name: aitrading-database-service-dev
    ports:
      - "8008:8008"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - DB_ENCRYPTION_ENABLED=true
      - LOG_RETENTION_OPTIMIZATION=true
      - COST_TRACKING_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - database-logs:/app/logs
      - ./docker/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres-main
      - clickhouse-logs
      - dragonfly-cache
    restart: unless-stopped

  # Data Bridge - Secure MT5 Integration
  data-bridge:
    build:
      context: .
      dockerfile: docker/services/data-bridge.Dockerfile
      target: development
    container_name: aitrading-data-bridge-dev
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - WEBSOCKET_SECURITY_ENABLED=true
      - MT5_CREDENTIAL_ENCRYPTION=true
      - SIGNAL_VALIDATION_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - bridge-logs:/app/logs
      - ./docker/security/certs:/app/certs:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
    restart: unless-stopped

  # Trading Engine - Server-Side Authority
  trading-engine:
    build:
      context: .
      dockerfile: docker/services/trading-engine.Dockerfile
      target: development
    container_name: aitrading-trading-engine-dev
    ports:
      - "8007:8007"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - TRADING_AUTHORITY=server-side
      - RISK_MANAGEMENT_ENABLED=true
      - AUDIT_TRAIL_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - trading-logs:/app/logs
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
    restart: unless-stopped

  # PostgreSQL - Primary Database
  postgres-main:
    image: postgres:15-alpine
    container_name: aitrading-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-aitrading_dev}
      - POSTGRES_USER=${POSTGRES_USER:-aitrading}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aitrading} -d ${POSTGRES_DB:-aitrading_dev}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ClickHouse - Optimized Log Storage
  clickhouse-logs:
    image: clickhouse/clickhouse-server:latest
    container_name: aitrading-clickhouse-dev
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DB:-aitrading_logs}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-aitrading}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/scripts/init-clickhouse.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./docker/configs/clickhouse-config.xml:/etc/clickhouse-server/config.xml:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # DragonflyDB - High-Performance Cache
  dragonfly-cache:
    image: docker.dragonflydb.io/dragonflydb/dragonfly:latest
    container_name: aitrading-dragonfly-dev
    ports:
      - "6379:6379"
    environment:
      - DFLY_requirepass=${DRAGONFLY_PASSWORD}
    volumes:
      - dragonfly-data:/data
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Weaviate - Vector Database
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: aitrading-weaviate-dev
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=false
      - AUTHENTICATION_APIKEY_ENABLED=true
      - AUTHENTICATION_APIKEY_ALLOWED_KEYS=${WEAVIATE_API_KEY}
      - AUTHORIZATION_ADMINLIST_ENABLED=true
      - AUTHORIZATION_ADMINLIST_USERS=${WEAVIATE_ADMIN_USER}
      - PERSISTENCE_DATA_PATH='/var/lib/weaviate'
      - DEFAULT_VECTORIZER_MODULE=none
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ArangoDB - Graph Database
  arangodb:
    image: arangodb:latest
    container_name: aitrading-arangodb-dev
    ports:
      - "8529:8529"
    environment:
      - ARANGO_ROOT_PASSWORD=${ARANGO_ROOT_PASSWORD}
      - ARANGO_DB=${ARANGO_DB:-aitrading_graph}
    volumes:
      - arangodb-data:/var/lib/arangodb3
      - arangodb-apps:/var/lib/arangodb3-apps
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8529/_api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Security Monitor - Zero-Trust Monitoring
  security-monitor:
    build:
      context: .
      dockerfile: docker/services/security-monitor.Dockerfile
      target: development
    container_name: aitrading-security-monitor-dev
    ports:
      - "8020:8020"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - SECURITY_SCAN_INTERVAL=300
      - THREAT_DETECTION_ENABLED=true
      - AUDIT_REAL_TIME=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - security-logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
    restart: unless-stopped

  # Log Aggregator - Optimized Retention
  log-aggregator:
    build:
      context: .
      dockerfile: docker/services/log-aggregator.Dockerfile
      target: development
    container_name: aitrading-log-aggregator-dev
    ports:
      - "8030:8030"
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=INFO
      - RETENTION_OPTIMIZATION=true
      - COST_TRACKING=true
      - HOT_STORAGE_DAYS=7
      - WARM_STORAGE_DAYS=90
      - COLD_STORAGE_DAYS=365
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - aggregator-logs:/app/logs
      - hub-logs:/app/source-logs/hub:ro
      - gateway-logs:/app/source-logs/gateway:ro
      - database-logs:/app/source-logs/database:ro
      - bridge-logs:/app/source-logs/bridge:ro
      - trading-logs:/app/source-logs/trading:ro
    networks:
      - aitrading-dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - clickhouse-logs
    restart: unless-stopped

networks:
  aitrading-dev:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  # Service logs with optimized retention
  hub-logs:
    driver: local
  gateway-logs:
    driver: local
  database-logs:
    driver: local
  bridge-logs:
    driver: local
  trading-logs:
    driver: local
  security-logs:
    driver: local
  aggregator-logs:
    driver: local

  # Memory and state
  hub-memory:
    driver: local

  # Database persistence
  postgres-data:
    driver: local
  clickhouse-data:
    driver: local
  dragonfly-data:
    driver: local
  weaviate-data:
    driver: local
  arangodb-data:
    driver: local
  arangodb-apps:
    driver: local