version: '3.8'

networks:
  ai-trading-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  clickhouse_data:

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: ai-trading-postgres
    environment:
      POSTGRES_DB: ai_trading
      POSTGRES_USER: ai_trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database-service/schemas:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_trading_user -d ai_trading"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: ai-trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    container_name: ai-trading-clickhouse
    environment:
      CLICKHOUSE_USER: ai_trading_user
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-secure_password_456}
      CLICKHOUSE_DEFAULT_ACCESS_MANAGEMENT: 1
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./backend/database-service/schemas/chain-debug-clickhouse.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "8123:8123"
      - "9000:9000"
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Core Services (Essential for Flow-Aware Error Handling)
  configuration-service:
    build: ./backend/configuration-service
    container_name: ai-trading-configuration-service
    environment:
      CONFIG_SERVICE_PORT: 8012
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_ENABLED: "true"
      JWT_SECRET: ${JWT_SECRET:-super_secret_jwt_key_change_in_production}
    ports:
      - "8012:8012"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  api-gateway:
    build: ./backend/api-gateway
    container_name: ai-trading-api-gateway
    environment:
      PORT: 3001
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  data-bridge:
    build: ./backend/data-bridge
    container_name: ai-trading-data-bridge
    environment:
      PORT: 5001
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  central-hub:
    build: ./backend/central-hub
    container_name: ai-trading-central-hub
    environment:
      PORT: 7000
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "7000:7000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  database-service:
    build: ./backend/database-service
    container_name: ai-trading-database-service
    environment:
      PORT: 8008
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      CLICKHOUSE_URL: http://clickhouse:8123
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "8008:8008"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-orchestrator:
    build: ./backend/ai-orchestrator
    container_name: ai-trading-ai-orchestrator
    environment:
      LEVEL4_ORCHESTRATOR_PORT: 8020
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "8020:8020"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8020/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trading-engine:
    build: ./backend/trading-engine
    container_name: ai-trading-trading-engine
    environment:
      PORT: 9000
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "9000:9000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  notification-service:
    build: ./backend/notification-service
    container_name: ai-trading-notification-service
    environment:
      PORT: 9003
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "9003:9003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flow-Aware Error Handling Services (CRITICAL)
  chain-debug-system:
    build: ./backend/chain-debug-system
    container_name: ai-trading-chain-debug-system
    environment:
      PORT: 8030
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      CLICKHOUSE_URL: http://clickhouse:8123
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "8030:8030"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8030/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-chain-analytics:
    build: ./backend/ai-chain-analytics
    container_name: ai-trading-ai-chain-analytics
    environment:
      PORT: 8031
      NODE_ENV: ${NODE_ENV:-development}
      POSTGRES_URL: postgresql://ai_trading_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/ai_trading
      CLICKHOUSE_URL: http://clickhouse:8123
      REDIS_URL: redis://redis:6379
      FLOW_REGISTRY_URL: http://configuration-service:8012
    ports:
      - "8031:8031"
    depends_on:
      postgres:
        condition: service_healthy
      clickhouse:
        condition: service_healthy
      redis:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - ai-trading-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8031/health"]
      interval: 30s
      timeout: 10s
      retries: 3