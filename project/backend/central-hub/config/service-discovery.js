/**
 * Service Discovery Configuration
 * Generated by Service Port Coordinator
 */

const axios = require('axios');

class ServiceDiscovery {
    constructor(serviceName, port) {
        this.serviceName = serviceName;
        this.port = port;
        this.centralHubUrl = process.env.CENTRAL_HUB_URL || 'http://localhost:7000';
        this.registrationInterval = 30000; // 30 seconds
        this.healthCheckInterval = 15000; // 15 seconds
        this.registered = false;
    }

    async register() {
        try {
            const registration = {
                name: this.serviceName,
                port: this.port,
                host: process.env.SERVICE_HOST || 'localhost',
                protocol: 'http',
                health: `http://localhost:${this.port}/health`,
                timestamp: new Date().toISOString()
            };

            await axios.post(`${this.centralHubUrl}/api/services/register`, registration);
            this.registered = true;
            console.log(`Service ${this.serviceName} registered with Central Hub`);

            // Start periodic re-registration
            setInterval(() => this.register(), this.registrationInterval);

        } catch (error) {
            console.error(`Failed to register service ${this.serviceName}:`, error.message);
            // Retry registration after delay
            setTimeout(() => this.register(), 5000);
        }
    }

    async discover(serviceName) {
        try {
            const response = await axios.get(
                `${this.centralHubUrl}/api/services/discovery?name=${serviceName}`
            );
            return response.data;
        } catch (error) {
            console.error(`Failed to discover service ${serviceName}:`, error.message);
            return null;
        }
    }

    async getServiceUrl(serviceName) {
        const service = await this.discover(serviceName);
        if (service) {
            return `${service.protocol}://${service.host}:${service.port}`;
        }
        return null;
    }

    async healthCheck() {
        return {
            service: this.serviceName,
            port: this.port,
            registered: this.registered,
            centralHub: this.centralHubUrl,
            timestamp: new Date().toISOString()
        };
    }
}

module.exports = ServiceDiscovery;