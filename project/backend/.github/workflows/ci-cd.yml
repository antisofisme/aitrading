name: AI Trading Platform - CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'project/backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'project/backend/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # CODE QUALITY & TESTING
  # =============================================================================

  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: project/backend/package-lock.json

    - name: Install dependencies
      working-directory: project/backend
      run: npm ci

    - name: Build shared package
      working-directory: project/backend
      run: npm run build:shared

    - name: Lint code
      working-directory: project/backend
      run: npm run lint

    - name: Type check
      working-directory: project/backend
      run: npm run typecheck

    - name: Run unit tests
      working-directory: project/backend
      run: npm run test:all
      env:
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: project/backend/coverage/lcov.info
        directory: project/backend/coverage
        fail_ci_if_error: true

  # =============================================================================
  # SECURITY SCANNING
  # =============================================================================

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: project/backend/package-lock.json

    - name: Install dependencies
      working-directory: project/backend
      run: npm ci

    - name: Run security audit
      working-directory: project/backend
      run: npm audit --audit-level moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --file=project/backend/package.json

    - name: CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript

  # =============================================================================
  # INTEGRATION TESTING
  # =============================================================================

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: aitrading_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: project/backend/package-lock.json

    - name: Install dependencies
      working-directory: project/backend
      run: npm ci

    - name: Build services
      working-directory: project/backend
      run: npm run build:all

    - name: Run integration tests
      working-directory: project/backend
      run: npm run test:integration
      env:
        NODE_ENV: test
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: aitrading_test
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: test123
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # =============================================================================
  # DOCKER BUILD & PUSH
  # =============================================================================

  build:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security, integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        service: [api-gateway, central-hub, database-service, data-bridge]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: project/backend/${{ matrix.service }}
        file: project/backend/${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # =============================================================================
  # E2E TESTING
  # =============================================================================

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Compose
      working-directory: project/backend
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.dev.yml up -d

    - name: Wait for services
      run: |
        echo "Waiting for services to be ready..."
        sleep 60

    - name: Run health checks
      working-directory: project/backend
      run: node scripts/health-check.js

    - name: Run E2E tests
      working-directory: project/backend
      run: npm run test:e2e

    - name: Cleanup
      if: always()
      working-directory: project/backend
      run: docker-compose -f docker-compose.dev.yml down --volumes

  # =============================================================================
  # DEPLOYMENT (STAGING)
  # =============================================================================

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/staging/
        kubectl rollout status deployment/api-gateway-staging
        kubectl rollout status deployment/central-hub-staging
        kubectl rollout status deployment/database-service-staging
        kubectl rollout status deployment/data-bridge-staging

    - name: Run smoke tests
      run: |
        kubectl wait --for=condition=ready pod -l app=api-gateway --timeout=300s
        # Add smoke test commands here

  # =============================================================================
  # DEPLOYMENT (PRODUCTION)
  # =============================================================================

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Blue-Green Deployment
      run: |
        # Implement blue-green deployment strategy
        kubectl apply -f k8s/production/
        kubectl rollout status deployment/api-gateway-production
        kubectl rollout status deployment/central-hub-production
        kubectl rollout status deployment/database-service-production
        kubectl rollout status deployment/data-bridge-production

    - name: Production health check
      run: |
        kubectl wait --for=condition=ready pod -l app=api-gateway --timeout=600s
        # Add production health check commands here

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'AI Trading Platform deployed to production successfully!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # =============================================================================
  # MONITORING & ALERTS
  # =============================================================================

  monitoring:
    name: Setup Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Configure monitoring
      run: |
        # Configure Prometheus alerts
        # Setup Grafana dashboards
        # Configure log aggregation
        echo "Monitoring configuration completed"