user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging format
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;

    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 10M;

    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Hide nginx version
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 10240;
    gzip_proxied expired no-cache no-store private must-revalidate auth;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/x-javascript
        application/xml+rss
        application/javascript
        application/json;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=payment:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=webhook:10m rate=50r/s;

    # Upstream backend
    upstream payment_backend {
        server payment-service:3003;
        keepalive 32;
    }

    # HTTP to HTTPS redirect
    server {
        listen 80;
        server_name _;
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl http2;
        server_name payment.neliti.com;

        # SSL configuration
        ssl_certificate /etc/nginx/ssl/payment.crt;
        ssl_certificate_key /etc/nginx/ssl/payment.key;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;

        # Security headers for HTTPS
        add_header Content-Security-Policy "default-src 'self'; connect-src 'self' https://api.midtrans.com https://app.midtrans.com; img-src 'self' data: https:; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;

        # Health check endpoint
        location /health {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://payment_backend/health;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
        }

        # Webhook endpoint - higher rate limit, special handling
        location /api/payments/webhook {
            limit_req zone=webhook burst=100 nodelay;

            # Allow only POST method
            if ($request_method != POST) {
                return 405;
            }

            # Special headers for webhooks
            proxy_set_header X-Webhook-Source $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://payment_backend/api/payments/webhook;

            # Webhook specific timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # Payment creation endpoints - strict rate limiting
        location ~ ^/api/payments/?$ {
            limit_req zone=payment burst=3 nodelay;

            # Only allow authenticated requests
            if ($http_authorization = "") {
                return 401;
            }

            proxy_pass http://payment_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Preserve authentication headers
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-ID $http_x_user_id;
            proxy_set_header X-Service-Token $http_x_service_token;

            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # API endpoints - general rate limiting
        location /api/ {
            limit_req zone=api burst=10 nodelay;

            proxy_pass http://payment_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Preserve headers
            proxy_set_header Authorization $http_authorization;
            proxy_set_header X-User-ID $http_x_user_id;
            proxy_set_header X-Service-Token $http_x_service_token;
            proxy_set_header X-Midtrans-Signature $http_x_midtrans_signature;

            proxy_connect_timeout 5s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;

            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # Root endpoint
        location / {
            limit_req zone=api burst=5 nodelay;
            proxy_pass http://payment_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Security - deny access to sensitive files
        location ~ /\. {
            deny all;
            return 404;
        }

        location ~ \.(env|log|conf)$ {
            deny all;
            return 404;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;

        location = /404.html {
            internal;
            return 404 '{"success":false,"message":"Endpoint not found","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        location = /50x.html {
            internal;
            return 500 '{"success":false,"message":"Internal server error","timestamp":"$time_iso8601"}';
            add_header Content-Type application/json;
        }

        # Monitoring endpoints for load balancer health checks
        location /_nginx_health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }

    # Monitoring server (internal only)
    server {
        listen 8080;
        server_name localhost;

        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.20.0.0/16; # Docker network
            deny all;
        }
    }
}