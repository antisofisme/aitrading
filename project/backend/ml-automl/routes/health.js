/**
 * Health Check Route
 * Generated by Service Port Coordinator
 */

const express = require('express');
const router = express.Router();

// Health check endpoint
router.get('/health', async (req, res) => {
    try {
        const health = {
            status: 'healthy',
            timestamp: new Date().toISOString(),
            service: process.env.SERVICE_NAME || 'unknown',
            port: process.env.PORT || 'unknown',
            environment: process.env.NODE_ENV || 'development',
            uptime: process.uptime(),
            memory: process.memoryUsage(),
            version: process.env.npm_package_version || '1.0.0'
        };

        // Add database health if applicable
        if (global.dbPool) {
            try {
                const dbHealth = await global.dbPool.healthCheck();
                health.database = dbHealth;
            } catch (error) {
                health.database = { healthy: false, error: error.message };
                health.status = 'degraded';
            }
        }

        // Add Redis health if applicable
        if (global.redisClient) {
            try {
                await global.redisClient.ping();
                health.redis = { healthy: true };
            } catch (error) {
                health.redis = { healthy: false, error: error.message };
                health.status = 'degraded';
            }
        }

        res.json(health);
    } catch (error) {
        res.status(500).json({
            status: 'unhealthy',
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Readiness check
router.get('/ready', async (req, res) => {
    try {
        const readiness = {
            ready: true,
            timestamp: new Date().toISOString(),
            checks: []
        };

        // Database readiness
        if (global.dbPool) {
            try {
                await global.dbPool.healthCheck();
                readiness.checks.push({ name: 'database', ready: true });
            } catch (error) {
                readiness.checks.push({ name: 'database', ready: false, error: error.message });
                readiness.ready = false;
            }
        }

        res.json(readiness);
    } catch (error) {
        res.status(503).json({
            ready: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

module.exports = router;