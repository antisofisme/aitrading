/**
 * Standardized Error Handling
 * Generated by Service Port Coordinator
 */

class ErrorHandler {
    static handle(err, req, res, next) {
        console.error('Error:', err);

        // Default error response
        const errorResponse = {
            success: false,
            error: {
                message: err.message || 'Internal Server Error',
                type: err.name || 'Error',
                timestamp: new Date().toISOString(),
                path: req.path,
                method: req.method
            }
        };

        // Add error code if available
        if (err.code) {
            errorResponse.error.code = err.code;
        }

        // Add stack trace in development
        if (process.env.NODE_ENV === 'development') {
            errorResponse.error.stack = err.stack;
        }

        // Determine status code
        let statusCode = 500;

        if (err.name === 'ValidationError') statusCode = 400;
        if (err.name === 'UnauthorizedError') statusCode = 401;
        if (err.name === 'ForbiddenError') statusCode = 403;
        if (err.name === 'NotFoundError') statusCode = 404;
        if (err.name === 'ConflictError') statusCode = 409;
        if (err.name === 'TooManyRequestsError') statusCode = 429;
        if (err.statusCode) statusCode = err.statusCode;

        res.status(statusCode).json(errorResponse);
    }

    static notFound(req, res) {
        res.status(404).json({
            success: false,
            error: {
                message: 'Route not found',
                type: 'NotFoundError',
                path: req.path,
                method: req.method,
                timestamp: new Date().toISOString()
            }
        });
    }

    static createError(message, type = 'Error', statusCode = 500) {
        const error = new Error(message);
        error.name = type;
        error.statusCode = statusCode;
        return error;
    }
}

module.exports = ErrorHandler;