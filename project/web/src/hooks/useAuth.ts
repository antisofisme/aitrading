import { useState, useEffect, useContext, createContext, ReactNode } from 'react';\nimport { User, AuthState } from '@/types';\nimport { apiService } from '@/services/api';\nimport { wsService } from '@/services/websocket';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  error: string | null;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  refreshToken: () => Promise<void>;\n  clearError: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const [authState, setAuthState] = useState<AuthState>({\n    user: null,\n    token: null,\n    isAuthenticated: false,\n    isLoading: true,\n    error: null,\n  });\n\n  // Initialize auth state\n  useEffect(() => {\n    initializeAuth();\n  }, []);\n\n  // Auto refresh token\n  useEffect(() => {\n    if (authState.isAuthenticated && authState.token) {\n      const refreshInterval = setInterval(async () => {\n        try {\n          await refreshToken();\n        } catch (error) {\n          console.error('Auto refresh failed:', error);\n          logout();\n        }\n      }, 15 * 60 * 1000); // Refresh every 15 minutes\n\n      return () => clearInterval(refreshInterval);\n    }\n  }, [authState.isAuthenticated]);\n\n  const initializeAuth = async () => {\n    try {\n      setAuthState(prev => ({ ...prev, isLoading: true }));\n      \n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        setAuthState(prev => ({ ...prev, isLoading: false }));\n        return;\n      }\n\n      apiService.setAuthToken(token);\n      const user = await apiService.getCurrentUser();\n      \n      setAuthState({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // Initialize WebSocket with token\n      wsService.setAuthToken(token);\n      wsService.connect();\n      \n    } catch (error: any) {\n      console.error('Auth initialization failed:', error);\n      localStorage.removeItem('auth_token');\n      setAuthState({\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: error.message || 'Authentication failed',\n      });\n    }\n  };\n\n  const login = async (email: string, password: string) => {\n    try {\n      setAuthState(prev => ({ \n        ...prev, \n        isLoading: true, \n        error: null \n      }));\n\n      const { user, token } = await apiService.login(email, password);\n      \n      // Store token\n      localStorage.setItem('auth_token', token);\n      apiService.setAuthToken(token);\n      \n      setAuthState({\n        user,\n        token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null,\n      });\n\n      // Initialize WebSocket with token\n      wsService.setAuthToken(token);\n      wsService.connect();\n      \n    } catch (error: any) {\n      setAuthState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Login failed',\n      }));\n      throw error;\n    }\n  };\n\n  const logout = () => {\n    try {\n      // Call logout API (fire and forget)\n      apiService.logout().catch(console.error);\n    } finally {\n      // Clear local state regardless of API call result\n      localStorage.removeItem('auth_token');\n      apiService.clearAuth();\n      wsService.clearAuthToken();\n      wsService.disconnect();\n      \n      setAuthState({\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      });\n    }\n  };\n\n  const refreshToken = async () => {\n    try {\n      const { token: newToken } = await apiService.refreshToken();\n      \n      localStorage.setItem('auth_token', newToken);\n      apiService.setAuthToken(newToken);\n      wsService.setAuthToken(newToken);\n      \n      setAuthState(prev => ({\n        ...prev,\n        token: newToken,\n        error: null,\n      }));\n      \n    } catch (error: any) {\n      console.error('Token refresh failed:', error);\n      logout();\n      throw error;\n    }\n  };\n\n  const clearError = () => {\n    setAuthState(prev => ({ ...prev, error: null }));\n  };\n\n  const contextValue: AuthContextType = {\n    user: authState.user,\n    token: authState.token,\n    isAuthenticated: authState.isAuthenticated,\n    isLoading: authState.isLoading,\n    error: authState.error,\n    login,\n    logout,\n    refreshToken,\n    clearError,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\n// Helper hook for protected routes\nexport const useRequireAuth = () => {\n  const auth = useAuth();\n  \n  useEffect(() => {\n    if (!auth.isLoading && !auth.isAuthenticated) {\n      window.location.href = '/login';\n    }\n  }, [auth.isLoading, auth.isAuthenticated]);\n  \n  return auth;\n};\n\n// Helper hook for guest routes (redirect if authenticated)\nexport const useGuestOnly = () => {\n  const auth = useAuth();\n  \n  useEffect(() => {\n    if (!auth.isLoading && auth.isAuthenticated) {\n      window.location.href = '/dashboard';\n    }\n  }, [auth.isLoading, auth.isAuthenticated]);\n  \n  return auth;\n};