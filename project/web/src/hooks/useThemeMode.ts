import { useState, useEffect, useContext, createContext, ReactNode } from 'react';\nimport { ThemeProvider as MuiThemeProvider } from '@mui/material/styles';\nimport { CssBaseline } from '@mui/material';\nimport { lightTheme, darkTheme } from '@/theme';\n\ntype ThemeMode = 'light' | 'dark';\n\ninterface ThemeModeContextType {\n  mode: ThemeMode;\n  toggleMode: () => void;\n  setMode: (mode: ThemeMode) => void;\n}\n\nconst ThemeModeContext = createContext<ThemeModeContextType | undefined>(undefined);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\n  const [mode, setModeState] = useState<ThemeMode>('light');\n\n  // Initialize theme from localStorage or system preference\n  useEffect(() => {\n    const initializeTheme = () => {\n      // Check if dark mode is enabled in environment\n      const enableDarkMode = process.env.NEXT_PUBLIC_ENABLE_DARK_MODE === 'true';\n      \n      if (enableDarkMode) {\n        // Try to get saved preference\n        const savedMode = localStorage.getItem('theme-mode') as ThemeMode;\n        \n        if (savedMode && (savedMode === 'light' || savedMode === 'dark')) {\n          setModeState(savedMode);\n        } else {\n          // Use system preference\n          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n          setModeState(prefersDark ? 'dark' : 'light');\n        }\n      } else {\n        // Dark mode disabled, force light mode\n        setModeState('light');\n      }\n    };\n\n    initializeTheme();\n\n    // Listen for system theme changes\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    const handleChange = (e: MediaQueryListEvent) => {\n      // Only auto-switch if user hasn't set a preference\n      if (!localStorage.getItem('theme-mode')) {\n        setModeState(e.matches ? 'dark' : 'light');\n      }\n    };\n\n    mediaQuery.addEventListener('change', handleChange);\n    return () => mediaQuery.removeEventListener('change', handleChange);\n  }, []);\n\n  const setMode = (newMode: ThemeMode) => {\n    setModeState(newMode);\n    localStorage.setItem('theme-mode', newMode);\n  };\n\n  const toggleMode = () => {\n    const newMode = mode === 'light' ? 'dark' : 'light';\n    setMode(newMode);\n  };\n\n  const theme = mode === 'dark' ? darkTheme : lightTheme;\n\n  const contextValue: ThemeModeContextType = {\n    mode,\n    toggleMode,\n    setMode,\n  };\n\n  return (\n    <ThemeModeContext.Provider value={contextValue}>\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        {children}\n      </MuiThemeProvider>\n    </ThemeModeContext.Provider>\n  );\n};\n\nexport const useThemeMode = (): ThemeModeContextType => {\n  const context = useContext(ThemeModeContext);\n  if (context === undefined) {\n    throw new Error('useThemeMode must be used within a ThemeProvider');\n  }\n  return context;\n};\n\n// Helper hook to get current theme object\nexport const useCurrentTheme = () => {\n  const { mode } = useThemeMode();\n  return mode === 'dark' ? darkTheme : lightTheme;\n};\n\n// Helper hook for theme-aware styling\nexport const useThemeAwareStyles = () => {\n  const { mode } = useThemeMode();\n  const theme = useCurrentTheme();\n  \n  return {\n    mode,\n    theme,\n    isDark: mode === 'dark',\n    isLight: mode === 'light',\n  };\n};