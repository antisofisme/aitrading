import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  Chip,\n  LinearProgress,\n  useTheme,\n  alpha,\n  Button,\n  Stack,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AccountBalance,\n  ShowChart,\n  SmartToy,\n  Speed,\n  Refresh,\n} from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport DashboardLayout from '@/components/layout/DashboardLayout';\nimport { useRequireAuth } from '@/hooks/useAuth';\nimport { useWebSocket } from '@/services/websocket';\nimport { apiService } from '@/services/api';\nimport { MarketData, Position, TradingMetrics, AIPrediction } from '@/types';\nimport { formatCurrency, formatPercentage } from '@/utils/formatters';\nimport MarketOverview from '@/components/dashboard/MarketOverview';\nimport PositionsWidget from '@/components/dashboard/PositionsWidget';\nimport AIInsightsWidget from '@/components/dashboard/AIInsightsWidget';\nimport PerformanceChart from '@/components/dashboard/PerformanceChart';\n\nconst DashboardPage: React.FC = () => {\n  const theme = useTheme();\n  const router = useRouter();\n  const { user } = useRequireAuth();\n  const { isConnected, subscribeToTradingUpdates, subscribeToAIPredictions } = useWebSocket();\n\n  // State\n  const [marketData, setMarketData] = useState<MarketData[]>([]);\n  const [positions, setPositions] = useState<Position[]>([]);\n  const [tradingMetrics, setTradingMetrics] = useState<TradingMetrics | null>(null);\n  const [aiPredictions, setAIPredictions] = useState<AIPrediction[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [lastUpdate, setLastUpdate] = useState<Date>(new Date());\n\n  // Fetch initial data\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        setIsLoading(true);\n        \n        const [marketResponse, positionsResponse, metricsResponse, predictionsResponse] = await Promise.allSettled([\n          apiService.getMarketData(['EURUSD', 'GBPUSD', 'USDJPY', 'AUDUSD']),\n          apiService.getPositions(),\n          apiService.getTradingMetrics(),\n          apiService.getAIPredictions(),\n        ]);\n\n        if (marketResponse.status === 'fulfilled') {\n          setMarketData(marketResponse.value);\n        }\n        \n        if (positionsResponse.status === 'fulfilled') {\n          setPositions(positionsResponse.value);\n        }\n        \n        if (metricsResponse.status === 'fulfilled') {\n          setTradingMetrics(metricsResponse.value);\n        }\n        \n        if (predictionsResponse.status === 'fulfilled') {\n          setAIPredictions(predictionsResponse.value);\n        }\n        \n        setLastUpdate(new Date());\n      } catch (error) {\n        console.error('Failed to fetch dashboard data:', error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, []);\n\n  // Subscribe to real-time updates\n  useEffect(() => {\n    if (isConnected()) {\n      subscribeToTradingUpdates();\n      subscribeToAIPredictions();\n    }\n  }, [isConnected]);\n\n  // Calculate portfolio summary\n  const portfolioSummary = {\n    totalValue: positions.reduce((sum, pos) => sum + (pos.volume * pos.currentPrice), 0),\n    totalProfit: positions.reduce((sum, pos) => sum + pos.profit, 0),\n    openPositions: positions.length,\n    profitablePositions: positions.filter(pos => pos.profit > 0).length,\n  };\n\n  const profitabilityRate = portfolioSummary.openPositions > 0 \n    ? (portfolioSummary.profitablePositions / portfolioSummary.openPositions) * 100 \n    : 0;\n\n  // Refresh handler\n  const handleRefresh = async () => {\n    setIsLoading(true);\n    try {\n      const [metrics, positions] = await Promise.all([\n        apiService.getTradingMetrics(),\n        apiService.getPositions(),\n      ]);\n      setTradingMetrics(metrics);\n      setPositions(positions);\n      setLastUpdate(new Date());\n    } catch (error) {\n      console.error('Failed to refresh data:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <Head>\n        <title>Dashboard - AI Trading Platform</title>\n        <meta name=\"description\" content=\"Real-time trading dashboard with AI insights and portfolio analytics\" />\n      </Head>\n      \n      <DashboardLayout title=\"Dashboard\">\n        {/* Header */}\n        <Box sx={{ mb: 3 }}>\n          <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\" mb={2}>\n            <Box>\n              <Typography variant=\"h4\" fontWeight={600} gutterBottom>\n                Welcome back, {user?.firstName || user?.username}!\n              </Typography>\n              <Typography variant=\"body1\" color=\"text.secondary\">\n                Last updated: {lastUpdate.toLocaleTimeString()}\n              </Typography>\n            </Box>\n            \n            <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n              <Chip\n                icon={isConnected() ? <Speed /> : <Speed />}\n                label={isConnected() ? 'Live Data' : 'Disconnected'}\n                color={isConnected() ? 'success' : 'error'}\n                variant=\"outlined\"\n              />\n              <Button\n                variant=\"outlined\"\n                startIcon={<Refresh />}\n                onClick={handleRefresh}\n                disabled={isLoading}\n              >\n                Refresh\n              </Button>\n            </Stack>\n          </Box>\n        </Box>\n\n        {/* Loading indicator */}\n        {isLoading && (\n          <LinearProgress sx={{ mb: 2, borderRadius: 1 }} />\n        )}\n\n        {/* Key Metrics Cards */}\n        <Grid container spacing={3} sx={{ mb: 3 }}>\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                      Portfolio Value\n                    </Typography>\n                    <Typography variant=\"h5\" fontWeight={600}>\n                      {formatCurrency(portfolioSummary.totalValue)}\n                    </Typography>\n                  </Box>\n                  <AccountBalance color=\"primary\" sx={{ fontSize: 32 }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                      Today's P&L\n                    </Typography>\n                    <Typography\n                      variant=\"h5\"\n                      fontWeight={600}\n                      color={portfolioSummary.totalProfit >= 0 ? 'success.main' : 'error.main'}\n                    >\n                      {portfolioSummary.totalProfit >= 0 ? '+' : ''}\n                      {formatCurrency(portfolioSummary.totalProfit)}\n                    </Typography>\n                  </Box>\n                  {portfolioSummary.totalProfit >= 0 ? (\n                    <TrendingUp color=\"success\" sx={{ fontSize: 32 }} />\n                  ) : (\n                    <TrendingDown color=\"error\" sx={{ fontSize: 32 }} />\n                  )}\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                      Open Positions\n                    </Typography>\n                    <Typography variant=\"h5\" fontWeight={600}>\n                      {portfolioSummary.openPositions}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {formatPercentage(profitabilityRate)} profitable\n                    </Typography>\n                  </Box>\n                  <ShowChart color=\"info\" sx={{ fontSize: 32 }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n\n          <Grid item xs={12} sm={6} md={3}>\n            <Card>\n              <CardContent>\n                <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Typography color=\"text.secondary\" variant=\"body2\">\n                      AI Signals\n                    </Typography>\n                    <Typography variant=\"h5\" fontWeight={600}>\n                      {aiPredictions.filter(p => p.status === 'active').length}\n                    </Typography>\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Active predictions\n                    </Typography>\n                  </Box>\n                  <SmartToy color=\"secondary\" sx={{ fontSize: 32 }} />\n                </Box>\n              </CardContent>\n            </Card>\n          </Grid>\n        </Grid>\n\n        {/* Main Content Grid */}\n        <Grid container spacing={3}>\n          {/* Market Overview */}\n          <Grid item xs={12} lg={8}>\n            <MarketOverview marketData={marketData} />\n          </Grid>\n\n          {/* AI Insights */}\n          <Grid item xs={12} lg={4}>\n            <AIInsightsWidget predictions={aiPredictions} />\n          </Grid>\n\n          {/* Performance Chart */}\n          <Grid item xs={12} lg={8}>\n            <PerformanceChart tradingMetrics={tradingMetrics} />\n          </Grid>\n\n          {/* Positions */}\n          <Grid item xs={12} lg={4}>\n            <PositionsWidget positions={positions} />\n          </Grid>\n        </Grid>\n      </DashboardLayout>\n    </>\n  );\n};\n\nexport default DashboardPage;"