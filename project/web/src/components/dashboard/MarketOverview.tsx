import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Chip,\n  IconButton,\n  Tooltip,\n  useTheme,\n  alpha,\n  Skeleton,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  ShowChart,\n  Refresh,\n  Fullscreen,\n} from '@mui/icons-material';\nimport { MarketData } from '@/types';\nimport { formatForexPrice, formatPercentage, formatSymbol } from '@/utils/formatters';\nimport { useWebSocket } from '@/services/websocket';\n\ninterface MarketOverviewProps {\n  marketData: MarketData[];\n}\n\nconst MarketOverview: React.FC<MarketOverviewProps> = ({ marketData }) => {\n  const theme = useTheme();\n  const { isConnected, on, off } = useWebSocket();\n  const [realTimeData, setRealTimeData] = useState<MarketData[]>(marketData);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Update real-time data when props change\n  useEffect(() => {\n    setRealTimeData(marketData);\n  }, [marketData]);\n\n  // Subscribe to real-time market data\n  useEffect(() => {\n    const handleMarketData = (data: MarketData) => {\n      setRealTimeData(prev => {\n        const index = prev.findIndex(item => item.symbol === data.symbol);\n        if (index !== -1) {\n          const updated = [...prev];\n          updated[index] = { ...updated[index], ...data };\n          return updated;\n        }\n        return [...prev, data];\n      });\n      setLastUpdated(new Date());\n    };\n\n    const handleTick = (data: any) => {\n      if (data.symbol) {\n        const marketDataItem: MarketData = {\n          symbol: data.symbol,\n          bid: data.bid,\n          ask: data.ask,\n          spread: data.ask - data.bid,\n          timestamp: new Date(data.time || Date.now()),\n          volume: data.volume,\n        };\n        handleMarketData(marketDataItem);\n      }\n    };\n\n    if (isConnected()) {\n      on('market_data', handleMarketData);\n      on('tick', handleTick);\n    }\n\n    return () => {\n      off('market_data', handleMarketData);\n      off('tick', handleTick);\n    };\n  }, [isConnected, on, off]);\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    // Simulate refresh\n    setTimeout(() => {\n      setIsLoading(false);\n      setLastUpdated(new Date());\n    }, 1000);\n  };\n\n  const getSpreadColor = (spread: number, symbol: string) => {\n    // Typical spreads: EUR/USD: 1-3 pips, GBP/USD: 2-4 pips, USD/JPY: 1-3 pips\n    const isJPY = symbol.includes('JPY');\n    const highSpread = isJPY ? 0.03 : 0.0003; // 3 pips for JPY pairs, 3 pips for others\n    \n    if (spread <= highSpread * 0.5) {\n      return theme.palette.success.main;\n    } else if (spread <= highSpread) {\n      return theme.palette.warning.main;\n    } else {\n      return theme.palette.error.main;\n    }\n  };\n\n  const formatSpread = (spread: number, symbol: string) => {\n    const isJPY = symbol.includes('JPY');\n    const pips = isJPY ? spread * 100 : spread * 10000;\n    return `${pips.toFixed(1)} pips`;\n  };\n\n  const getChangeDirection = (current: number, previous: number) => {\n    if (current > previous) return 'up';\n    if (current < previous) return 'down';\n    return 'neutral';\n  };\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Market Overview\"\n        subheader={`Last updated: ${lastUpdated.toLocaleTimeString()}`}\n        action={\n          <Box>\n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={handleRefresh} disabled={isLoading}>\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Expand\">\n              <IconButton>\n                <Fullscreen />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        }\n        sx={{\n          '& .MuiCardHeader-title': {\n            fontSize: '1.25rem',\n            fontWeight: 600,\n          },\n        }}\n      />\n      \n      <CardContent sx={{ pt: 0 }}>\n        {/* Connection Status */}\n        <Box sx={{ mb: 2 }}>\n          <Chip\n            icon={isConnected() ? <TrendingUp /> : <TrendingDown />}\n            label={isConnected() ? 'Live Data' : 'Disconnected'}\n            color={isConnected() ? 'success' : 'error'}\n            size=\"small\"\n            variant=\"outlined\"\n          />\n        </Box>\n\n        {/* Market Data Table */}\n        <TableContainer>\n          <Table size=\"small\">\n            <TableHead>\n              <TableRow>\n                <TableCell sx={{ fontWeight: 600 }}>Symbol</TableCell>\n                <TableCell align=\"right\" sx={{ fontWeight: 600 }}>Bid</TableCell>\n                <TableCell align=\"right\" sx={{ fontWeight: 600 }}>Ask</TableCell>\n                <TableCell align=\"right\" sx={{ fontWeight: 600 }}>Spread</TableCell>\n                <TableCell align=\"right\" sx={{ fontWeight: 600 }}>Change</TableCell>\n                <TableCell align=\"center\" sx={{ fontWeight: 600 }}>Trend</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {realTimeData.length === 0 ? (\n                // Loading skeleton\n                Array.from({ length: 4 }).map((_, index) => (\n                  <TableRow key={index}>\n                    <TableCell><Skeleton width={80} /></TableCell>\n                    <TableCell align=\"right\"><Skeleton width={60} /></TableCell>\n                    <TableCell align=\"right\"><Skeleton width={60} /></TableCell>\n                    <TableCell align=\"right\"><Skeleton width={50} /></TableCell>\n                    <TableCell align=\"right\"><Skeleton width={40} /></TableCell>\n                    <TableCell align=\"center\"><Skeleton width={24} height={24} variant=\"circular\" /></TableCell>\n                  </TableRow>\n                ))\n              ) : (\n                realTimeData.map((data, index) => {\n                  const prevData = marketData.find(item => item.symbol === data.symbol);\n                  const bidDirection = prevData ? getChangeDirection(data.bid, prevData.bid) : 'neutral';\n                  const askDirection = prevData ? getChangeDirection(data.ask, prevData.ask) : 'neutral';\n                  \n                  return (\n                    <TableRow\n                      key={data.symbol}\n                      sx={{\n                        '&:hover': {\n                          bgcolor: alpha(theme.palette.primary.main, 0.05),\n                        },\n                      }}\n                    >\n                      <TableCell>\n                        <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                          <Typography variant=\"body2\" fontWeight={600}>\n                            {formatSymbol(data.symbol)}\n                          </Typography>\n                        </Box>\n                      </TableCell>\n                      \n                      <TableCell align=\"right\">\n                        <Box\n                          sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'flex-end',\n                            gap: 0.5,\n                            color: bidDirection === 'up' ? 'success.main' : \n                                   bidDirection === 'down' ? 'error.main' : 'inherit',\n                          }}\n                        >\n                          <Typography variant=\"body2\" fontFamily=\"monospace\">\n                            {formatForexPrice(data.bid, data.symbol)}\n                          </Typography>\n                          {bidDirection !== 'neutral' && (\n                            bidDirection === 'up' ? \n                              <TrendingUp sx={{ fontSize: 16 }} /> : \n                              <TrendingDown sx={{ fontSize: 16 }} />\n                          )}\n                        </Box>\n                      </TableCell>\n                      \n                      <TableCell align=\"right\">\n                        <Box\n                          sx={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'flex-end',\n                            gap: 0.5,\n                            color: askDirection === 'up' ? 'success.main' : \n                                   askDirection === 'down' ? 'error.main' : 'inherit',\n                          }}\n                        >\n                          <Typography variant=\"body2\" fontFamily=\"monospace\">\n                            {formatForexPrice(data.ask, data.symbol)}\n                          </Typography>\n                          {askDirection !== 'neutral' && (\n                            askDirection === 'up' ? \n                              <TrendingUp sx={{ fontSize: 16 }} /> : \n                              <TrendingDown sx={{ fontSize: 16 }} />\n                          )}\n                        </Box>\n                      </TableCell>\n                      \n                      <TableCell align=\"right\">\n                        <Typography\n                          variant=\"body2\"\n                          sx={{\n                            color: getSpreadColor(data.spread, data.symbol),\n                            fontFamily: 'monospace',\n                          }}\n                        >\n                          {formatSpread(data.spread, data.symbol)}\n                        </Typography>\n                      </TableCell>\n                      \n                      <TableCell align=\"right\">\n                        {prevData && (\n                          <Typography\n                            variant=\"body2\"\n                            sx={{\n                              color: data.bid > prevData.bid ? 'success.main' : \n                                     data.bid < prevData.bid ? 'error.main' : 'text.secondary',\n                              fontFamily: 'monospace',\n                            }}\n                          >\n                            {data.bid > prevData.bid ? '+' : ''}\n                            {formatPercentage(\n                              ((data.bid - prevData.bid) / prevData.bid) * 100\n                            )}\n                          </Typography>\n                        )}\n                      </TableCell>\n                      \n                      <TableCell align=\"center\">\n                        <IconButton size=\"small\" color=\"primary\">\n                          <ShowChart sx={{ fontSize: 20 }} />\n                        </IconButton>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })\n              )}\n            </TableBody>\n          </Table>\n        </TableContainer>\n\n        {realTimeData.length === 0 && !isLoading && (\n          <Box\n            sx={{\n              textAlign: 'center',\n              py: 4,\n              color: 'text.secondary',\n            }}\n          >\n            <Typography variant=\"body2\">\n              No market data available\n            </Typography>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default MarketOverview;"