import React, { useState, useMemo } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  ToggleButton,\n  ToggleButtonGroup,\n  IconButton,\n  Tooltip,\n  useTheme,\n  alpha,\n  Skeleton,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  ShowChart,\n  BarChart,\n  Refresh,\n  Fullscreen,\n} from '@mui/icons-material';\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip as RechartsTooltip,\n  ResponsiveContainer,\n  ReferenceLine,\n} from 'recharts';\nimport { TradingMetrics } from '@/types';\nimport { formatCurrency, formatPercentage, formatDateTime } from '@/utils/formatters';\n\ninterface PerformanceChartProps {\n  tradingMetrics: TradingMetrics | null;\n}\n\ntype ChartType = 'line' | 'area';\ntype TimeFrame = '1D' | '1W' | '1M' | '3M';\n\nconst PerformanceChart: React.FC<PerformanceChartProps> = ({ tradingMetrics }) => {\n  const theme = useTheme();\n  const [chartType, setChartType] = useState<ChartType>('area');\n  const [timeFrame, setTimeFrame] = useState<TimeFrame>('1W');\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Generate sample performance data\n  const performanceData = useMemo(() => {\n    const baseData = [];\n    const now = new Date();\n    const dataPoints = {\n      '1D': 24,\n      '1W': 7 * 24,\n      '1M': 30,\n      '3M': 90,\n    };\n    \n    const points = dataPoints[timeFrame];\n    const interval = timeFrame === '1D' ? 60 * 60 * 1000 : // 1 hour\n                    timeFrame === '1W' ? 60 * 60 * 1000 : // 1 hour\n                    24 * 60 * 60 * 1000; // 1 day\n    \n    let cumulativeReturn = 0;\n    let currentBalance = 10000; // Starting balance\n    \n    for (let i = 0; i < points; i++) {\n      const timestamp = new Date(now.getTime() - (points - i) * interval);\n      \n      // Generate realistic trading performance data\n      const dailyReturn = (Math.random() - 0.48) * 0.02; // Slightly positive bias\n      cumulativeReturn += dailyReturn;\n      currentBalance *= (1 + dailyReturn);\n      \n      const winRate = 0.6 + (Math.random() - 0.5) * 0.2; // 50-70%\n      const sharpeRatio = 1.2 + (Math.random() - 0.5) * 0.8; // 0.8-1.6\n      \n      baseData.push({\n        timestamp: timestamp.getTime(),\n        date: formatDateTime(timestamp, { \n          month: 'short', \n          day: 'numeric',\n          ...(timeFrame === '1D' ? { hour: '2-digit' } : {})\n        }),\n        balance: currentBalance,\n        return: cumulativeReturn * 100,\n        dailyReturn: dailyReturn * 100,\n        winRate: winRate * 100,\n        sharpeRatio,\n        drawdown: Math.random() * -5, // 0-5% drawdown\n        trades: Math.floor(Math.random() * 10) + 1,\n      });\n    }\n    \n    return baseData;\n  }, [timeFrame]);\n\n  const handleChartTypeChange = (_, newType: ChartType | null) => {\n    if (newType) {\n      setChartType(newType);\n    }\n  };\n\n  const handleTimeFrameChange = (_, newTimeFrame: TimeFrame | null) => {\n    if (newTimeFrame) {\n      setTimeFrame(newTimeFrame);\n      setIsLoading(true);\n      // Simulate loading\n      setTimeout(() => setIsLoading(false), 500);\n    }\n  };\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    setTimeout(() => setIsLoading(false), 1000);\n  };\n\n  const currentPerformance = performanceData[performanceData.length - 1];\n  const startPerformance = performanceData[0];\n  const totalReturn = currentPerformance ? currentPerformance.return - startPerformance.return : 0;\n  const isPositive = totalReturn >= 0;\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <Box\n          sx={{\n            bgcolor: 'background.paper',\n            border: `1px solid ${theme.palette.divider}`,\n            borderRadius: 1,\n            p: 1.5,\n            boxShadow: theme.shadows[4],\n          }}\n        >\n          <Typography variant=\"body2\" fontWeight={600} gutterBottom>\n            {data.date}\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Balance: {formatCurrency(data.balance)}\n          </Typography>\n          <Typography \n            variant=\"body2\"\n            sx={{ color: data.return >= 0 ? 'success.main' : 'error.main' }}\n          >\n            Return: {data.return >= 0 ? '+' : ''}{data.return.toFixed(2)}%\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Trades: {data.trades}\n          </Typography>\n        </Box>\n      );\n    }\n    return null;\n  };\n\n  const ChartComponent = chartType === 'area' ? AreaChart : LineChart;\n  const DataComponent = chartType === 'area' ? Area : Line;\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Performance Analytics\"\n        subheader={tradingMetrics ? `Last updated: ${new Date().toLocaleTimeString()}` : 'Loading...'}\n        action={\n          <Box display=\"flex\" alignItems=\"center\" gap={1}>\n            <ToggleButtonGroup\n              value={chartType}\n              exclusive\n              onChange={handleChartTypeChange}\n              size=\"small\"\n            >\n              <ToggleButton value=\"line\">\n                <ShowChart sx={{ fontSize: 18 }} />\n              </ToggleButton>\n              <ToggleButton value=\"area\">\n                <BarChart sx={{ fontSize: 18 }} />\n              </ToggleButton>\n            </ToggleButtonGroup>\n            \n            <Tooltip title=\"Refresh\">\n              <IconButton onClick={handleRefresh} disabled={isLoading}>\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n            \n            <Tooltip title=\"Fullscreen\">\n              <IconButton>\n                <Fullscreen />\n              </IconButton>\n            </Tooltip>\n          </Box>\n        }\n        sx={{\n          '& .MuiCardHeader-title': {\n            fontSize: '1.25rem',\n            fontWeight: 600,\n          },\n        }}\n      />\n      \n      <CardContent sx={{ pt: 0 }}>\n        {/* Performance Summary */}\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            p: 2,\n            mb: 2,\n            borderRadius: 2,\n            bgcolor: alpha(\n              isPositive ? theme.palette.success.main : theme.palette.error.main,\n              0.1\n            ),\n            border: `1px solid ${alpha(\n              isPositive ? theme.palette.success.main : theme.palette.error.main,\n              0.2\n            )}`,\n          }}\n        >\n          <Box>\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Total Return ({timeFrame})\n            </Typography>\n            <Typography\n              variant=\"h5\"\n              fontWeight={600}\n              sx={{\n                color: isPositive ? 'success.main' : 'error.main',\n                display: 'flex',\n                alignItems: 'center',\n                gap: 0.5,\n              }}\n            >\n              {isPositive ? <TrendingUp /> : <TrendingUp sx={{ transform: 'rotate(180deg)' }} />}\n              {isPositive ? '+' : ''}{formatPercentage(totalReturn)}\n            </Typography>\n          </Box>\n          \n          <Box textAlign=\"right\">\n            <Typography variant=\"body2\" color=\"text.secondary\">\n              Current Balance\n            </Typography>\n            <Typography variant=\"h6\" fontWeight={600}>\n              {currentPerformance ? formatCurrency(currentPerformance.balance) : 'Loading...'}\n            </Typography>\n          </Box>\n        </Box>\n\n        {/* Time Frame Selector */}\n        <Box sx={{ mb: 2 }}>\n          <ToggleButtonGroup\n            value={timeFrame}\n            exclusive\n            onChange={handleTimeFrameChange}\n            size=\"small\"\n          >\n            <ToggleButton value=\"1D\">1D</ToggleButton>\n            <ToggleButton value=\"1W\">1W</ToggleButton>\n            <ToggleButton value=\"1M\">1M</ToggleButton>\n            <ToggleButton value=\"3M\">3M</ToggleButton>\n          </ToggleButtonGroup>\n        </Box>\n\n        {/* Chart */}\n        <Box sx={{ height: 300, width: '100%' }}>\n          {isLoading ? (\n            <Skeleton variant=\"rectangular\" height={300} sx={{ borderRadius: 2 }} />\n          ) : (\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <ChartComponent data={performanceData}>\n                <CartesianGrid \n                  strokeDasharray=\"3 3\" \n                  stroke={alpha(theme.palette.text.secondary, 0.2)}\n                />\n                <XAxis \n                  dataKey=\"date\"\n                  tick={{ fontSize: 12, fill: theme.palette.text.secondary }}\n                  axisLine={{ stroke: theme.palette.divider }}\n                />\n                <YAxis \n                  tick={{ fontSize: 12, fill: theme.palette.text.secondary }}\n                  axisLine={{ stroke: theme.palette.divider }}\n                  domain={['dataMin - 1', 'dataMax + 1']}\n                  tickFormatter={(value) => `${value.toFixed(1)}%`}\n                />\n                <RechartsTooltip content={<CustomTooltip />} />\n                <ReferenceLine \n                  y={0} \n                  stroke={theme.palette.text.secondary} \n                  strokeDasharray=\"2 2\"\n                />\n                {chartType === 'area' ? (\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"return\"\n                    stroke={isPositive ? theme.palette.success.main : theme.palette.error.main}\n                    fill={alpha(\n                      isPositive ? theme.palette.success.main : theme.palette.error.main,\n                      0.2\n                    )}\n                    strokeWidth={2}\n                  />\n                ) : (\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"return\"\n                    stroke={isPositive ? theme.palette.success.main : theme.palette.error.main}\n                    strokeWidth={2}\n                    dot={false}\n                    activeDot={{ r: 4, fill: theme.palette.primary.main }}\n                  />\n                )}\n              </ChartComponent>\n            </ResponsiveContainer>\n          )}\n        </Box>\n\n        {/* Key Metrics */}\n        {tradingMetrics && (\n          <Box sx={{ mt: 2 }}>\n            <Typography variant=\"subtitle2\" gutterBottom fontWeight={600}>\n              Key Metrics\n            </Typography>\n            <Box\n              sx={{\n                display: 'grid',\n                gridTemplateColumns: 'repeat(auto-fit, minmax(120px, 1fr))',\n                gap: 2,\n                p: 2,\n                bgcolor: alpha(theme.palette.background.default, 0.5),\n                borderRadius: 2,\n              }}\n            >\n              <Box>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Win Rate\n                </Typography>\n                <Typography variant=\"body2\" fontWeight={600}>\n                  {formatPercentage(tradingMetrics.successRate)}\n                </Typography>\n              </Box>\n              \n              <Box>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Total Volume\n                </Typography>\n                <Typography variant=\"body2\" fontWeight={600}>\n                  {tradingMetrics.totalVolume.toFixed(2)}\n                </Typography>\n              </Box>\n              \n              <Box>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Risk Score\n                </Typography>\n                <Typography variant=\"body2\" fontWeight={600}>\n                  {tradingMetrics.riskScore.toFixed(1)}/10\n                </Typography>\n              </Box>\n              \n              <Box>\n                <Typography variant=\"caption\" color=\"text.secondary\">\n                  Open Positions\n                </Typography>\n                <Typography variant=\"body2\" fontWeight={600}>\n                  {tradingMetrics.openPositions}\n                </Typography>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PerformanceChart;"