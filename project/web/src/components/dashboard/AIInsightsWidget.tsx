import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  Chip,\n  IconButton,\n  Button,\n  Tooltip,\n  useTheme,\n  alpha,\n  Stack,\n  Avatar,\n  Skeleton,\n} from '@mui/material';\nimport {\n  SmartToy,\n  TrendingUp,\n  TrendingDown,\n  Schedule,\n  Refresh,\n  Psychology,\n  AutoAwesome,\n  InfoOutlined,\n} from '@mui/icons-material';\nimport { AIPrediction, PredictionDirection, PredictionStatus } from '@/types';\nimport { formatSymbol, formatConfidence, formatRelativeTime } from '@/utils/formatters';\nimport { useWebSocket } from '@/services/websocket';\n\ninterface AIInsightsWidgetProps {\n  predictions: AIPrediction[];\n}\n\nconst AIInsightsWidget: React.FC<AIInsightsWidgetProps> = ({ predictions }) => {\n  const theme = useTheme();\n  const { isConnected, on, off } = useWebSocket();\n  const [realTimePredictions, setRealTimePredictions] = useState<AIPrediction[]>(predictions);\n  const [isLoading, setIsLoading] = useState(false);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  // Update real-time predictions when props change\n  useEffect(() => {\n    setRealTimePredictions(predictions);\n  }, [predictions]);\n\n  // Subscribe to real-time AI predictions\n  useEffect(() => {\n    const handleAIPrediction = (data: AIPrediction) => {\n      setRealTimePredictions(prev => {\n        const index = prev.findIndex(pred => pred.id === data.id);\n        if (index !== -1) {\n          const updated = [...prev];\n          updated[index] = { ...updated[index], ...data };\n          return updated;\n        }\n        return [data, ...prev].slice(0, 10); // Keep only latest 10\n      });\n      setLastUpdated(new Date());\n    };\n\n    if (isConnected()) {\n      on('ai_prediction', handleAIPrediction);\n    }\n\n    return () => {\n      off('ai_prediction', handleAIPrediction);\n    };\n  }, [isConnected, on, off]);\n\n  const getDirectionIcon = (direction: PredictionDirection) => {\n    switch (direction) {\n      case PredictionDirection.BUY:\n        return <TrendingUp sx={{ fontSize: 20, color: 'success.main' }} />;\n      case PredictionDirection.SELL:\n        return <TrendingDown sx={{ fontSize: 20, color: 'error.main' }} />;\n      case PredictionDirection.HOLD:\n      default:\n        return <Schedule sx={{ fontSize: 20, color: 'warning.main' }} />;\n    }\n  };\n\n  const getDirectionColor = (direction: PredictionDirection) => {\n    switch (direction) {\n      case PredictionDirection.BUY:\n        return theme.palette.success.main;\n      case PredictionDirection.SELL:\n        return theme.palette.error.main;\n      case PredictionDirection.HOLD:\n      default:\n        return theme.palette.warning.main;\n    }\n  };\n\n  const getConfidenceColor = (confidence: number) => {\n    if (confidence >= 0.8) return theme.palette.success.main;\n    if (confidence >= 0.6) return theme.palette.info.main;\n    if (confidence >= 0.4) return theme.palette.warning.main;\n    return theme.palette.error.main;\n  };\n\n  const getStatusChip = (status: PredictionStatus) => {\n    const config = {\n      [PredictionStatus.ACTIVE]: { label: 'Active', color: 'success' as const },\n      [PredictionStatus.EXECUTED]: { label: 'Executed', color: 'info' as const },\n      [PredictionStatus.EXPIRED]: { label: 'Expired', color: 'default' as const },\n      [PredictionStatus.CANCELLED]: { label: 'Cancelled', color: 'error' as const },\n    };\n\n    return (\n      <Chip\n        label={config[status].label}\n        color={config[status].color}\n        size=\"small\"\n        variant=\"outlined\"\n      />\n    );\n  };\n\n  const handleRefresh = () => {\n    setIsLoading(true);\n    // Simulate refresh\n    setTimeout(() => {\n      setIsLoading(false);\n      setLastUpdated(new Date());\n    }, 1000);\n  };\n\n  const activePredictions = realTimePredictions.filter(p => p.status === PredictionStatus.ACTIVE);\n  const averageConfidence = activePredictions.length > 0 \n    ? activePredictions.reduce((sum, p) => sum + p.confidence, 0) / activePredictions.length\n    : 0;\n\n  return (\n    <Card>\n      <CardHeader\n        avatar={\n          <Avatar\n            sx={{\n              bgcolor: alpha(theme.palette.secondary.main, 0.1),\n              color: 'secondary.main',\n            }}\n          >\n            <SmartToy />\n          </Avatar>\n        }\n        title=\"AI Insights\"\n        subheader={`${activePredictions.length} active signal${activePredictions.length !== 1 ? 's' : ''}`}\n        action={\n          <Tooltip title=\"Refresh AI Analysis\">\n            <IconButton onClick={handleRefresh} disabled={isLoading}>\n              <Refresh />\n            </IconButton>\n          </Tooltip>\n        }\n        sx={{\n          '& .MuiCardHeader-title': {\n            fontSize: '1.25rem',\n            fontWeight: 600,\n          },\n        }}\n      />\n      \n      <CardContent sx={{ pt: 0 }}>\n        {/* AI Summary */}\n        <Box\n          sx={{\n            p: 2,\n            mb: 2,\n            borderRadius: 2,\n            bgcolor: alpha(theme.palette.secondary.main, 0.05),\n            border: `1px solid ${alpha(theme.palette.secondary.main, 0.2)}`,\n          }}\n        >\n          <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n            <Box>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Avg. Confidence\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                fontWeight={600}\n                sx={{ color: getConfidenceColor(averageConfidence) }}\n              >\n                {formatConfidence(averageConfidence)}\n              </Typography>\n            </Box>\n            \n            <Box>\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                Last Update\n              </Typography>\n              <Typography variant=\"body2\">\n                {formatRelativeTime(lastUpdated)}\n              </Typography>\n            </Box>\n          </Stack>\n        </Box>\n\n        {/* Predictions List */}\n        {isLoading ? (\n          // Loading skeleton\n          <List disablePadding>\n            {Array.from({ length: 3 }).map((_, index) => (\n              <ListItem key={index} sx={{ px: 0, py: 1 }}>\n                <Box sx={{ width: '100%' }}>\n                  <Box display=\"flex\" alignItems=\"center\" gap={1} mb={1}>\n                    <Skeleton variant=\"circular\" width={32} height={32} />\n                    <Skeleton width={80} height={20} />\n                    <Skeleton width={60} height={24} />\n                  </Box>\n                  <Skeleton width=\"100%\" height={16} />\n                  <Skeleton width=\"60%\" height={14} sx={{ mt: 0.5 }} />\n                </Box>\n              </ListItem>\n            ))}\n          </List>\n        ) : realTimePredictions.length === 0 ? (\n          <Box\n            sx={{\n              textAlign: 'center',\n              py: 4,\n              color: 'text.secondary',\n            }}\n          >\n            <Psychology sx={{ fontSize: 48, mb: 2, opacity: 0.5 }} />\n            <Typography variant=\"body2\" gutterBottom>\n              No AI predictions available\n            </Typography>\n            <Typography variant=\"caption\">\n              AI is analyzing market conditions...\n            </Typography>\n          </Box>\n        ) : (\n          <List disablePadding>\n            {realTimePredictions.slice(0, 6).map((prediction, index) => (\n              <ListItem\n                key={prediction.id}\n                disablePadding\n                sx={{\n                  py: 1.5,\n                  px: 2,\n                  mb: 1,\n                  borderRadius: 2,\n                  border: `1px solid ${theme.palette.divider}`,\n                  '&:hover': {\n                    bgcolor: alpha(theme.palette.action.hover, 0.5),\n                  },\n                }}\n              >\n                <Box sx={{ width: '100%' }}>\n                  {/* Header */}\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      mb: 1,\n                    }}\n                  >\n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <Avatar\n                        sx={{\n                          width: 32,\n                          height: 32,\n                          bgcolor: alpha(getDirectionColor(prediction.direction), 0.1),\n                          color: getDirectionColor(prediction.direction),\n                        }}\n                      >\n                        {getDirectionIcon(prediction.direction)}\n                      </Avatar>\n                      \n                      <Box>\n                        <Typography variant=\"subtitle2\" fontWeight={600}>\n                          {formatSymbol(prediction.symbol)}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {prediction.timeframe}\n                        </Typography>\n                      </Box>\n                    </Box>\n                    \n                    <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                      <Chip\n                        label={formatConfidence(prediction.confidence)}\n                        size=\"small\"\n                        sx={{\n                          bgcolor: alpha(getConfidenceColor(prediction.confidence), 0.1),\n                          color: getConfidenceColor(prediction.confidence),\n                          fontWeight: 600,\n                        }}\n                      />\n                      {getStatusChip(prediction.status)}\n                    </Box>\n                  </Box>\n\n                  {/* Signal Details */}\n                  <Box sx={{ mb: 1 }}>\n                    <Chip\n                      label={prediction.direction.toUpperCase()}\n                      size=\"small\"\n                      sx={{\n                        bgcolor: alpha(getDirectionColor(prediction.direction), 0.1),\n                        color: getDirectionColor(prediction.direction),\n                        fontWeight: 600,\n                        mr: 1,\n                      }}\n                    />\n                    <Typography variant=\"body2\" component=\"span\">\n                      Target: {prediction.targetPrice.toFixed(5)}\n                    </Typography>\n                  </Box>\n\n                  {/* AI Reasoning */}\n                  <Typography\n                    variant=\"body2\"\n                    color=\"text.secondary\"\n                    sx={{\n                      fontSize: '0.8rem',\n                      fontStyle: 'italic',\n                      lineHeight: 1.4,\n                    }}\n                  >\n                    \"{prediction.reasoning}\"\n                  </Typography>\n\n                  {/* Time Info */}\n                  <Box\n                    sx={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      alignItems: 'center',\n                      mt: 1,\n                      pt: 1,\n                      borderTop: `1px solid ${alpha(theme.palette.divider, 0.5)}`,\n                    }}\n                  >\n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      {formatRelativeTime(prediction.createdAt)}\n                    </Typography>\n                    \n                    <Typography variant=\"caption\" color=\"text.secondary\">\n                      Expires {formatRelativeTime(prediction.expiresAt)}\n                    </Typography>\n                  </Box>\n                </Box>\n              </ListItem>\n            ))}\n          </List>\n        )}\n\n        {/* View More Button */}\n        {realTimePredictions.length > 6 && (\n          <Box sx={{ textAlign: 'center', mt: 2 }}>\n            <Button\n              variant=\"outlined\"\n              size=\"small\"\n              startIcon={<AutoAwesome />}\n              href=\"/ai-insights\"\n            >\n              View All AI Insights\n            </Button>\n          </Box>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default AIInsightsWidget;"