import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  Typography,\n  Box,\n  List,\n  ListItem,\n  ListItemText,\n  Chip,\n  IconButton,\n  Button,\n  Tooltip,\n  useTheme,\n  alpha,\n  Divider,\n  Stack,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  TrendingDown,\n  Close,\n  Edit,\n  MoreVert,\n  Add,\n  Refresh,\n} from '@mui/icons-material';\nimport { Position, PositionType } from '@/types';\nimport { formatCurrency, formatForexPrice, formatSymbol, formatDateTime } from '@/utils/formatters';\nimport { useWebSocket } from '@/services/websocket';\n\ninterface PositionsWidgetProps {\n  positions: Position[];\n}\n\nconst PositionsWidget: React.FC<PositionsWidgetProps> = ({ positions }) => {\n  const theme = useTheme();\n  const { isConnected, on, off } = useWebSocket();\n  const [realTimePositions, setRealTimePositions] = useState<Position[]>(positions);\n  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());\n\n  // Update real-time positions when props change\n  useEffect(() => {\n    setRealTimePositions(positions);\n  }, [positions]);\n\n  // Subscribe to real-time position updates\n  useEffect(() => {\n    const handlePositionUpdate = (data: Position) => {\n      setRealTimePositions(prev => {\n        const index = prev.findIndex(pos => pos.id === data.id);\n        if (index !== -1) {\n          const updated = [...prev];\n          updated[index] = { ...updated[index], ...data };\n          return updated;\n        }\n        return [...prev, data];\n      });\n      setLastUpdated(new Date());\n    };\n\n    if (isConnected()) {\n      on('position_update', handlePositionUpdate);\n    }\n\n    return () => {\n      off('position_update', handlePositionUpdate);\n    };\n  }, [isConnected, on, off]);\n\n  const getTotalPnL = () => {\n    return realTimePositions.reduce((sum, pos) => sum + pos.profit, 0);\n  };\n\n  const getPositionTypeIcon = (type: PositionType) => {\n    return type === PositionType.BUY ? \n      <TrendingUp sx={{ fontSize: 16, color: 'success.main' }} /> : \n      <TrendingDown sx={{ fontSize: 16, color: 'error.main' }} />;\n  };\n\n  const getPositionTypeColor = (type: PositionType) => {\n    return type === PositionType.BUY ? theme.palette.success.main : theme.palette.error.main;\n  };\n\n  const getProfitColor = (profit: number) => {\n    if (profit > 0) return theme.palette.success.main;\n    if (profit < 0) return theme.palette.error.main;\n    return theme.palette.text.secondary;\n  };\n\n  const handleClosePosition = (positionId: string) => {\n    // This would typically call an API to close the position\n    console.log('Closing position:', positionId);\n  };\n\n  const handleEditPosition = (positionId: string) => {\n    // This would open a modal to edit SL/TP\n    console.log('Editing position:', positionId);\n  };\n\n  const totalPnL = getTotalPnL();\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Open Positions\"\n        subheader={`${realTimePositions.length} position${realTimePositions.length !== 1 ? 's' : ''}`}\n        action={\n          <Stack direction=\"row\" spacing={1}>\n            <Tooltip title=\"Add Position\">\n              <IconButton size=\"small\" color=\"primary\">\n                <Add />\n              </IconButton>\n            </Tooltip>\n            <Tooltip title=\"Refresh\">\n              <IconButton size=\"small\">\n                <Refresh />\n              </IconButton>\n            </Tooltip>\n          </Stack>\n        }\n        sx={{\n          '& .MuiCardHeader-title': {\n            fontSize: '1.25rem',\n            fontWeight: 600,\n          },\n        }}\n      />\n      \n      <CardContent sx={{ pt: 0 }}>\n        {/* Summary */}\n        <Box\n          sx={{\n            p: 2,\n            mb: 2,\n            borderRadius: 2,\n            bgcolor: alpha(\n              totalPnL >= 0 ? theme.palette.success.main : theme.palette.error.main,\n              0.1\n            ),\n            border: `1px solid ${alpha(\n              totalPnL >= 0 ? theme.palette.success.main : theme.palette.error.main,\n              0.2\n            )}`,\n          }}\n        >\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            Total P&L\n          </Typography>\n          <Typography\n            variant=\"h5\"\n            fontWeight={600}\n            sx={{\n              color: getProfitColor(totalPnL),\n            }}\n          >\n            {totalPnL >= 0 ? '+' : ''}{formatCurrency(totalPnL)}\n          </Typography>\n        </Box>\n\n        {/* Positions List */}\n        {realTimePositions.length === 0 ? (\n          <Box\n            sx={{\n              textAlign: 'center',\n              py: 4,\n              color: 'text.secondary',\n            }}\n          >\n            <Typography variant=\"body2\">\n              No open positions\n            </Typography>\n            <Button\n              variant=\"outlined\"\n              startIcon={<Add />}\n              sx={{ mt: 2 }}\n              size=\"small\"\n            >\n              New Position\n            </Button>\n          </Box>\n        ) : (\n          <List disablePadding>\n            {realTimePositions.map((position, index) => (\n              <React.Fragment key={position.id}>\n                <ListItem\n                  disablePadding\n                  sx={{\n                    p: 2,\n                    borderRadius: 2,\n                    mb: 1,\n                    border: `1px solid ${theme.palette.divider}`,\n                    '&:hover': {\n                      bgcolor: alpha(theme.palette.action.hover, 0.5),\n                    },\n                  }}\n                >\n                  <Box sx={{ width: '100%' }}>\n                    {/* Header */}\n                    <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                        mb: 1,\n                      }}\n                    >\n                      <Box display=\"flex\" alignItems=\"center\" gap={1}>\n                        {getPositionTypeIcon(position.type)}\n                        <Typography variant=\"subtitle2\" fontWeight={600}>\n                          {formatSymbol(position.symbol)}\n                        </Typography>\n                        <Chip\n                          label={position.type.toUpperCase()}\n                          size=\"small\"\n                          sx={{\n                            bgcolor: alpha(getPositionTypeColor(position.type), 0.1),\n                            color: getPositionTypeColor(position.type),\n                            border: `1px solid ${alpha(getPositionTypeColor(position.type), 0.3)}`,\n                          }}\n                        />\n                      </Box>\n                      \n                      <Box display=\"flex\" alignItems=\"center\" gap={0.5}>\n                        <Tooltip title=\"Edit Position\">\n                          <IconButton\n                            size=\"small\"\n                            onClick={() => handleEditPosition(position.id)}\n                          >\n                            <Edit sx={{ fontSize: 16 }} />\n                          </IconButton>\n                        </Tooltip>\n                        <Tooltip title=\"Close Position\">\n                          <IconButton\n                            size=\"small\"\n                            color=\"error\"\n                            onClick={() => handleClosePosition(position.id)}\n                          >\n                            <Close sx={{ fontSize: 16 }} />\n                          </IconButton>\n                        </Tooltip>\n                      </Box>\n                    </Box>\n\n                    {/* Details */}\n                    <Box sx={{ mb: 1 }}>\n                      <Stack direction=\"row\" spacing={2} flexWrap=\"wrap\">\n                        <Box>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Volume\n                          </Typography>\n                          <Typography variant=\"body2\" fontFamily=\"monospace\">\n                            {position.volume.toFixed(2)}\n                          </Typography>\n                        </Box>\n                        \n                        <Box>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Open Price\n                          </Typography>\n                          <Typography variant=\"body2\" fontFamily=\"monospace\">\n                            {formatForexPrice(position.openPrice, position.symbol)}\n                          </Typography>\n                        </Box>\n                        \n                        <Box>\n                          <Typography variant=\"caption\" color=\"text.secondary\">\n                            Current Price\n                          </Typography>\n                          <Typography variant=\"body2\" fontFamily=\"monospace\">\n                            {formatForexPrice(position.currentPrice, position.symbol)}\n                          </Typography>\n                        </Box>\n                      </Stack>\n                    </Box>\n\n                    {/* P&L */}\n                    <Box\n                      sx={{\n                        display: 'flex',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                        pt: 1,\n                        borderTop: `1px solid ${theme.palette.divider}`,\n                      }}\n                    >\n                      <Box>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          Opened\n                        </Typography>\n                        <Typography variant=\"caption\" display=\"block\">\n                          {formatDateTime(position.openTime, { \n                            month: 'short', \n                            day: 'numeric',\n                            hour: '2-digit',\n                            minute: '2-digit'\n                          })}\n                        </Typography>\n                      </Box>\n                      \n                      <Box textAlign=\"right\">\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          P&L\n                        </Typography>\n                        <Typography\n                          variant=\"subtitle2\"\n                          fontWeight={600}\n                          sx={{\n                            color: getProfitColor(position.profit),\n                          }}\n                        >\n                          {position.profit >= 0 ? '+' : ''}{formatCurrency(position.profit)}\n                        </Typography>\n                      </Box>\n                    </Box>\n\n                    {/* Stop Loss / Take Profit */}\n                    {(position.sl || position.tp) && (\n                      <Box sx={{ mt: 1 }}>\n                        <Stack direction=\"row\" spacing={2}>\n                          {position.sl && (\n                            <Box>\n                              <Typography variant=\"caption\" color=\"error.main\">\n                                SL: {formatForexPrice(position.sl, position.symbol)}\n                              </Typography>\n                            </Box>\n                          )}\n                          {position.tp && (\n                            <Box>\n                              <Typography variant=\"caption\" color=\"success.main\">\n                                TP: {formatForexPrice(position.tp, position.symbol)}\n                              </Typography>\n                            </Box>\n                          )}\n                        </Stack>\n                      </Box>\n                    )}\n                  </Box>\n                </ListItem>\n              </React.Fragment>\n            ))}\n          </List>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default PositionsWidget;"