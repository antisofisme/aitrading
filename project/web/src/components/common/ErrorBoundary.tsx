import React, { Component, ErrorInfo, ReactNode } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Button,\n  Card,\n  CardContent,\n  Alert,\n  Stack,\n} from '@mui/material';\nimport {\n  ErrorOutline,\n  Refresh,\n  Home,\n  BugReport,\n} from '@mui/icons-material';\n\ninterface Props {\n  children: ReactNode;\n  fallback?: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\nclass ErrorBoundary extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): State {\n    return {\n      hasError: true,\n      error,\n      errorInfo: null,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('ErrorBoundary caught an error:', error, errorInfo);\n    \n    this.setState({\n      error,\n      errorInfo,\n    });\n\n    // You can also log the error to an error reporting service\n    // logErrorToService(error, errorInfo);\n  }\n\n  handleRetry = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  handleGoHome = () => {\n    window.location.href = '/';\n  };\n\n  handleReportBug = () => {\n    const error = this.state.error;\n    const userAgent = navigator.userAgent;\n    const url = window.location.href;\n    const timestamp = new Date().toISOString();\n    \n    const bugReport = {\n      error: error?.message,\n      stack: error?.stack,\n      userAgent,\n      url,\n      timestamp,\n    };\n\n    // In a real app, this would send to your error tracking service\n    console.log('Bug report:', bugReport);\n    \n    // For now, copy to clipboard\n    navigator.clipboard.writeText(JSON.stringify(bugReport, null, 2))\n      .then(() => {\n        alert('Error details copied to clipboard. Please share this with our support team.');\n      })\n      .catch(() => {\n        alert('Unable to copy error details. Please take a screenshot and contact support.');\n      });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      // If a custom fallback is provided, use it\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <Box\n          sx={{\n            minHeight: '100vh',\n            display: 'flex',\n            alignItems: 'center',\n            bgcolor: 'background.default',\n            py: 4,\n          }}\n        >\n          <Container maxWidth=\"md\">\n            <Card\n              sx={{\n                textAlign: 'center',\n                p: 4,\n                borderRadius: 3,\n              }}\n            >\n              <CardContent>\n                <ErrorOutline\n                  sx={{\n                    fontSize: 80,\n                    color: 'error.main',\n                    mb: 3,\n                  }}\n                />\n                \n                <Typography variant=\"h4\" gutterBottom color=\"error\">\n                  Oops! Something went wrong\n                </Typography>\n                \n                <Typography variant=\"body1\" color=\"text.secondary\" sx={{ mb: 4 }}>\n                  We're sorry, but something unexpected happened. Our team has been notified\n                  and is working to fix the issue.\n                </Typography>\n\n                {process.env.NODE_ENV === 'development' && this.state.error && (\n                  <Alert severity=\"error\" sx={{ mb: 4, textAlign: 'left' }}>\n                    <Typography variant=\"h6\" gutterBottom>\n                      Error Details (Development Mode)\n                    </Typography>\n                    <Typography variant=\"body2\" component=\"pre\" sx={{ mb: 2 }}>\n                      {this.state.error.message}\n                    </Typography>\n                    {this.state.error.stack && (\n                      <Typography\n                        variant=\"caption\"\n                        component=\"pre\"\n                        sx={{\n                          fontSize: '0.75rem',\n                          overflow: 'auto',\n                          maxHeight: 200,\n                          bgcolor: 'background.paper',\n                          p: 1,\n                          borderRadius: 1,\n                        }}\n                      >\n                        {this.state.error.stack}\n                      </Typography>\n                    )}\n                  </Alert>\n                )}\n\n                <Stack\n                  direction={{ xs: 'column', sm: 'row' }}\n                  spacing={2}\n                  justifyContent=\"center\"\n                  alignItems=\"center\"\n                >\n                  <Button\n                    variant=\"contained\"\n                    startIcon={<Refresh />}\n                    onClick={this.handleRetry}\n                    size=\"large\"\n                  >\n                    Try Again\n                  </Button>\n                  \n                  <Button\n                    variant=\"outlined\"\n                    startIcon={<Home />}\n                    onClick={this.handleGoHome}\n                    size=\"large\"\n                  >\n                    Go Home\n                  </Button>\n                  \n                  <Button\n                    variant=\"text\"\n                    startIcon={<BugReport />}\n                    onClick={this.handleReportBug}\n                    size=\"large\"\n                  >\n                    Report Bug\n                  </Button>\n                </Stack>\n              </CardContent>\n            </Card>\n          </Container>\n        </Box>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n\n// Hook version for functional components\nexport const useErrorHandler = () => {\n  const handleError = (error: Error, errorInfo?: ErrorInfo) => {\n    console.error('Error caught by useErrorHandler:', error, errorInfo);\n    \n    // You can implement custom error handling logic here\n    // For example, showing a toast notification or sending to error service\n  };\n\n  return handleError;\n};\n\n// Higher-order component version\nexport const withErrorBoundary = <P extends object>(\n  Component: React.ComponentType<P>,\n  fallback?: ReactNode\n) => {\n  const WrappedComponent = (props: P) => (\n    <ErrorBoundary fallback={fallback}>\n      <Component {...props} />\n    </ErrorBoundary>\n  );\n\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n};"