import React, { createContext, useContext, useState, ReactNode } from 'react';\nimport {\n  Backdrop,\n  CircularProgress,\n  Typography,\n  Box,\n  LinearProgress,\n  Fade,\n  useTheme,\n  alpha,\n} from '@mui/material';\n\ninterface LoadingState {\n  isLoading: boolean;\n  message?: string;\n  progress?: number; // 0-100 for progress bar\n}\n\ninterface LoadingContextType {\n  showLoading: (message?: string) => void;\n  hideLoading: () => void;\n  setProgress: (progress: number) => void;\n  isLoading: boolean;\n}\n\nconst LoadingContext = createContext<LoadingContextType | undefined>(undefined);\n\ninterface LoadingProviderProps {\n  children: ReactNode;\n}\n\nconst LoadingProvider: React.FC<LoadingProviderProps> = ({ children }) => {\n  const theme = useTheme();\n  const [loadingState, setLoadingState] = useState<LoadingState>({\n    isLoading: false,\n  });\n\n  const showLoading = (message?: string) => {\n    setLoadingState({\n      isLoading: true,\n      message,\n      progress: undefined,\n    });\n  };\n\n  const hideLoading = () => {\n    setLoadingState({\n      isLoading: false,\n      message: undefined,\n      progress: undefined,\n    });\n  };\n\n  const setProgress = (progress: number) => {\n    setLoadingState(prev => ({\n      ...prev,\n      progress: Math.max(0, Math.min(100, progress)),\n    }));\n  };\n\n  const contextValue: LoadingContextType = {\n    showLoading,\n    hideLoading,\n    setProgress,\n    isLoading: loadingState.isLoading,\n  };\n\n  return (\n    <LoadingContext.Provider value={contextValue}>\n      {children}\n      \n      {/* Loading Backdrop */}\n      <Backdrop\n        sx={{\n          color: '#fff',\n          zIndex: theme.zIndex.drawer + 1,\n          bgcolor: alpha(theme.palette.background.default, 0.8),\n          backdropFilter: 'blur(4px)',\n        }}\n        open={loadingState.isLoading}\n      >\n        <Fade in={loadingState.isLoading} timeout={300}>\n          <Box\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              alignItems: 'center',\n              textAlign: 'center',\n              p: 4,\n              borderRadius: 2,\n              bgcolor: alpha(theme.palette.background.paper, 0.9),\n              boxShadow: theme.shadows[8],\n              minWidth: 300,\n              maxWidth: 400,\n            }}\n          >\n            <CircularProgress\n              size={60}\n              thickness={4}\n              sx={{\n                mb: 3,\n                color: theme.palette.primary.main,\n              }}\n            />\n            \n            {loadingState.message && (\n              <Typography\n                variant=\"h6\"\n                color=\"text.primary\"\n                gutterBottom\n                sx={{ fontWeight: 500 }}\n              >\n                {loadingState.message}\n              </Typography>\n            )}\n            \n            {loadingState.progress !== undefined && (\n              <Box sx={{ width: '100%', mt: 2 }}>\n                <LinearProgress\n                  variant=\"determinate\"\n                  value={loadingState.progress}\n                  sx={{\n                    height: 8,\n                    borderRadius: 4,\n                    bgcolor: alpha(theme.palette.primary.main, 0.2),\n                    '& .MuiLinearProgress-bar': {\n                      borderRadius: 4,\n                    },\n                  }}\n                />\n                <Typography\n                  variant=\"body2\"\n                  color=\"text.secondary\"\n                  sx={{ mt: 1 }}\n                >\n                  {Math.round(loadingState.progress)}%\n                </Typography>\n              </Box>\n            )}\n            \n            <Typography\n              variant=\"body2\"\n              color=\"text.secondary\"\n              sx={{ mt: 2 }}\n            >\n              Please wait...\n            </Typography>\n          </Box>\n        </Fade>\n      </Backdrop>\n    </LoadingContext.Provider>\n  );\n};\n\nexport default LoadingProvider;\n\n// Hook to use loading context\nexport const useLoading = (): LoadingContextType => {\n  const context = useContext(LoadingContext);\n  if (context === undefined) {\n    throw new Error('useLoading must be used within a LoadingProvider');\n  }\n  return context;\n};\n\n// Higher-order component for automatic loading\nexport const withLoading = <P extends object>(\n  Component: React.ComponentType<P>,\n  loadingMessage?: string\n) => {\n  const WrappedComponent = (props: P) => {\n    const { showLoading, hideLoading } = useLoading();\n    \n    React.useEffect(() => {\n      showLoading(loadingMessage);\n      \n      // Simulate loading time or wait for component to be ready\n      const timer = setTimeout(() => {\n        hideLoading();\n      }, 1000);\n      \n      return () => {\n        clearTimeout(timer);\n        hideLoading();\n      };\n    }, [showLoading, hideLoading]);\n    \n    return <Component {...props} />;\n  };\n  \n  WrappedComponent.displayName = `withLoading(${Component.displayName || Component.name})`;\n  \n  return WrappedComponent;\n};\n\n// Hook for async operations with loading\nexport const useAsyncWithLoading = () => {\n  const { showLoading, hideLoading, setProgress } = useLoading();\n  \n  const executeWithLoading = async <T>(\n    asyncOperation: () => Promise<T>,\n    loadingMessage?: string\n  ): Promise<T> => {\n    try {\n      showLoading(loadingMessage);\n      const result = await asyncOperation();\n      return result;\n    } finally {\n      hideLoading();\n    }\n  };\n  \n  const executeWithProgress = async <T>(\n    asyncOperation: (updateProgress: (progress: number) => void) => Promise<T>,\n    loadingMessage?: string\n  ): Promise<T> => {\n    try {\n      showLoading(loadingMessage);\n      setProgress(0);\n      \n      const result = await asyncOperation((progress) => {\n        setProgress(progress);\n      });\n      \n      setProgress(100);\n      \n      // Brief delay to show 100% completion\n      await new Promise(resolve => setTimeout(resolve, 300));\n      \n      return result;\n    } finally {\n      hideLoading();\n    }\n  };\n  \n  return {\n    executeWithLoading,\n    executeWithProgress,\n  };\n};"