import React, { useState, useEffect } from 'react';\nimport {\n  Box,\n  Drawer,\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Avatar,\n  Menu,\n  MenuItem,\n  Badge,\n  Tooltip,\n  useTheme,\n  useMediaQuery,\n  Container,\n  Divider,\n  Switch,\n  FormControlLabel,\n} from '@mui/material';\nimport {\n  Menu as MenuIcon,\n  Notifications as NotificationsIcon,\n  Settings as SettingsIcon,\n  AccountCircle,\n  Logout,\n  Brightness4,\n  Brightness7,\n  Dashboard as DashboardIcon,\n  TrendingUp,\n  Analytics,\n  AccountBalance,\n  SmartToy,\n} from '@mui/icons-material';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { useAuth } from '@/hooks/useAuth';\nimport { useNotifications } from '@/hooks/useNotifications';\nimport { useThemeMode } from '@/hooks/useThemeMode';\nimport Sidebar from './Sidebar';\nimport NotificationPanel from '../notifications/NotificationPanel';\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n  title?: string;\n}\n\nconst DashboardLayout: React.FC<DashboardLayoutProps> = ({ children, title = 'AI Trading Dashboard' }) => {\n  const theme = useTheme();\n  const router = useRouter();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  \n  // Hooks\n  const { user, logout } = useAuth();\n  const { notifications, unreadCount } = useNotifications();\n  const { mode, toggleMode } = useThemeMode();\n  \n  // State\n  const [mobileOpen, setMobileOpen] = useState(false);\n  const [userMenuAnchor, setUserMenuAnchor] = useState<null | HTMLElement>(null);\n  const [notificationsOpen, setNotificationsOpen] = useState(false);\n  const [settingsOpen, setSettingsOpen] = useState(false);\n\n  // Constants\n  const drawerWidth = 280;\n\n  // Handlers\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n\n  const handleUserMenuOpen = (event: React.MouseEvent<HTMLElement>) => {\n    setUserMenuAnchor(event.currentTarget);\n  };\n\n  const handleUserMenuClose = () => {\n    setUserMenuAnchor(null);\n  };\n\n  const handleLogout = () => {\n    handleUserMenuClose();\n    logout();\n    router.push('/login');\n  };\n\n  const handleNotificationsToggle = () => {\n    setNotificationsOpen(!notificationsOpen);\n  };\n\n  // Navigation items\n  const navigationItems = [\n    {\n      text: 'Dashboard',\n      icon: <DashboardIcon />,\n      path: '/dashboard',\n      active: router.pathname === '/dashboard',\n    },\n    {\n      text: 'Trading',\n      icon: <TrendingUp />,\n      path: '/trading',\n      active: router.pathname.startsWith('/trading'),\n    },\n    {\n      text: 'Analytics',\n      icon: <Analytics />,\n      path: '/analytics',\n      active: router.pathname.startsWith('/analytics'),\n    },\n    {\n      text: 'Portfolio',\n      icon: <AccountBalance />,\n      path: '/portfolio',\n      active: router.pathname.startsWith('/portfolio'),\n    },\n    {\n      text: 'AI Insights',\n      icon: <SmartToy />,\n      path: '/ai-insights',\n      active: router.pathname.startsWith('/ai-insights'),\n    },\n  ];\n\n  // App Bar component\n  const AppBarComponent = (\n    <AppBar\n      position=\"fixed\"\n      sx={{\n        width: { sm: `calc(100% - ${drawerWidth}px)` },\n        ml: { sm: `${drawerWidth}px` },\n        bgcolor: 'background.paper',\n        color: 'text.primary',\n        borderBottom: `1px solid ${theme.palette.divider}`,\n        boxShadow: '0px 1px 3px rgba(0, 0, 0, 0.12)',\n      }}\n    >\n      <Toolbar>\n        <IconButton\n          color=\"inherit\"\n          aria-label=\"open drawer\"\n          edge=\"start\"\n          onClick={handleDrawerToggle}\n          sx={{ mr: 2, display: { sm: 'none' } }}\n        >\n          <MenuIcon />\n        </IconButton>\n        \n        <Typography variant=\"h6\" noWrap component=\"div\" sx={{ flexGrow: 1 }}>\n          {title}\n        </Typography>\n\n        {/* Theme toggle */}\n        <Tooltip title={`Switch to ${mode === 'light' ? 'dark' : 'light'} mode`}>\n          <IconButton onClick={toggleMode} color=\"inherit\">\n            {mode === 'light' ? <Brightness4 /> : <Brightness7 />}\n          </IconButton>\n        </Tooltip>\n\n        {/* Notifications */}\n        <Tooltip title=\"Notifications\">\n          <IconButton color=\"inherit\" onClick={handleNotificationsToggle}>\n            <Badge badgeContent={unreadCount} color=\"error\">\n              <NotificationsIcon />\n            </Badge>\n          </IconButton>\n        </Tooltip>\n\n        {/* Settings */}\n        <Tooltip title=\"Settings\">\n          <IconButton color=\"inherit\" onClick={() => setSettingsOpen(true)}>\n            <SettingsIcon />\n          </IconButton>\n        </Tooltip>\n\n        {/* User menu */}\n        <Tooltip title=\"Account\">\n          <IconButton\n            size=\"large\"\n            edge=\"end\"\n            aria-label=\"account of current user\"\n            aria-haspopup=\"true\"\n            onClick={handleUserMenuOpen}\n            color=\"inherit\"\n            sx={{ ml: 1 }}\n          >\n            <Avatar sx={{ width: 32, height: 32 }}>\n              {user?.firstName?.[0] || user?.email?.[0] || 'U'}\n            </Avatar>\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n    </AppBar>\n  );\n\n  // User menu\n  const UserMenu = (\n    <Menu\n      anchorEl={userMenuAnchor}\n      open={Boolean(userMenuAnchor)}\n      onClose={handleUserMenuClose}\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'right',\n      }}\n      transformOrigin={{\n        vertical: 'top',\n        horizontal: 'right',\n      }}\n    >\n      <MenuItem onClick={handleUserMenuClose}>\n        <AccountCircle sx={{ mr: 1 }} />\n        Profile\n      </MenuItem>\n      <MenuItem onClick={handleUserMenuClose}>\n        <SettingsIcon sx={{ mr: 1 }} />\n        Settings\n      </MenuItem>\n      <Divider />\n      <MenuItem onClick={handleLogout}>\n        <Logout sx={{ mr: 1 }} />\n        Logout\n      </MenuItem>\n    </Menu>\n  );\n\n  return (\n    <Box sx={{ display: 'flex', minHeight: '100vh' }}>\n      {/* App Bar */}\n      {AppBarComponent}\n\n      {/* Sidebar */}\n      <Box\n        component=\"nav\"\n        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}\n      >\n        <Drawer\n          variant=\"temporary\"\n          open={mobileOpen}\n          onClose={handleDrawerToggle}\n          ModalProps={{\n            keepMounted: true, // Better open performance on mobile.\n          }}\n          sx={{\n            display: { xs: 'block', sm: 'none' },\n            '& .MuiDrawer-paper': {\n              boxSizing: 'border-box',\n              width: drawerWidth,\n            },\n          }}\n        >\n          <Sidebar navigationItems={navigationItems} onClose={handleDrawerToggle} />\n        </Drawer>\n        \n        <Drawer\n          variant=\"permanent\"\n          sx={{\n            display: { xs: 'none', sm: 'block' },\n            '& .MuiDrawer-paper': {\n              boxSizing: 'border-box',\n              width: drawerWidth,\n            },\n          }}\n          open\n        >\n          <Sidebar navigationItems={navigationItems} />\n        </Drawer>\n      </Box>\n\n      {/* Main content */}\n      <Box\n        component=\"main\"\n        sx={{\n          flexGrow: 1,\n          p: 3,\n          width: { sm: `calc(100% - ${drawerWidth}px)` },\n          minHeight: '100vh',\n          bgcolor: 'background.default',\n        }}\n      >\n        <Toolbar /> {/* Spacer for AppBar */}\n        \n        <Container maxWidth={false} disableGutters>\n          {children}\n        </Container>\n      </Box>\n\n      {/* User menu */}\n      {UserMenu}\n\n      {/* Notifications panel */}\n      <NotificationPanel\n        open={notificationsOpen}\n        onClose={() => setNotificationsOpen(false)}\n        notifications={notifications}\n      />\n    </Box>\n  );\n};\n\nexport default DashboardLayout;