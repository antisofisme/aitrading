import React from 'react';\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Typography,\n  Divider,\n  Chip,\n  useTheme,\n  alpha,\n} from '@mui/material';\nimport {\n  TrendingUp,\n  Speed,\n  Wifi,\n  WifiOff,\n} from '@mui/icons-material';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport { useWebSocket } from '@/services/websocket';\n\ninterface NavigationItem {\n  text: string;\n  icon: React.ReactElement;\n  path: string;\n  active: boolean;\n  badge?: string | number;\n}\n\ninterface SidebarProps {\n  navigationItems: NavigationItem[];\n  onClose?: () => void;\n}\n\nconst Sidebar: React.FC<SidebarProps> = ({ navigationItems, onClose }) => {\n  const theme = useTheme();\n  const router = useRouter();\n  const { isConnected, getConnectionStatus } = useWebSocket();\n  \n  const connectionStatus = getConnectionStatus();\n\n  const handleNavigation = (path: string) => {\n    router.push(path);\n    if (onClose) {\n      onClose();\n    }\n  };\n\n  const getConnectionStatusColor = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return theme.palette.success.main;\n      case 'connecting':\n        return theme.palette.warning.main;\n      case 'disconnected':\n      default:\n        return theme.palette.error.main;\n    }\n  };\n\n  const getConnectionStatusText = () => {\n    switch (connectionStatus) {\n      case 'connected':\n        return 'Connected';\n      case 'connecting':\n        return 'Connecting...';\n      case 'disconnected':\n      default:\n        return 'Disconnected';\n    }\n  };\n\n  return (\n    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n      {/* Logo and brand */}\n      <Box\n        sx={{\n          p: 3,\n          borderBottom: `1px solid ${theme.palette.divider}`,\n          bgcolor: alpha(theme.palette.primary.main, 0.05),\n        }}\n      >\n        <Box display=\"flex\" alignItems=\"center\" gap={2}>\n          <TrendingUp color=\"primary\" sx={{ fontSize: 32 }} />\n          <Box>\n            <Typography variant=\"h6\" color=\"primary\" fontWeight={600}>\n              AI Trading\n            </Typography>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              Platform v1.0\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Navigation */}\n      <Box sx={{ flexGrow: 1, py: 2 }}>\n        <List disablePadding>\n          {navigationItems.map((item) => (\n            <ListItem key={item.text} disablePadding sx={{ px: 2 }}>\n              <ListItemButton\n                onClick={() => handleNavigation(item.path)}\n                sx={{\n                  borderRadius: 2,\n                  mb: 0.5,\n                  bgcolor: item.active ? alpha(theme.palette.primary.main, 0.1) : 'transparent',\n                  color: item.active ? theme.palette.primary.main : 'inherit',\n                  '&:hover': {\n                    bgcolor: alpha(theme.palette.primary.main, 0.05),\n                  },\n                }}\n              >\n                <ListItemIcon\n                  sx={{\n                    color: item.active ? theme.palette.primary.main : 'inherit',\n                    minWidth: 40,\n                  }}\n                >\n                  {item.icon}\n                </ListItemIcon>\n                <ListItemText\n                  primary={item.text}\n                  primaryTypographyProps={{\n                    fontWeight: item.active ? 600 : 400,\n                    fontSize: '0.875rem',\n                  }}\n                />\n                {item.badge && (\n                  <Chip\n                    label={item.badge}\n                    size=\"small\"\n                    color={item.active ? 'primary' : 'default'}\n                    sx={{ height: 20, fontSize: '0.75rem' }}\n                  />\n                )}\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n      </Box>\n\n      <Divider />\n\n      {/* Connection status */}\n      <Box sx={{ p: 2 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            p: 1.5,\n            borderRadius: 2,\n            bgcolor: alpha(getConnectionStatusColor(), 0.1),\n            border: `1px solid ${alpha(getConnectionStatusColor(), 0.2)}`,\n          }}\n        >\n          {isConnected() ? (\n            <Wifi sx={{ color: getConnectionStatusColor(), fontSize: 20 }} />\n          ) : (\n            <WifiOff sx={{ color: getConnectionStatusColor(), fontSize: 20 }} />\n          )}\n          <Box>\n            <Typography variant=\"caption\" fontWeight={500}>\n              Real-time Data\n            </Typography>\n            <Typography\n              variant=\"caption\"\n              display=\"block\"\n              sx={{ color: getConnectionStatusColor() }}\n            >\n              {getConnectionStatusText()}\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n\n      {/* Performance indicator */}\n      <Box sx={{ p: 2, pt: 0 }}>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1,\n            p: 1.5,\n            borderRadius: 2,\n            bgcolor: alpha(theme.palette.info.main, 0.1),\n            border: `1px solid ${alpha(theme.palette.info.main, 0.2)}`,\n          }}\n        >\n          <Speed sx={{ color: theme.palette.info.main, fontSize: 20 }} />\n          <Box>\n            <Typography variant=\"caption\" fontWeight={500}>\n              Performance\n            </Typography>\n            <Typography\n              variant=\"caption\"\n              display=\"block\"\n              sx={{ color: theme.palette.info.main }}\n            >\n              <10ms latency\n            </Typography>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default Sidebar;