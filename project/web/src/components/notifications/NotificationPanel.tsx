import React from 'react';\nimport {\n  Drawer,\n  Box,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  IconButton,\n  Button,\n  Chip,\n  Divider,\n  Avatar,\n  useTheme,\n  alpha,\n} from '@mui/material';\nimport {\n  Close as CloseIcon,\n  Notifications as NotificationsIcon,\n  TrendingUp,\n  Warning,\n  Info,\n  Error,\n  SmartToy,\n  Security,\n  MarkEmailRead,\n  DeleteSweep,\n} from '@mui/icons-material';\nimport { formatDistanceToNow } from 'date-fns';\nimport { Notification, NotificationType, NotificationSeverity } from '@/types';\n\ninterface NotificationPanelProps {\n  open: boolean;\n  onClose: () => void;\n  notifications: Notification[];\n}\n\nconst NotificationPanel: React.FC<NotificationPanelProps> = ({\n  open,\n  onClose,\n  notifications,\n}) => {\n  const theme = useTheme();\n\n  const getNotificationIcon = (type: NotificationType) => {\n    switch (type) {\n      case NotificationType.TRADE_ALERT:\n        return <TrendingUp />;\n      case NotificationType.AI_SIGNAL:\n        return <SmartToy />;\n      case NotificationType.SYSTEM_ALERT:\n        return <Warning />;\n      case NotificationType.RISK_WARNING:\n        return <Security />;\n      case NotificationType.INFO:\n      default:\n        return <Info />;\n    }\n  };\n\n  const getNotificationColor = (severity: NotificationSeverity) => {\n    switch (severity) {\n      case NotificationSeverity.CRITICAL:\n        return theme.palette.error.main;\n      case NotificationSeverity.HIGH:\n        return theme.palette.warning.main;\n      case NotificationSeverity.MEDIUM:\n        return theme.palette.info.main;\n      case NotificationSeverity.LOW:\n      default:\n        return theme.palette.text.secondary;\n    }\n  };\n\n  const getSeverityChip = (severity: NotificationSeverity) => {\n    const color = (() => {\n      switch (severity) {\n        case NotificationSeverity.CRITICAL:\n          return 'error' as const;\n        case NotificationSeverity.HIGH:\n          return 'warning' as const;\n        case NotificationSeverity.MEDIUM:\n          return 'info' as const;\n        case NotificationSeverity.LOW:\n        default:\n          return 'default' as const;\n      }\n    })();\n\n    return (\n      <Chip\n        label={severity.toUpperCase()}\n        size=\"small\"\n        color={color}\n        variant=\"outlined\"\n        sx={{ height: 20, fontSize: '0.7rem' }}\n      />\n    );\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  return (\n    <Drawer\n      anchor=\"right\"\n      open={open}\n      onClose={onClose}\n      PaperProps={{\n        sx: {\n          width: 400,\n          maxWidth: '90vw',\n        },\n      }}\n    >\n      <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n        {/* Header */}\n        <Box\n          sx={{\n            p: 2,\n            borderBottom: `1px solid ${theme.palette.divider}`,\n            bgcolor: alpha(theme.palette.primary.main, 0.05),\n          }}\n        >\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Box display=\"flex\" alignItems=\"center\" gap={1}>\n              <NotificationsIcon color=\"primary\" />\n              <Typography variant=\"h6\" fontWeight={600}>\n                Notifications\n              </Typography>\n              {unreadCount > 0 && (\n                <Chip\n                  label={unreadCount}\n                  size=\"small\"\n                  color=\"primary\"\n                  sx={{ height: 20 }}\n                />\n              )}\n            </Box>\n            <IconButton onClick={onClose} size=\"small\">\n              <CloseIcon />\n            </IconButton>\n          </Box>\n\n          {/* Actions */}\n          {notifications.length > 0 && (\n            <Box display=\"flex\" gap={1} mt={2}>\n              <Button\n                size=\"small\"\n                startIcon={<MarkEmailRead />}\n                onClick={() => {/* Mark all as read */}}\n                disabled={unreadCount === 0}\n              >\n                Mark All Read\n              </Button>\n              <Button\n                size=\"small\"\n                startIcon={<DeleteSweep />}\n                color=\"error\"\n                onClick={() => {/* Clear all */}}\n              >\n                Clear All\n              </Button>\n            </Box>\n          )}\n        </Box>\n\n        {/* Notifications list */}\n        <Box sx={{ flexGrow: 1, overflow: 'auto' }}>\n          {notifications.length === 0 ? (\n            <Box\n              sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n                p: 3,\n                textAlign: 'center',\n              }}\n            >\n              <NotificationsIcon\n                sx={{ fontSize: 64, color: theme.palette.text.disabled, mb: 2 }}\n              />\n              <Typography variant=\"h6\" color=\"text.secondary\" gutterBottom>\n                No notifications\n              </Typography>\n              <Typography variant=\"body2\" color=\"text.disabled\">\n                You're all caught up! New notifications will appear here.\n              </Typography>\n            </Box>\n          ) : (\n            <List disablePadding>\n              {notifications.map((notification, index) => (\n                <React.Fragment key={notification.id}>\n                  <ListItem\n                    sx={{\n                      py: 1.5,\n                      px: 2,\n                      bgcolor: notification.read\n                        ? 'transparent'\n                        : alpha(theme.palette.primary.main, 0.05),\n                      borderLeft: `4px solid ${getNotificationColor(notification.severity)}`,\n                      cursor: notification.actionUrl ? 'pointer' : 'default',\n                      '&:hover': {\n                        bgcolor: alpha(theme.palette.action.hover, 0.5),\n                      },\n                    }}\n                    onClick={() => {\n                      if (notification.actionUrl) {\n                        window.open(notification.actionUrl, '_blank');\n                      }\n                    }}\n                  >\n                    <ListItemIcon sx={{ minWidth: 40 }}>\n                      <Avatar\n                        sx={{\n                          width: 32,\n                          height: 32,\n                          bgcolor: alpha(getNotificationColor(notification.severity), 0.1),\n                          color: getNotificationColor(notification.severity),\n                        }}\n                      >\n                        {getNotificationIcon(notification.type)}\n                      </Avatar>\n                    </ListItemIcon>\n                    \n                    <ListItemText\n                      primary={\n                        <Box display=\"flex\" alignItems=\"center\" gap={1} mb={0.5}>\n                          <Typography\n                            variant=\"subtitle2\"\n                            fontWeight={notification.read ? 400 : 600}\n                            sx={{ flexGrow: 1 }}\n                          >\n                            {notification.title}\n                          </Typography>\n                          {getSeverityChip(notification.severity)}\n                        </Box>\n                      }\n                      secondary={\n                        <Box>\n                          <Typography\n                            variant=\"body2\"\n                            color=\"text.secondary\"\n                            sx={{ mb: 0.5 }}\n                          >\n                            {notification.message}\n                          </Typography>\n                          <Typography variant=\"caption\" color=\"text.disabled\">\n                            {formatDistanceToNow(notification.createdAt, { addSuffix: true })}\n                          </Typography>\n                        </Box>\n                      }\n                    />\n                    \n                    {!notification.read && (\n                      <Box\n                        sx={\n                          {\n                            width: 8,\n                            height: 8,\n                            borderRadius: '50%',\n                            bgcolor: theme.palette.primary.main,\n                            ml: 1,\n                          }\n                        }\n                      />\n                    )}\n                  </ListItem>\n                  \n                  {index < notifications.length - 1 && (\n                    <Divider variant=\"inset\" component=\"li\" />\n                  )}\n                </React.Fragment>\n              ))}\n            </List>\n          )}\n        </Box>\n      </Box>\n    </Drawer>\n  );\n};\n\nexport default NotificationPanel;