# PC Client Configuration
# For Windows PC client with MetaTrader 5 integration

version: '3.8'

services:
  # MetaTrader 5 Connector
  metatrader-connector:
    build:
      context: .
      dockerfile: docker/pc-client/metatrader-connector.Dockerfile
      target: production
    container_name: aitrading-mt5-connector
    ports:
      - "9001:9001"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - MT5_LOGIN=${MT5_LOGIN}
      - MT5_PASSWORD=${MT5_PASSWORD}
      - MT5_SERVER=${MT5_SERVER}
      - MT5_TIMEOUT=30000
      - MT5_RECONNECT_ATTEMPTS=5
      - MT5_HEARTBEAT_INTERVAL=10000
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
      - ENCRYPTION_ENABLED=true
    volumes:
      - mt5-data:/app/data
      - mt5-logs:/app/logs
      - ./pc-client/config:/app/config:ro
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Data Collector - Multi-source aggregation
  data-collector:
    build:
      context: .
      dockerfile: docker/pc-client/data-collector.Dockerfile
      target: production
    container_name: aitrading-data-collector
    ports:
      - "9002:9002"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DATA_SOURCES=mt5,news,economic_calendar,sentiment
      - UPDATE_FREQUENCY=1000
      - BUFFER_SIZE=10000
      - COMPRESSION_ENABLED=true
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - data-collector-logs:/app/logs
      - collected-data:/app/data
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - metatrader-connector
    restart: unless-stopped

  # Market Monitor - Real-time analysis
  market-monitor:
    build:
      context: .
      dockerfile: docker/pc-client/market-monitor.Dockerfile
      target: production
    container_name: aitrading-market-monitor
    ports:
      - "9003:9003"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - MONITOR_PAIRS=${MONITOR_PAIRS:-EURUSD,GBPUSD,USDJPY,XAUUSD}
      - ALERT_THRESHOLDS=${ALERT_THRESHOLDS}
      - ANALYSIS_INTERVAL=5000
      - PREDICTION_THRESHOLD=0.75
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - market-monitor-logs:/app/logs
      - monitor-data:/app/data
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - data-collector
    restart: unless-stopped

  # Config Manager - Local configuration
  config-manager:
    build:
      context: .
      dockerfile: docker/pc-client/config-manager.Dockerfile
      target: production
    container_name: aitrading-config-manager
    ports:
      - "9004:9004"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - CONFIG_ENCRYPTION=true
      - BACKUP_ENABLED=true
      - BACKUP_INTERVAL=3600000
      - SYNC_WITH_BACKEND=true
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - ./pc-client/config:/app/config
      - config-logs:/app/logs
      - config-backup:/app/backup
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # AI Model Service - Local inference
  ai-model-service:
    build:
      context: .
      dockerfile: docker/pc-client/ai-model-service.Dockerfile
      target: production
    container_name: aitrading-ai-models
    ports:
      - "9005:9005"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - PYTHON_ENV=production
      - MODEL_CACHE_SIZE=1GB
      - INFERENCE_TIMEOUT=100
      - CONFIDENCE_THRESHOLD=0.65
      - MODEL_UPDATE_INTERVAL=3600000
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - ai-models:/app/models
      - ai-cache:/app/cache
      - ai-logs:/app/logs
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G
    restart: unless-stopped

  # Trading Engine - Local execution
  trading-engine-local:
    build:
      context: .
      dockerfile: docker/pc-client/trading-engine.Dockerfile
      target: production
    container_name: aitrading-trading-engine-local
    ports:
      - "9006:9006"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - TRADING_MODE=${TRADING_MODE:-paper}
      - MAX_RISK_PER_TRADE=0.02
      - MAX_DAILY_TRADES=50
      - CONFIDENCE_THRESHOLD=0.75
      - RISK_MANAGEMENT=dynamic
      - POSITION_SIZING=confidence-based
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - trading-logs:/app/logs
      - trading-data:/app/data
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - metatrader-connector
      - ai-model-service
      - market-monitor
    restart: unless-stopped

  # Risk Manager - Local risk control
  risk-manager:
    build:
      context: .
      dockerfile: docker/pc-client/risk-manager.Dockerfile
      target: production
    container_name: aitrading-risk-manager
    ports:
      - "9007:9007"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - MAX_ACCOUNT_RISK=0.05
      - MAX_DRAWDOWN=0.10
      - CORRELATION_THRESHOLD=0.8
      - VAR_CONFIDENCE=0.95
      - STRESS_TEST_ENABLED=true
      - BACKEND_URL=${BACKEND_URL:-http://api-gateway:8000}
    volumes:
      - risk-logs:/app/logs
      - risk-data:/app/data
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - trading-engine-local
    restart: unless-stopped

  # Local Database - SQLite for client data
  local-database:
    image: alpine:latest
    container_name: aitrading-local-db
    command: sh -c "apk add --no-cache sqlite && tail -f /dev/null"
    volumes:
      - local-db:/data
      - ./docker/scripts/init-local-db.sql:/init.sql:ro
    networks:
      - aitrading-pc-client
    restart: unless-stopped

  # Local Cache - Redis for client caching
  local-cache:
    image: redis:7-alpine
    container_name: aitrading-local-cache
    ports:
      - "6380:6379"
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - local-cache-data:/data
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # System Monitor - PC client monitoring
  system-monitor:
    build:
      context: .
      dockerfile: docker/pc-client/system-monitor.Dockerfile
      target: production
    container_name: aitrading-system-monitor
    ports:
      - "9008:9008"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - MONITOR_INTERVAL=5000
      - ALERT_CPU_THRESHOLD=80
      - ALERT_MEMORY_THRESHOLD=85
      - ALERT_DISK_THRESHOLD=90
      - HEALTH_CHECK_INTERVAL=30000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - system-logs:/app/logs
    networks:
      - aitrading-pc-client
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

networks:
  aitrading-pc-client:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  # MT5 and trading data
  mt5-data:
    driver: local
  collected-data:
    driver: local
  monitor-data:
    driver: local
  trading-data:
    driver: local
  risk-data:
    driver: local

  # AI models and cache
  ai-models:
    driver: local
  ai-cache:
    driver: local

  # Local storage
  local-db:
    driver: local
  local-cache-data:
    driver: local
  config-backup:
    driver: local

  # Service logs
  mt5-logs:
    driver: local
  data-collector-logs:
    driver: local
  market-monitor-logs:
    driver: local
  config-logs:
    driver: local
  ai-logs:
    driver: local
  trading-logs:
    driver: local
  risk-logs:
    driver: local
  system-logs:
    driver: local