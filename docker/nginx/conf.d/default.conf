# Default server configuration for AI Trading Platform
# Phase 1: Security-first configuration with performance optimization

# API Gateway backend
upstream api_gateway {
    least_conn;
    server api-gateway:8000 max_fails=3 fail_timeout=30s weight=1;
    keepalive 16;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Data Bridge WebSocket backend
upstream data_bridge_ws {
    ip_hash;  # Sticky sessions for WebSocket
    server data-bridge:8001 max_fails=2 fail_timeout=30s weight=1;
}

# Security Monitor backend
upstream security_monitor {
    server security-monitor:8020 max_fails=2 fail_timeout=30s weight=1;
}

# Map for WebSocket upgrade
map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api_strict:10m rate=60r/m;
limit_req_zone $binary_remote_addr zone=auth:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=websocket:10m rate=30r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=addr:10m;

# Main server block for HTTPS
server {
    listen 443 ssl http2;
    server_name aitrading.local *.aitrading.local;

    # SSL Configuration
    ssl_certificate /etc/nginx/ssl/server.crt;
    ssl_certificate_key /etc/nginx/ssl/server.key;
    ssl_dhparam /etc/nginx/ssl/dhparam.pem;

    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # Security Headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

    # Content Security Policy for AI Trading Platform
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; connect-src 'self' wss: ws:; font-src 'self' data:; object-src 'none'; media-src 'self'; frame-src 'none'; base-uri 'self'; form-action 'self';" always;

    # Performance: Enable compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        application/atom+xml
        application/geo+json
        application/javascript
        application/x-javascript
        application/json
        application/ld+json
        application/manifest+json
        application/rdf+xml
        application/rss+xml
        application/xhtml+xml
        application/xml
        font/eot
        font/otf
        font/ttf
        image/svg+xml
        text/css
        text/javascript
        text/plain
        text/xml;

    # Security: Global rate limiting
    limit_req zone=general burst=200 nodelay;
    limit_conn addr 20;

    # API routes
    location /api/ {
        # Enhanced rate limiting for API
        limit_req zone=api_strict burst=30 nodelay;

        # Security headers for API
        add_header X-API-Rate-Limit "60 requests per minute" always;
        add_header X-Request-ID $request_id always;

        # Proxy to API Gateway
        proxy_pass http://api_gateway/;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header X-Forwarded-Host $server_name;

        # Performance settings
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;

        # Buffering
        proxy_buffering on;
        proxy_buffer_size 8k;
        proxy_buffers 8 8k;
        proxy_busy_buffers_size 16k;

        # Security: Hide backend headers
        proxy_hide_header X-Powered-By;
        proxy_hide_header Server;

        # CORS headers for API
        add_header Access-Control-Allow-Origin "$http_origin" always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
        add_header Access-Control-Allow-Credentials true always;
        add_header Access-Control-Max-Age 86400 always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            return 204;
        }
    }

    # Authentication endpoints with stricter rate limiting
    location ~ ^/api/(auth|login|register|forgot-password) {
        limit_req zone=auth burst=5 nodelay;

        # Enhanced security for auth endpoints
        add_header X-Auth-Rate-Limit "10 requests per minute" always;

        proxy_pass http://api_gateway;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # Timeouts for auth
        proxy_connect_timeout 10s;
        proxy_send_timeout 15s;
        proxy_read_timeout 15s;
    }

    # WebSocket connections for real-time data
    location /ws/ {
        limit_req zone=websocket burst=10 nodelay;

        # WebSocket headers
        proxy_pass http://data_bridge_ws/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # WebSocket timeouts
        proxy_connect_timeout 30s;
        proxy_send_timeout 600s;
        proxy_read_timeout 600s;

        # Disable buffering for WebSocket
        proxy_buffering off;

        # Security for WebSocket
        add_header X-WebSocket-Rate-Limit "30 connections per minute" always;
    }

    # Security monitoring endpoints
    location /security/ {
        # Restrict access to security endpoints
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;

        proxy_pass http://security_monitor/;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # Static assets with caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options nosniff;

        # Security: Prevent hotlinking
        valid_referers none blocked server_names *.aitrading.local;
        if ($invalid_referer) {
            return 403;
        }
    }

    # Security: Block access to sensitive files
    location ~ /\.(env|git|svn|htaccess|htpasswd) {
        deny all;
        return 404;
    }

    location ~ \.(sql|conf|yml|yaml|json)$ {
        deny all;
        return 404;
    }

    # Default fallback for SPA
    location / {
        try_files $uri $uri/ /index.html;

        # Security headers for HTML
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
    }

    # Custom error pages
    error_page 400 /error/400.html;
    error_page 401 /error/401.html;
    error_page 403 /error/403.html;
    error_page 404 /error/404.html;
    error_page 429 /error/429.html;
    error_page 500 502 503 504 /error/50x.html;

    # Error page locations
    location ^~ /error/ {
        internal;
        root /usr/share/nginx/html;
    }
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name aitrading.local *.aitrading.local;

    # Security headers even for redirects
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

    # Health check on HTTP
    location /health {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}