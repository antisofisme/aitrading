# Web-Only Deployment Configuration
# For users who only want web dashboard access without PC client

version: '3.8'

services:
  # Web Frontend - React Dashboard
  web-dashboard:
    build:
      context: .
      dockerfile: docker/web/web-dashboard.Dockerfile
      target: production
    container_name: aitrading-web-dashboard
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8001
      - REACT_APP_VERSION=${APP_VERSION:-1.0.0}
      - GENERATE_SOURCEMAP=false
    volumes:
      - ./web/public:/app/public:ro
      - web-assets:/app/build
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - api-gateway
      - websocket-service

  # API Gateway - Web-Optimized
  api-gateway:
    build:
      context: .
      dockerfile: docker/services/api-gateway.Dockerfile
      target: web-optimized
    container_name: aitrading-api-gateway-web
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=http://localhost:3000,https://*.aitrading.com
      - RATE_LIMIT_WEB_USER=1000
      - RATE_LIMIT_WEB_ANONYMOUS=100
      - SUBSCRIPTION_VALIDATION_ENABLED=true
      - WEB_ANALYTICS_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - api-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
      - redis-cache
    restart: unless-stopped

  # WebSocket Service - Real-time Updates
  websocket-service:
    build:
      context: .
      dockerfile: docker/web/websocket-service.Dockerfile
      target: production
    container_name: aitrading-websocket-web
    ports:
      - "8001:8001"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis-cache:6379
      - MAX_CONNECTIONS=10000
      - HEARTBEAT_INTERVAL=30000
    volumes:
      - websocket-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis-cache
    restart: unless-stopped

  # User Management Service
  user-management:
    build:
      context: .
      dockerfile: docker/web/user-management.Dockerfile
      target: production
    container_name: aitrading-user-management
    ports:
      - "8021:8021"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRY=15m
      - REFRESH_TOKEN_EXPIRY=7d
      - PASSWORD_HASH_ROUNDS=12
      - EMAIL_VERIFICATION_ENABLED=true
      - MFA_ENABLED=true
    volumes:
      - user-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
    restart: unless-stopped

  # Subscription Service
  subscription-service:
    build:
      context: .
      dockerfile: docker/web/subscription-service.Dockerfile
      target: production
    container_name: aitrading-subscription-service
    ports:
      - "8022:8022"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis-cache:6379
      - MIDTRANS_SERVER_KEY=${MIDTRANS_SERVER_KEY}
      - MIDTRANS_CLIENT_KEY=${MIDTRANS_CLIENT_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - BILLING_CYCLE_DEFAULT=monthly
    volumes:
      - subscription-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8022/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
      - redis-cache
    restart: unless-stopped

  # Analytics Service
  analytics-service:
    build:
      context: .
      dockerfile: docker/web/analytics-service.Dockerfile
      target: production
    container_name: aitrading-analytics-service
    ports:
      - "8026:8026"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DATABASE_URL=${DATABASE_URL}
      - CLICKHOUSE_URL=${CLICKHOUSE_URL}
      - REDIS_URL=redis://redis-cache:6379
      - ANALYTICS_RETENTION_DAYS=730
      - REAL_TIME_ANALYTICS=true
    volumes:
      - analytics-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - database-service
      - clickhouse-analytics
      - redis-cache
    restart: unless-stopped

  # Database Service - Web-Optimized
  database-service:
    build:
      context: .
      dockerfile: docker/services/database-service.Dockerfile
      target: web-optimized
    container_name: aitrading-database-service-web
    ports:
      - "8008:8008"
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=INFO
      - DB_POOL_SIZE=20
      - DB_CONNECTION_TIMEOUT=5000
      - WEB_ANALYTICS_ENABLED=true
    volumes:
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - database-logs:/app/logs
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres-main
      - clickhouse-analytics
      - redis-cache
    restart: unless-stopped

  # PostgreSQL - Primary Database
  postgres-main:
    image: postgres:15-alpine
    container_name: aitrading-postgres-web
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-aitrading_web}
      - POSTGRES_USER=${POSTGRES_USER:-aitrading}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/scripts/init-postgres-web.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aitrading} -d ${POSTGRES_DB:-aitrading_web}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # ClickHouse - Analytics Data
  clickhouse-analytics:
    image: clickhouse/clickhouse-server:latest
    container_name: aitrading-clickhouse-web
    ports:
      - "8123:8123"
      - "9000:9000"
    environment:
      - CLICKHOUSE_DB=${CLICKHOUSE_DB:-aitrading_analytics}
      - CLICKHOUSE_USER=${CLICKHOUSE_USER:-aitrading}
      - CLICKHOUSE_PASSWORD=${CLICKHOUSE_PASSWORD}
    volumes:
      - clickhouse-data:/var/lib/clickhouse
      - ./docker/scripts/init-clickhouse-web.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8123/ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Redis - Caching and Sessions
  redis-cache:
    image: redis:7-alpine
    container_name: aitrading-redis-web
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Nginx - Reverse Proxy and Load Balancer
  nginx:
    image: nginx:alpine
    container_name: aitrading-nginx-web
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/web/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/web/ssl:/etc/nginx/ssl:ro
      - web-assets:/var/www/html:ro
    networks:
      - aitrading-web
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - web-dashboard
      - api-gateway
    restart: unless-stopped

networks:
  aitrading-web:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  # Application data
  web-assets:
    driver: local
  postgres-data:
    driver: local
  clickhouse-data:
    driver: local
  redis-data:
    driver: local

  # Service logs
  api-logs:
    driver: local
  websocket-logs:
    driver: local
  user-logs:
    driver: local
  subscription-logs:
    driver: local
  analytics-logs:
    driver: local
  database-logs:
    driver: local